
slaventv.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001220  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00001220  000012b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000055  00800070  00800070  000012c4  2**0
                  ALLOC
  3 .stab         000026d0  00000000  00000000  000012c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a1e  00000000  00000000  00003994  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000043b2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000140  00000000  00000000  000043e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000134f  00000000  00000000  00004521  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004c8  00000000  00000000  00005870  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000064b  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000048c  00000000  00000000  00006384  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004e2  00000000  00000000  00006810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001303  00000000  00000000  00006cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000138  00000000  00000000  00007ff5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
       2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
       4:	96 c4       	rjmp	.+2348   	; 0x932 <__vector_2>
       6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
       8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
       a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
       c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
       e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
      10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
      12:	c3 c4       	rjmp	.+2438   	; 0x99a <__vector_9>
      14:	51 c5       	rjmp	.+2722   	; 0xab8 <__vector_10>
      16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
      18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
      1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
      1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
      1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
      20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
      22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
      24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
      26:	11 24       	eor	r1, r1
      28:	1f be       	out	0x3f, r1	; 63
      2a:	cf e5       	ldi	r28, 0x5F	; 95
      2c:	d4 e0       	ldi	r29, 0x04	; 4
      2e:	de bf       	out	0x3e, r29	; 62
      30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
      32:	10 e0       	ldi	r17, 0x00	; 0
      34:	a0 e6       	ldi	r26, 0x60	; 96
      36:	b0 e0       	ldi	r27, 0x00	; 0
      38:	e0 e2       	ldi	r30, 0x20	; 32
      3a:	f2 e1       	ldi	r31, 0x12	; 18
      3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
      3e:	05 90       	lpm	r0, Z+
      40:	0d 92       	st	X+, r0
      42:	a0 37       	cpi	r26, 0x70	; 112
      44:	b1 07       	cpc	r27, r17
      46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
      48:	20 e0       	ldi	r18, 0x00	; 0
      4a:	a0 e7       	ldi	r26, 0x70	; 112
      4c:	b0 e0       	ldi	r27, 0x00	; 0
      4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
      50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
      52:	a5 3c       	cpi	r26, 0xC5	; 197
      54:	b2 07       	cpc	r27, r18
      56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
      58:	a0 d5       	rcall	.+2880   	; 0xb9a <main>
      5a:	e0 c8       	rjmp	.-3648   	; 0xfffff21c <__eeprom_end+0xff7ef21c>

0000005c <__bad_interrupt>:
      5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <PIDinitialize>:
#include"PIDgeneral.h"

void PIDinitialize()
{
	Sampletime_milli = 1000;
      5e:	88 ee       	ldi	r24, 0xE8	; 232
      60:	93 e0       	ldi	r25, 0x03	; 3
      62:	90 93 b2 00 	sts	0x00B2, r25
      66:	80 93 b1 00 	sts	0x00B1, r24
	Samplefrequency=1;
      6a:	81 e0       	ldi	r24, 0x01	; 1
      6c:	90 e0       	ldi	r25, 0x00	; 0
      6e:	90 93 ae 00 	sts	0x00AE, r25
      72:	80 93 ad 00 	sts	0x00AD, r24
	Proportional=0;
      76:	10 92 8c 00 	sts	0x008C, r1
      7a:	10 92 8d 00 	sts	0x008D, r1
      7e:	10 92 8e 00 	sts	0x008E, r1
      82:	10 92 8f 00 	sts	0x008F, r1
	Integral=0;
      86:	10 92 bb 00 	sts	0x00BB, r1
      8a:	10 92 bc 00 	sts	0x00BC, r1
      8e:	10 92 bd 00 	sts	0x00BD, r1
      92:	10 92 be 00 	sts	0x00BE, r1
	Derivative=0;
      96:	10 92 94 00 	sts	0x0094, r1
      9a:	10 92 95 00 	sts	0x0095, r1
      9e:	10 92 96 00 	sts	0x0096, r1
      a2:	10 92 97 00 	sts	0x0097, r1
	error=0;
      a6:	10 92 b7 00 	sts	0x00B7, r1
      aa:	10 92 b8 00 	sts	0x00B8, r1
      ae:	10 92 b9 00 	sts	0x00B9, r1
      b2:	10 92 ba 00 	sts	0x00BA, r1
	lasterror=0;
      b6:	10 92 a9 00 	sts	0x00A9, r1
      ba:	10 92 aa 00 	sts	0x00AA, r1
      be:	10 92 ab 00 	sts	0x00AB, r1
      c2:	10 92 ac 00 	sts	0x00AC, r1
	totalerror=0;
      c6:	10 92 a4 00 	sts	0x00A4, r1
      ca:	10 92 a5 00 	sts	0x00A5, r1
      ce:	10 92 a6 00 	sts	0x00A6, r1
      d2:	10 92 a7 00 	sts	0x00A7, r1
	input=0;
      d6:	10 92 a0 00 	sts	0x00A0, r1
      da:	10 92 a1 00 	sts	0x00A1, r1
      de:	10 92 a2 00 	sts	0x00A2, r1
      e2:	10 92 a3 00 	sts	0x00A3, r1
	lastinput=0;
      e6:	10 92 88 00 	sts	0x0088, r1
      ea:	10 92 89 00 	sts	0x0089, r1
      ee:	10 92 8a 00 	sts	0x008A, r1
      f2:	10 92 8b 00 	sts	0x008B, r1
	controlDirection=TRUE;
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	80 93 87 00 	sts	0x0087, r24
      fc:	08 95       	ret

000000fe <SetOutputLimits>:
}

void SetOutputLimits(int Min, int Max)
{
	if(Min >= Max) return;
      fe:	86 17       	cp	r24, r22
     100:	97 07       	cpc	r25, r23
     102:	44 f4       	brge	.+16     	; 0x114 <SetOutputLimits+0x16>
	outMin = Min;
     104:	90 93 9b 00 	sts	0x009B, r25
     108:	80 93 9a 00 	sts	0x009A, r24
	outMax = Max;
     10c:	70 93 99 00 	sts	0x0099, r23
     110:	60 93 98 00 	sts	0x0098, r22
     114:	08 95       	ret

00000116 <SetIntegralLimits>:
}

void SetIntegralLimits(char check,int Min, int Max)
{
	limitintegral=check;
     116:	80 93 a8 00 	sts	0x00A8, r24
	if(Min >= Max) return;
     11a:	64 17       	cp	r22, r20
     11c:	75 07       	cpc	r23, r21
     11e:	44 f4       	brge	.+16     	; 0x130 <SetIntegralLimits+0x1a>
	Integralmin = Min;
     120:	70 93 b0 00 	sts	0x00B0, r23
     124:	60 93 af 00 	sts	0x00AF, r22
	Integralmax = Max;
     128:	50 93 c0 00 	sts	0x00C0, r21
     12c:	40 93 bf 00 	sts	0x00BF, r20
     130:	08 95       	ret

00000132 <SetSamplefrequency>:
}
void SetSamplefrequency(unsigned int  NewSamplefrequency)
{
     132:	cf 92       	push	r12
     134:	df 92       	push	r13
     136:	ef 92       	push	r14
     138:	ff 92       	push	r15
     13a:	cf 93       	push	r28
     13c:	df 93       	push	r29
     13e:	ec 01       	movw	r28, r24
	if (NewSamplefrequency > 0)
     140:	00 97       	sbiw	r24, 0x00	; 0
     142:	09 f4       	brne	.+2      	; 0x146 <SetSamplefrequency+0x14>
     144:	47 c0       	rjmp	.+142    	; 0x1d4 <SetSamplefrequency+0xa2>
	{

		float ratio = (float)Samplefrequency / (float)NewSamplefrequency;
     146:	60 91 ad 00 	lds	r22, 0x00AD
     14a:	70 91 ae 00 	lds	r23, 0x00AE
     14e:	88 27       	eor	r24, r24
     150:	77 fd       	sbrc	r23, 7
     152:	80 95       	com	r24
     154:	98 2f       	mov	r25, r24
     156:	08 d7       	rcall	.+3600   	; 0xf68 <__floatsisf>
     158:	6b 01       	movw	r12, r22
     15a:	7c 01       	movw	r14, r24
     15c:	be 01       	movw	r22, r28
     15e:	80 e0       	ldi	r24, 0x00	; 0
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	00 d7       	rcall	.+3584   	; 0xf64 <__floatunsisf>
     164:	9b 01       	movw	r18, r22
     166:	ac 01       	movw	r20, r24
     168:	c7 01       	movw	r24, r14
     16a:	b6 01       	movw	r22, r12
     16c:	62 d6       	rcall	.+3268   	; 0xe32 <__divsf3>
     16e:	c6 2e       	mov	r12, r22
     170:	d7 2e       	mov	r13, r23
     172:	e8 2e       	mov	r14, r24
     174:	f9 2e       	mov	r15, r25
		ki *= ratio;
     176:	76 2f       	mov	r23, r22
     178:	27 2f       	mov	r18, r23
     17a:	3d 2d       	mov	r19, r13
     17c:	4e 2d       	mov	r20, r14
     17e:	5f 2d       	mov	r21, r15
     180:	60 91 b3 00 	lds	r22, 0x00B3
     184:	70 91 b4 00 	lds	r23, 0x00B4
     188:	80 91 b5 00 	lds	r24, 0x00B5
     18c:	90 91 b6 00 	lds	r25, 0x00B6
     190:	9f d7       	rcall	.+3902   	; 0x10d0 <__mulsf3>
     192:	60 93 b3 00 	sts	0x00B3, r22
     196:	70 93 b4 00 	sts	0x00B4, r23
     19a:	80 93 b5 00 	sts	0x00B5, r24
     19e:	90 93 b6 00 	sts	0x00B6, r25
		kd /= ratio;
     1a2:	2c 2d       	mov	r18, r12
     1a4:	3d 2d       	mov	r19, r13
     1a6:	4e 2d       	mov	r20, r14
     1a8:	5f 2d       	mov	r21, r15
     1aa:	60 91 90 00 	lds	r22, 0x0090
     1ae:	70 91 91 00 	lds	r23, 0x0091
     1b2:	80 91 92 00 	lds	r24, 0x0092
     1b6:	90 91 93 00 	lds	r25, 0x0093
     1ba:	3b d6       	rcall	.+3190   	; 0xe32 <__divsf3>
     1bc:	60 93 90 00 	sts	0x0090, r22
     1c0:	70 93 91 00 	sts	0x0091, r23
     1c4:	80 93 92 00 	sts	0x0092, r24
     1c8:	90 93 93 00 	sts	0x0093, r25
		Samplefrequency = NewSamplefrequency;
     1cc:	d0 93 ae 00 	sts	0x00AE, r29
     1d0:	c0 93 ad 00 	sts	0x00AD, r28
	}
}
     1d4:	df 91       	pop	r29
     1d6:	cf 91       	pop	r28
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	df 90       	pop	r13
     1de:	cf 90       	pop	r12
     1e0:	08 95       	ret

000001e2 <SetTargetPoint>:

void SetTargetPoint(int target,char direction)
{
     1e2:	cf 93       	push	r28
     1e4:	c6 2f       	mov	r28, r22
	Setpoint = target;
     1e6:	bc 01       	movw	r22, r24
     1e8:	88 27       	eor	r24, r24
     1ea:	77 fd       	sbrc	r23, 7
     1ec:	80 95       	com	r24
     1ee:	98 2f       	mov	r25, r24
     1f0:	bb d6       	rcall	.+3446   	; 0xf68 <__floatsisf>
     1f2:	60 93 9c 00 	sts	0x009C, r22
     1f6:	70 93 9d 00 	sts	0x009D, r23
     1fa:	80 93 9e 00 	sts	0x009E, r24
     1fe:	90 93 9f 00 	sts	0x009F, r25
	if(direction !=controlDirection)
     202:	80 91 87 00 	lds	r24, 0x0087
     206:	c8 17       	cp	r28, r24
     208:	e1 f1       	breq	.+120    	; 0x282 <SetTargetPoint+0xa0>
	{
		kp = (0 - kp);
     20a:	20 91 c1 00 	lds	r18, 0x00C1
     20e:	30 91 c2 00 	lds	r19, 0x00C2
     212:	40 91 c3 00 	lds	r20, 0x00C3
     216:	50 91 c4 00 	lds	r21, 0x00C4
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	cb 01       	movw	r24, r22
     220:	9f d5       	rcall	.+2878   	; 0xd60 <__subsf3>
     222:	60 93 c1 00 	sts	0x00C1, r22
     226:	70 93 c2 00 	sts	0x00C2, r23
     22a:	80 93 c3 00 	sts	0x00C3, r24
     22e:	90 93 c4 00 	sts	0x00C4, r25
		ki = (0 - ki);
     232:	20 91 b3 00 	lds	r18, 0x00B3
     236:	30 91 b4 00 	lds	r19, 0x00B4
     23a:	40 91 b5 00 	lds	r20, 0x00B5
     23e:	50 91 b6 00 	lds	r21, 0x00B6
     242:	60 e0       	ldi	r22, 0x00	; 0
     244:	70 e0       	ldi	r23, 0x00	; 0
     246:	cb 01       	movw	r24, r22
     248:	8b d5       	rcall	.+2838   	; 0xd60 <__subsf3>
     24a:	60 93 b3 00 	sts	0x00B3, r22
     24e:	70 93 b4 00 	sts	0x00B4, r23
     252:	80 93 b5 00 	sts	0x00B5, r24
     256:	90 93 b6 00 	sts	0x00B6, r25
		kd = (0 - kd);
     25a:	20 91 90 00 	lds	r18, 0x0090
     25e:	30 91 91 00 	lds	r19, 0x0091
     262:	40 91 92 00 	lds	r20, 0x0092
     266:	50 91 93 00 	lds	r21, 0x0093
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	cb 01       	movw	r24, r22
     270:	77 d5       	rcall	.+2798   	; 0xd60 <__subsf3>
     272:	60 93 90 00 	sts	0x0090, r22
     276:	70 93 91 00 	sts	0x0091, r23
     27a:	80 93 92 00 	sts	0x0092, r24
     27e:	90 93 93 00 	sts	0x0093, r25
	}
	controlDirection = direction;
     282:	c0 93 87 00 	sts	0x0087, r28
}
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <SetTuningConstants>:

void SetTuningConstants(float p, float i, float d)
{
     28a:	4f 92       	push	r4
     28c:	5f 92       	push	r5
     28e:	6f 92       	push	r6
     290:	7f 92       	push	r7
     292:	8f 92       	push	r8
     294:	9f 92       	push	r9
     296:	af 92       	push	r10
     298:	bf 92       	push	r11
     29a:	cf 92       	push	r12
     29c:	df 92       	push	r13
     29e:	ef 92       	push	r14
     2a0:	ff 92       	push	r15
     2a2:	0f 93       	push	r16
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	4b 01       	movw	r8, r22
     2ac:	5c 01       	movw	r10, r24
     2ae:	29 01       	movw	r4, r18
     2b0:	3a 01       	movw	r6, r20
     2b2:	67 01       	movw	r12, r14
     2b4:	78 01       	movw	r14, r16
	if (p<0 || i<0 || d<0) return;
     2b6:	20 e0       	ldi	r18, 0x00	; 0
     2b8:	30 e0       	ldi	r19, 0x00	; 0
     2ba:	a9 01       	movw	r20, r18
     2bc:	b6 d5       	rcall	.+2924   	; 0xe2a <__cmpsf2>
     2be:	88 23       	and	r24, r24
     2c0:	0c f4       	brge	.+2      	; 0x2c4 <SetTuningConstants+0x3a>
     2c2:	90 c0       	rjmp	.+288    	; 0x3e4 <SetTuningConstants+0x15a>
     2c4:	20 e0       	ldi	r18, 0x00	; 0
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	a9 01       	movw	r20, r18
     2ca:	c3 01       	movw	r24, r6
     2cc:	b2 01       	movw	r22, r4
     2ce:	ad d5       	rcall	.+2906   	; 0xe2a <__cmpsf2>
     2d0:	88 23       	and	r24, r24
     2d2:	0c f4       	brge	.+2      	; 0x2d6 <SetTuningConstants+0x4c>
     2d4:	87 c0       	rjmp	.+270    	; 0x3e4 <SetTuningConstants+0x15a>
     2d6:	20 e0       	ldi	r18, 0x00	; 0
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	a9 01       	movw	r20, r18
     2dc:	c7 01       	movw	r24, r14
     2de:	b6 01       	movw	r22, r12
     2e0:	a4 d5       	rcall	.+2888   	; 0xe2a <__cmpsf2>
     2e2:	88 23       	and	r24, r24
     2e4:	0c f4       	brge	.+2      	; 0x2e8 <SetTuningConstants+0x5e>
     2e6:	7e c0       	rjmp	.+252    	; 0x3e4 <SetTuningConstants+0x15a>

	//float SampleTimeInSec = ((float)Sampletime_milli/1000);
	float SampleTimeInSec = 1/(float)Samplefrequency;
     2e8:	60 91 ad 00 	lds	r22, 0x00AD
     2ec:	70 91 ae 00 	lds	r23, 0x00AE
     2f0:	88 27       	eor	r24, r24
     2f2:	77 fd       	sbrc	r23, 7
     2f4:	80 95       	com	r24
     2f6:	98 2f       	mov	r25, r24
     2f8:	37 d6       	rcall	.+3182   	; 0xf68 <__floatsisf>
     2fa:	9b 01       	movw	r18, r22
     2fc:	ac 01       	movw	r20, r24
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	80 e8       	ldi	r24, 0x80	; 128
     304:	9f e3       	ldi	r25, 0x3F	; 63
     306:	95 d5       	rcall	.+2858   	; 0xe32 <__divsf3>
     308:	06 2f       	mov	r16, r22
     30a:	17 2f       	mov	r17, r23
     30c:	d8 2f       	mov	r29, r24
     30e:	c9 2f       	mov	r28, r25
	kp = p;
     310:	80 92 c1 00 	sts	0x00C1, r8
     314:	90 92 c2 00 	sts	0x00C2, r9
     318:	a0 92 c3 00 	sts	0x00C3, r10
     31c:	b0 92 c4 00 	sts	0x00C4, r11
	ki = i * SampleTimeInSec;
     320:	76 2f       	mov	r23, r22
     322:	27 2f       	mov	r18, r23
     324:	31 2f       	mov	r19, r17
     326:	4d 2f       	mov	r20, r29
     328:	5c 2f       	mov	r21, r28
     32a:	c3 01       	movw	r24, r6
     32c:	b2 01       	movw	r22, r4
     32e:	d0 d6       	rcall	.+3488   	; 0x10d0 <__mulsf3>
     330:	46 2e       	mov	r4, r22
     332:	57 2e       	mov	r5, r23
     334:	68 2e       	mov	r6, r24
     336:	79 2e       	mov	r7, r25
     338:	86 2f       	mov	r24, r22
     33a:	95 2d       	mov	r25, r5
     33c:	a6 2d       	mov	r26, r6
     33e:	b7 2d       	mov	r27, r7
     340:	80 93 b3 00 	sts	0x00B3, r24
     344:	90 93 b4 00 	sts	0x00B4, r25
     348:	a0 93 b5 00 	sts	0x00B5, r26
     34c:	b0 93 b6 00 	sts	0x00B6, r27
	kd = d / SampleTimeInSec;
     350:	20 2f       	mov	r18, r16
     352:	31 2f       	mov	r19, r17
     354:	4d 2f       	mov	r20, r29
     356:	5c 2f       	mov	r21, r28
     358:	c7 01       	movw	r24, r14
     35a:	b6 01       	movw	r22, r12
     35c:	6a d5       	rcall	.+2772   	; 0xe32 <__divsf3>
     35e:	06 2f       	mov	r16, r22
     360:	17 2f       	mov	r17, r23
     362:	d8 2f       	mov	r29, r24
     364:	c9 2f       	mov	r28, r25
     366:	98 2f       	mov	r25, r24
     368:	40 2f       	mov	r20, r16
     36a:	51 2f       	mov	r21, r17
     36c:	69 2f       	mov	r22, r25
     36e:	7c 2f       	mov	r23, r28
     370:	40 93 90 00 	sts	0x0090, r20
     374:	50 93 91 00 	sts	0x0091, r21
     378:	60 93 92 00 	sts	0x0092, r22
     37c:	70 93 93 00 	sts	0x0093, r23

	if(controlDirection == FALSE)         //false for reverse direction and true for direct or positive case
     380:	80 91 87 00 	lds	r24, 0x0087
     384:	81 11       	cpse	r24, r1
     386:	2e c0       	rjmp	.+92     	; 0x3e4 <SetTuningConstants+0x15a>
	{
		kp = (0 - kp);
     388:	a5 01       	movw	r20, r10
     38a:	94 01       	movw	r18, r8
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	cb 01       	movw	r24, r22
     392:	e6 d4       	rcall	.+2508   	; 0xd60 <__subsf3>
     394:	60 93 c1 00 	sts	0x00C1, r22
     398:	70 93 c2 00 	sts	0x00C2, r23
     39c:	80 93 c3 00 	sts	0x00C3, r24
     3a0:	90 93 c4 00 	sts	0x00C4, r25
		ki = (0 - ki);
     3a4:	24 2d       	mov	r18, r4
     3a6:	35 2d       	mov	r19, r5
     3a8:	46 2d       	mov	r20, r6
     3aa:	57 2d       	mov	r21, r7
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	cb 01       	movw	r24, r22
     3b2:	d6 d4       	rcall	.+2476   	; 0xd60 <__subsf3>
     3b4:	60 93 b3 00 	sts	0x00B3, r22
     3b8:	70 93 b4 00 	sts	0x00B4, r23
     3bc:	80 93 b5 00 	sts	0x00B5, r24
     3c0:	90 93 b6 00 	sts	0x00B6, r25
		kd = (0 - kd);
     3c4:	20 2f       	mov	r18, r16
     3c6:	31 2f       	mov	r19, r17
     3c8:	4d 2f       	mov	r20, r29
     3ca:	5c 2f       	mov	r21, r28
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	cb 01       	movw	r24, r22
     3d2:	c6 d4       	rcall	.+2444   	; 0xd60 <__subsf3>
     3d4:	60 93 90 00 	sts	0x0090, r22
     3d8:	70 93 91 00 	sts	0x0091, r23
     3dc:	80 93 92 00 	sts	0x0092, r24
     3e0:	90 93 93 00 	sts	0x0093, r25
	}
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	ff 90       	pop	r15
     3ee:	ef 90       	pop	r14
     3f0:	df 90       	pop	r13
     3f2:	cf 90       	pop	r12
     3f4:	bf 90       	pop	r11
     3f6:	af 90       	pop	r10
     3f8:	9f 90       	pop	r9
     3fa:	8f 90       	pop	r8
     3fc:	7f 90       	pop	r7
     3fe:	6f 90       	pop	r6
     400:	5f 90       	pop	r5
     402:	4f 90       	pop	r4
     404:	08 95       	ret

00000406 <SetInput>:
void SetInput(float x)
{
	input=x;
     406:	60 93 a0 00 	sts	0x00A0, r22
     40a:	70 93 a1 00 	sts	0x00A1, r23
     40e:	80 93 a2 00 	sts	0x00A2, r24
     412:	90 93 a3 00 	sts	0x00A3, r25
     416:	08 95       	ret

00000418 <constrain>:
	return (int)totalerror;
}


void constrain(float *value,int minvalue,int maxvalue)
{
     418:	cf 92       	push	r12
     41a:	df 92       	push	r13
     41c:	ef 92       	push	r14
     41e:	ff 92       	push	r15
     420:	0f 93       	push	r16
     422:	1f 93       	push	r17
     424:	cf 93       	push	r28
     426:	df 93       	push	r29
     428:	ec 01       	movw	r28, r24
     42a:	8b 01       	movw	r16, r22
	if(*value>maxvalue)
     42c:	ba 01       	movw	r22, r20
     42e:	88 27       	eor	r24, r24
     430:	77 fd       	sbrc	r23, 7
     432:	80 95       	com	r24
     434:	98 2f       	mov	r25, r24
     436:	98 d5       	rcall	.+2864   	; 0xf68 <__floatsisf>
     438:	6b 01       	movw	r12, r22
     43a:	7c 01       	movw	r14, r24
     43c:	9b 01       	movw	r18, r22
     43e:	ac 01       	movw	r20, r24
     440:	68 81       	ld	r22, Y
     442:	79 81       	ldd	r23, Y+1	; 0x01
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	9b 81       	ldd	r25, Y+3	; 0x03
     448:	3f d6       	rcall	.+3198   	; 0x10c8 <__gesf2>
     44a:	18 16       	cp	r1, r24
     44c:	24 f4       	brge	.+8      	; 0x456 <constrain+0x3e>
	{
		*value=maxvalue;
     44e:	c8 82       	st	Y, r12
     450:	d9 82       	std	Y+1, r13	; 0x01
     452:	ea 82       	std	Y+2, r14	; 0x02
     454:	fb 82       	std	Y+3, r15	; 0x03
	}
	if(*value<minvalue)
     456:	b8 01       	movw	r22, r16
     458:	88 27       	eor	r24, r24
     45a:	77 fd       	sbrc	r23, 7
     45c:	80 95       	com	r24
     45e:	98 2f       	mov	r25, r24
     460:	83 d5       	rcall	.+2822   	; 0xf68 <__floatsisf>
     462:	6b 01       	movw	r12, r22
     464:	7c 01       	movw	r14, r24
     466:	9b 01       	movw	r18, r22
     468:	ac 01       	movw	r20, r24
     46a:	68 81       	ld	r22, Y
     46c:	79 81       	ldd	r23, Y+1	; 0x01
     46e:	8a 81       	ldd	r24, Y+2	; 0x02
     470:	9b 81       	ldd	r25, Y+3	; 0x03
     472:	db d4       	rcall	.+2486   	; 0xe2a <__cmpsf2>
     474:	88 23       	and	r24, r24
     476:	24 f4       	brge	.+8      	; 0x480 <__stack+0x21>
	{
		*value=minvalue;
     478:	c8 82       	st	Y, r12
     47a:	d9 82       	std	Y+1, r13	; 0x01
     47c:	ea 82       	std	Y+2, r14	; 0x02
     47e:	fb 82       	std	Y+3, r15	; 0x03
	}
     480:	df 91       	pop	r29
     482:	cf 91       	pop	r28
     484:	1f 91       	pop	r17
     486:	0f 91       	pop	r16
     488:	ff 90       	pop	r15
     48a:	ef 90       	pop	r14
     48c:	df 90       	pop	r13
     48e:	cf 90       	pop	r12
     490:	08 95       	ret

00000492 <CalculatePID>:
void SetInput(float x)
{
	input=x;
}
void CalculatePID()
{
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
	error = Setpoint - input;
     49a:	20 91 a0 00 	lds	r18, 0x00A0
     49e:	30 91 a1 00 	lds	r19, 0x00A1
     4a2:	40 91 a2 00 	lds	r20, 0x00A2
     4a6:	50 91 a3 00 	lds	r21, 0x00A3
     4aa:	60 91 9c 00 	lds	r22, 0x009C
     4ae:	70 91 9d 00 	lds	r23, 0x009D
     4b2:	80 91 9e 00 	lds	r24, 0x009E
     4b6:	90 91 9f 00 	lds	r25, 0x009F
     4ba:	52 d4       	rcall	.+2212   	; 0xd60 <__subsf3>
     4bc:	06 2f       	mov	r16, r22
     4be:	17 2f       	mov	r17, r23
     4c0:	d8 2f       	mov	r29, r24
     4c2:	c9 2f       	mov	r28, r25
     4c4:	98 2f       	mov	r25, r24
     4c6:	40 2f       	mov	r20, r16
     4c8:	51 2f       	mov	r21, r17
     4ca:	69 2f       	mov	r22, r25
     4cc:	7c 2f       	mov	r23, r28
     4ce:	40 93 b7 00 	sts	0x00B7, r20
     4d2:	50 93 b8 00 	sts	0x00B8, r21
     4d6:	60 93 b9 00 	sts	0x00B9, r22
     4da:	70 93 ba 00 	sts	0x00BA, r23
	Proportional= kp*error;
     4de:	20 91 c1 00 	lds	r18, 0x00C1
     4e2:	30 91 c2 00 	lds	r19, 0x00C2
     4e6:	40 91 c3 00 	lds	r20, 0x00C3
     4ea:	50 91 c4 00 	lds	r21, 0x00C4
     4ee:	60 2f       	mov	r22, r16
     4f0:	71 2f       	mov	r23, r17
     4f2:	8d 2f       	mov	r24, r29
     4f4:	9c 2f       	mov	r25, r28
     4f6:	ec d5       	rcall	.+3032   	; 0x10d0 <__mulsf3>
     4f8:	60 93 8c 00 	sts	0x008C, r22
     4fc:	70 93 8d 00 	sts	0x008D, r23
     500:	80 93 8e 00 	sts	0x008E, r24
     504:	90 93 8f 00 	sts	0x008F, r25
	Integral += (ki *error);
     508:	20 91 b3 00 	lds	r18, 0x00B3
     50c:	30 91 b4 00 	lds	r19, 0x00B4
     510:	40 91 b5 00 	lds	r20, 0x00B5
     514:	50 91 b6 00 	lds	r21, 0x00B6
     518:	60 2f       	mov	r22, r16
     51a:	71 2f       	mov	r23, r17
     51c:	8d 2f       	mov	r24, r29
     51e:	9c 2f       	mov	r25, r28
     520:	d7 d5       	rcall	.+2990   	; 0x10d0 <__mulsf3>
     522:	9b 01       	movw	r18, r22
     524:	ac 01       	movw	r20, r24
     526:	60 91 bb 00 	lds	r22, 0x00BB
     52a:	70 91 bc 00 	lds	r23, 0x00BC
     52e:	80 91 bd 00 	lds	r24, 0x00BD
     532:	90 91 be 00 	lds	r25, 0x00BE
     536:	15 d4       	rcall	.+2090   	; 0xd62 <__addsf3>
     538:	60 93 bb 00 	sts	0x00BB, r22
     53c:	70 93 bc 00 	sts	0x00BC, r23
     540:	80 93 bd 00 	sts	0x00BD, r24
     544:	90 93 be 00 	sts	0x00BE, r25
	if(limitintegral==TRUE)
     548:	80 91 a8 00 	lds	r24, 0x00A8
     54c:	81 30       	cpi	r24, 0x01	; 1
     54e:	59 f4       	brne	.+22     	; 0x566 <CalculatePID+0xd4>
	{
		constrain(&Integral,Integralmin,Integralmax);
     550:	40 91 bf 00 	lds	r20, 0x00BF
     554:	50 91 c0 00 	lds	r21, 0x00C0
     558:	60 91 af 00 	lds	r22, 0x00AF
     55c:	70 91 b0 00 	lds	r23, 0x00B0
     560:	8b eb       	ldi	r24, 0xBB	; 187
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	59 df       	rcall	.-334    	; 0x418 <constrain>
	}
	Derivative= kd*(error-lasterror);        //Test both of these
     566:	20 91 a9 00 	lds	r18, 0x00A9
     56a:	30 91 aa 00 	lds	r19, 0x00AA
     56e:	40 91 ab 00 	lds	r20, 0x00AB
     572:	50 91 ac 00 	lds	r21, 0x00AC
     576:	60 91 b7 00 	lds	r22, 0x00B7
     57a:	70 91 b8 00 	lds	r23, 0x00B8
     57e:	80 91 b9 00 	lds	r24, 0x00B9
     582:	90 91 ba 00 	lds	r25, 0x00BA
     586:	ec d3       	rcall	.+2008   	; 0xd60 <__subsf3>
     588:	20 91 90 00 	lds	r18, 0x0090
     58c:	30 91 91 00 	lds	r19, 0x0091
     590:	40 91 92 00 	lds	r20, 0x0092
     594:	50 91 93 00 	lds	r21, 0x0093
     598:	9b d5       	rcall	.+2870   	; 0x10d0 <__mulsf3>
     59a:	06 2f       	mov	r16, r22
     59c:	17 2f       	mov	r17, r23
     59e:	d8 2f       	mov	r29, r24
     5a0:	c9 2f       	mov	r28, r25
     5a2:	98 2f       	mov	r25, r24
     5a4:	40 2f       	mov	r20, r16
     5a6:	51 2f       	mov	r21, r17
     5a8:	69 2f       	mov	r22, r25
     5aa:	7c 2f       	mov	r23, r28
     5ac:	40 93 94 00 	sts	0x0094, r20
     5b0:	50 93 95 00 	sts	0x0095, r21
     5b4:	60 93 96 00 	sts	0x0096, r22
     5b8:	70 93 97 00 	sts	0x0097, r23
	//Derivative= -kd*(input-lastinput);
	totalerror= Proportional+Integral+Derivative;
     5bc:	20 91 bb 00 	lds	r18, 0x00BB
     5c0:	30 91 bc 00 	lds	r19, 0x00BC
     5c4:	40 91 bd 00 	lds	r20, 0x00BD
     5c8:	50 91 be 00 	lds	r21, 0x00BE
     5cc:	60 91 8c 00 	lds	r22, 0x008C
     5d0:	70 91 8d 00 	lds	r23, 0x008D
     5d4:	80 91 8e 00 	lds	r24, 0x008E
     5d8:	90 91 8f 00 	lds	r25, 0x008F
     5dc:	c2 d3       	rcall	.+1924   	; 0xd62 <__addsf3>
     5de:	9b 01       	movw	r18, r22
     5e0:	ac 01       	movw	r20, r24
     5e2:	60 2f       	mov	r22, r16
     5e4:	71 2f       	mov	r23, r17
     5e6:	8d 2f       	mov	r24, r29
     5e8:	9c 2f       	mov	r25, r28
     5ea:	bb d3       	rcall	.+1910   	; 0xd62 <__addsf3>
     5ec:	60 93 a4 00 	sts	0x00A4, r22
     5f0:	70 93 a5 00 	sts	0x00A5, r23
     5f4:	80 93 a6 00 	sts	0x00A6, r24
     5f8:	90 93 a7 00 	sts	0x00A7, r25
	constrain(&totalerror,outMin,outMax);
     5fc:	40 91 98 00 	lds	r20, 0x0098
     600:	50 91 99 00 	lds	r21, 0x0099
     604:	60 91 9a 00 	lds	r22, 0x009A
     608:	70 91 9b 00 	lds	r23, 0x009B
     60c:	84 ea       	ldi	r24, 0xA4	; 164
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	03 df       	rcall	.-506    	; 0x418 <constrain>
	
	lasterror= error;
     612:	80 91 b7 00 	lds	r24, 0x00B7
     616:	90 91 b8 00 	lds	r25, 0x00B8
     61a:	a0 91 b9 00 	lds	r26, 0x00B9
     61e:	b0 91 ba 00 	lds	r27, 0x00BA
     622:	80 93 a9 00 	sts	0x00A9, r24
     626:	90 93 aa 00 	sts	0x00AA, r25
     62a:	a0 93 ab 00 	sts	0x00AB, r26
     62e:	b0 93 ac 00 	sts	0x00AC, r27
	//lastinput=input;

}
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <lcd_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     63c:	95 ed       	ldi	r25, 0xD5	; 213
     63e:	9a 95       	dec	r25
     640:	f1 f7       	brne	.-4      	; 0x63e <lcd_write+0x2>
     642:	00 00       	nop

static void lcd_write(uint8_t c)
{
	_delay_us(40);
	//MS nibble
	if(c & 0x80)
     644:	88 23       	and	r24, r24
     646:	14 f4       	brge	.+4      	; 0x64c <lcd_write+0x10>
		LCD_D7_PORT |=  (1 << LCD_D7_PIN);
     648:	ad 9a       	sbi	0x15, 5	; 21
     64a:	01 c0       	rjmp	.+2      	; 0x64e <lcd_write+0x12>
	else
		LCD_D7_PORT &= ~(1 << LCD_D7_PIN);
     64c:	ad 98       	cbi	0x15, 5	; 21
	
	if(c & 0x40)
     64e:	86 ff       	sbrs	r24, 6
     650:	02 c0       	rjmp	.+4      	; 0x656 <lcd_write+0x1a>
		LCD_D6_PORT |=  (1 << LCD_D6_PIN);
     652:	ac 9a       	sbi	0x15, 4	; 21
     654:	01 c0       	rjmp	.+2      	; 0x658 <lcd_write+0x1c>
	else
		LCD_D6_PORT &= ~(1 << LCD_D6_PIN);
     656:	ac 98       	cbi	0x15, 4	; 21
	
	if(c & 0x20)
     658:	85 ff       	sbrs	r24, 5
     65a:	02 c0       	rjmp	.+4      	; 0x660 <lcd_write+0x24>
		LCD_D5_PORT |=  (1 << LCD_D5_PIN);
     65c:	ab 9a       	sbi	0x15, 3	; 21
     65e:	01 c0       	rjmp	.+2      	; 0x662 <lcd_write+0x26>
	else
		LCD_D5_PORT &= ~(1 << LCD_D5_PIN);
     660:	ab 98       	cbi	0x15, 3	; 21
		
	if(c & 0x10)
     662:	84 ff       	sbrs	r24, 4
     664:	02 c0       	rjmp	.+4      	; 0x66a <lcd_write+0x2e>
		LCD_D4_PORT |=  (1 << LCD_D4_PIN);
     666:	aa 9a       	sbi	0x15, 2	; 21
     668:	01 c0       	rjmp	.+2      	; 0x66c <lcd_write+0x30>
	else
		LCD_D4_PORT &= ~(1 << LCD_D4_PIN);
     66a:	aa 98       	cbi	0x15, 2	; 21
	
	LCD_STROBE();
     66c:	a9 9a       	sbi	0x15, 1	; 21
     66e:	a9 98       	cbi	0x15, 1	; 21
	
	//LS nibble
	if(c & 0x08)
     670:	83 ff       	sbrs	r24, 3
     672:	02 c0       	rjmp	.+4      	; 0x678 <lcd_write+0x3c>
		LCD_D7_PORT |=  (1 << LCD_D7_PIN);
     674:	ad 9a       	sbi	0x15, 5	; 21
     676:	01 c0       	rjmp	.+2      	; 0x67a <lcd_write+0x3e>
	else
		LCD_D7_PORT &= ~(1 << LCD_D7_PIN);
     678:	ad 98       	cbi	0x15, 5	; 21
		
	if(c & 0x04)
     67a:	82 ff       	sbrs	r24, 2
     67c:	02 c0       	rjmp	.+4      	; 0x682 <lcd_write+0x46>
		LCD_D6_PORT |=  (1 << LCD_D6_PIN);
     67e:	ac 9a       	sbi	0x15, 4	; 21
     680:	01 c0       	rjmp	.+2      	; 0x684 <lcd_write+0x48>
	else
		LCD_D6_PORT &= ~(1 << LCD_D6_PIN);
     682:	ac 98       	cbi	0x15, 4	; 21
		
	if(c & 0x02)
     684:	81 ff       	sbrs	r24, 1
     686:	02 c0       	rjmp	.+4      	; 0x68c <lcd_write+0x50>
		LCD_D5_PORT |=  (1 << LCD_D5_PIN);
     688:	ab 9a       	sbi	0x15, 3	; 21
     68a:	01 c0       	rjmp	.+2      	; 0x68e <lcd_write+0x52>
	else
		LCD_D5_PORT &= ~(1 << LCD_D5_PIN);
     68c:	ab 98       	cbi	0x15, 3	; 21
		
	if(c & 0x01)
     68e:	80 ff       	sbrs	r24, 0
     690:	02 c0       	rjmp	.+4      	; 0x696 <lcd_write+0x5a>
		LCD_D4_PORT |=  (1 << LCD_D4_PIN);
     692:	aa 9a       	sbi	0x15, 2	; 21
     694:	01 c0       	rjmp	.+2      	; 0x698 <lcd_write+0x5c>
	else
		LCD_D4_PORT &= ~(1 << LCD_D4_PIN);
     696:	aa 98       	cbi	0x15, 2	; 21
	
	LCD_STROBE();
     698:	a9 9a       	sbi	0x15, 1	; 21
     69a:	a9 98       	cbi	0x15, 1	; 21
     69c:	08 95       	ret

0000069e <lcd_clear>:
 * 	Clear and home the LCD
 */

void lcd_clear(void)
{
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
     69e:	a8 98       	cbi	0x15, 0	; 21
	lcd_write(1<<LCD_CLR);
     6a0:	81 e0       	ldi	r24, 0x01	; 1
     6a2:	cc df       	rcall	.-104    	; 0x63c <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6a4:	8f e3       	ldi	r24, 0x3F	; 63
     6a6:	9f e1       	ldi	r25, 0x1F	; 31
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	f1 f7       	brne	.-4      	; 0x6a8 <lcd_clear+0xa>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <lcd_clear+0x10>
     6ae:	00 00       	nop
     6b0:	08 95       	ret

000006b2 <lcd_puts>:
}

/* write a string of chars to the LCD */

void lcd_puts(const char * s)
{
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ec 01       	movw	r28, r24
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
     6b8:	a8 9a       	sbi	0x15, 0	; 21
	while(*s)
     6ba:	88 81       	ld	r24, Y
     6bc:	88 23       	and	r24, r24
     6be:	29 f0       	breq	.+10     	; 0x6ca <lcd_puts+0x18>
	_delay_ms(2);
}

/* write a string of chars to the LCD */

void lcd_puts(const char * s)
     6c0:	21 96       	adiw	r28, 0x01	; 1
{
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
	while(*s)
		lcd_write(*s++);
     6c2:	bc df       	rcall	.-136    	; 0x63c <lcd_write>
/* write a string of chars to the LCD */

void lcd_puts(const char * s)
{
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
	while(*s)
     6c4:	89 91       	ld	r24, Y+
     6c6:	81 11       	cpse	r24, r1
     6c8:	fc cf       	rjmp	.-8      	; 0x6c2 <lcd_puts+0x10>
		lcd_write(*s++);
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <lcd_putch>:
}
/* write one character to the LCD */

void lcd_putch(char c)
{
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
     6d0:	a8 9a       	sbi	0x15, 0	; 21
	lcd_write( c );
     6d2:	b4 df       	rcall	.-152    	; 0x63c <lcd_write>
     6d4:	08 95       	ret

000006d6 <lcd_goto>:
 * Go to the specified position
 */

void lcd_goto(unsigned char pos)
{
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
     6d6:	a8 98       	cbi	0x15, 0	; 21
	lcd_write(0x80|pos);
     6d8:	80 68       	ori	r24, 0x80	; 128
     6da:	b0 df       	rcall	.-160    	; 0x63c <lcd_write>
     6dc:	08 95       	ret

000006de <lcd_init>:
	


void lcd_init()
{
	DDR(LCD_RS_PORT) |= (1 << LCD_RS_PIN);
     6de:	a0 9a       	sbi	0x14, 0	; 20
	DDR(LCD_EN_PORT) |= (1 << LCD_EN_PIN);
     6e0:	a1 9a       	sbi	0x14, 1	; 20
	
	DDR(LCD_D7_PORT) |= (1 << LCD_D7_PIN);
     6e2:	a5 9a       	sbi	0x14, 5	; 20
	DDR(LCD_D6_PORT) |= (1 << LCD_D6_PIN);
     6e4:	a4 9a       	sbi	0x14, 4	; 20
	DDR(LCD_D5_PORT) |= (1 << LCD_D5_PIN);
     6e6:	a3 9a       	sbi	0x14, 3	; 20
	DDR(LCD_D4_PORT) |= (1 << LCD_D4_PIN);
     6e8:	a2 9a       	sbi	0x14, 2	; 20
	
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
     6ea:	a8 98       	cbi	0x15, 0	; 21
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);
     6ec:	a9 98       	cbi	0x15, 1	; 21
     6ee:	8f e5       	ldi	r24, 0x5F	; 95
     6f0:	9a ee       	ldi	r25, 0xEA	; 234
     6f2:	01 97       	sbiw	r24, 0x01	; 1
     6f4:	f1 f7       	brne	.-4      	; 0x6f2 <lcd_init+0x14>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <lcd_init+0x1a>
     6f8:	00 00       	nop
	
	_delay_ms(15);	// wait 15mSec after power applied,

	LCD_D4_PORT |= (1 << LCD_D4_PIN);//0x3 & 0x01;				//bit0 000X
     6fa:	aa 9a       	sbi	0x15, 2	; 21
	LCD_D5_PORT |= (1 << LCD_D5_PIN);//(0x3>>1) & 0x01;		//bit1 00XY -> 000X
     6fc:	ab 9a       	sbi	0x15, 3	; 21
	LCD_D6_PORT &= ~(1 << LCD_D6_PIN);//(0x3>>2) & 0x01;		//bit2 0XYZ -> 000X
     6fe:	ac 98       	cbi	0x15, 4	; 21
	LCD_D7_PORT &= ~(1 << LCD_D7_PIN);//(0x3>>3) & 0x01;		//bit3 XYZW -> 000X
     700:	ad 98       	cbi	0x15, 5	; 21
	
	LCD_STROBE();
     702:	a9 9a       	sbi	0x15, 1	; 21
     704:	a9 98       	cbi	0x15, 1	; 21
     706:	8f e1       	ldi	r24, 0x1F	; 31
     708:	9e e4       	ldi	r25, 0x4E	; 78
     70a:	01 97       	sbiw	r24, 0x01	; 1
     70c:	f1 f7       	brne	.-4      	; 0x70a <lcd_init+0x2c>
     70e:	00 c0       	rjmp	.+0      	; 0x710 <lcd_init+0x32>
     710:	00 00       	nop
	_delay_ms(5);
	LCD_STROBE();
     712:	a9 9a       	sbi	0x15, 1	; 21
     714:	a9 98       	cbi	0x15, 1	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	8f e1       	ldi	r24, 0x1F	; 31
     718:	93 e0       	ldi	r25, 0x03	; 3
     71a:	01 97       	sbiw	r24, 0x01	; 1
     71c:	f1 f7       	brne	.-4      	; 0x71a <lcd_init+0x3c>
     71e:	00 c0       	rjmp	.+0      	; 0x720 <lcd_init+0x42>
     720:	00 00       	nop
	_delay_us(200);
	LCD_STROBE();
     722:	a9 9a       	sbi	0x15, 1	; 21
     724:	a9 98       	cbi	0x15, 1	; 21
     726:	8f e1       	ldi	r24, 0x1F	; 31
     728:	93 e0       	ldi	r25, 0x03	; 3
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <lcd_init+0x4c>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <lcd_init+0x52>
     730:	00 00       	nop
	_delay_us(200);
	
	// Four bit mode 
	LCD_D4_PORT &= ~(1 << LCD_D4_PIN);	//2 & 0x01
     732:	aa 98       	cbi	0x15, 2	; 21
	LCD_D5_PORT |=  (1 << LCD_D5_PIN);	//(2>>1) & 0x01
     734:	ab 9a       	sbi	0x15, 3	; 21
	LCD_D6_PORT &= ~(1 << LCD_D6_PIN);	//(2>>2) & 0x01
     736:	ac 98       	cbi	0x15, 4	; 21
	LCD_D7_PORT &= ~(1 << LCD_D7_PIN);	//(2>>3) & 0x01
     738:	ad 98       	cbi	0x15, 5	; 21
	
	LCD_STROBE();
     73a:	a9 9a       	sbi	0x15, 1	; 21
     73c:	a9 98       	cbi	0x15, 1	; 21

	lcd_write(0x28);		// Set interface length: nibblemode, 2line, 5x7dot
     73e:	88 e2       	ldi	r24, 0x28	; 40
     740:	7d df       	rcall	.-262    	; 0x63c <lcd_write>
	lcd_write(0b00001100);	// Display On, Cursor Off, Cursor Blink off
     742:	8c e0       	ldi	r24, 0x0C	; 12
     744:	7b df       	rcall	.-266    	; 0x63c <lcd_write>
	lcd_clear();			// Clear screen
     746:	ab df       	rcall	.-170    	; 0x69e <lcd_clear>
	lcd_write(0x6);			// Set entry Mode : increment, displayShiftOff
     748:	86 e0       	ldi	r24, 0x06	; 6
     74a:	78 df       	rcall	.-272    	; 0x63c <lcd_write>
     74c:	08 95       	ret

0000074e <lcd_num>:
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));	
}	

void lcd_num( int num, int radix )
{
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	00 d0       	rcall	.+0      	; 0x754 <lcd_num+0x6>
     754:	00 d0       	rcall	.+0      	; 0x756 <lcd_num+0x8>
     756:	00 d0       	rcall	.+0      	; 0x758 <lcd_num+0xa>
     758:	cd b7       	in	r28, 0x3d	; 61
     75a:	de b7       	in	r29, 0x3e	; 62
     75c:	ab 01       	movw	r20, r22
	char str[6];
	itoa( num, str, radix );
     75e:	be 01       	movw	r22, r28
     760:	6f 5f       	subi	r22, 0xFF	; 255
     762:	7f 4f       	sbci	r23, 0xFF	; 255
     764:	18 d5       	rcall	.+2608   	; 0x1196 <itoa>
	lcd_puts( str );
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	a3 df       	rcall	.-186    	; 0x6b2 <lcd_puts>
}
     76c:	26 96       	adiw	r28, 0x06	; 6
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	08 95       	ret

0000077e <lcd_gotoxy>:

void lcd_gotoxy( unsigned char x, unsigned char y )
{
	lcd_goto( y*64+x );
     77e:	90 e4       	ldi	r25, 0x40	; 64
     780:	69 9f       	mul	r22, r25
     782:	80 0d       	add	r24, r0
     784:	11 24       	eor	r1, r1
     786:	a7 df       	rcall	.-178    	; 0x6d6 <lcd_goto>
     788:	08 95       	ret

0000078a <Printf>:
}

void Printf( char *fmt,... )
{
     78a:	4f 92       	push	r4
     78c:	5f 92       	push	r5
     78e:	6f 92       	push	r6
     790:	7f 92       	push	r7
     792:	af 92       	push	r10
     794:	bf 92       	push	r11
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	0f 93       	push	r16
     7a0:	1f 93       	push	r17
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
     7aa:	fe 01       	movw	r30, r28
     7ac:	71 96       	adiw	r30, 0x11	; 17
     7ae:	a1 91       	ld	r26, Z+
     7b0:	b1 91       	ld	r27, Z+
	va_list aptr;
	char *p, *sval;
	int ival;
	float fval;
	va_start( aptr, fmt );
     7b2:	6f 01       	movw	r12, r30
	
	for( p=fmt; *p ; ++p )
     7b4:	8c 91       	ld	r24, X
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <Printf+0x32>
     7ba:	ac c0       	rjmp	.+344    	; 0x914 <Printf+0x18a>
     7bc:	7d 01       	movw	r14, r26
	if( *p=='%' )
     7be:	85 32       	cpi	r24, 0x25	; 37
     7c0:	09 f0       	breq	.+2      	; 0x7c4 <Printf+0x3a>
     7c2:	91 c0       	rjmp	.+290    	; 0x8e6 <Printf+0x15c>
	switch( * ++p )
     7c4:	87 01       	movw	r16, r14
     7c6:	0f 5f       	subi	r16, 0xFF	; 255
     7c8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ca:	f7 01       	movw	r30, r14
     7cc:	81 81       	ldd	r24, Z+1	; 0x01
     7ce:	86 36       	cpi	r24, 0x66	; 102
     7d0:	09 f4       	brne	.+2      	; 0x7d4 <Printf+0x4a>
     7d2:	49 c0       	rjmp	.+146    	; 0x866 <Printf+0xdc>
     7d4:	30 f4       	brcc	.+12     	; 0x7e2 <Printf+0x58>
     7d6:	82 36       	cpi	r24, 0x62	; 98
     7d8:	61 f0       	breq	.+24     	; 0x7f2 <Printf+0x68>
     7da:	84 36       	cpi	r24, 0x64	; 100
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <Printf+0x56>
     7de:	81 c0       	rjmp	.+258    	; 0x8e2 <Printf+0x158>
     7e0:	20 c0       	rjmp	.+64     	; 0x822 <Printf+0x98>
     7e2:	83 37       	cpi	r24, 0x73	; 115
     7e4:	51 f1       	breq	.+84     	; 0x83a <Printf+0xb0>
     7e6:	88 37       	cpi	r24, 0x78	; 120
     7e8:	81 f0       	breq	.+32     	; 0x80a <Printf+0x80>
     7ea:	8f 36       	cpi	r24, 0x6F	; 111
     7ec:	09 f0       	breq	.+2      	; 0x7f0 <Printf+0x66>
     7ee:	79 c0       	rjmp	.+242    	; 0x8e2 <Printf+0x158>
     7f0:	6c c0       	rjmp	.+216    	; 0x8ca <Printf+0x140>
	{
		case 'b':
		ival = va_arg( aptr, int );
     7f2:	76 01       	movw	r14, r12
     7f4:	f2 e0       	ldi	r31, 0x02	; 2
     7f6:	ef 0e       	add	r14, r31
     7f8:	f1 1c       	adc	r15, r1
		lcd_num( ival, 2 );
     7fa:	62 e0       	ldi	r22, 0x02	; 2
     7fc:	70 e0       	ldi	r23, 0x00	; 0
     7fe:	f6 01       	movw	r30, r12
     800:	80 81       	ld	r24, Z
     802:	91 81       	ldd	r25, Z+1	; 0x01
     804:	a4 df       	rcall	.-184    	; 0x74e <lcd_num>
	for( p=fmt; *p ; ++p )
	if( *p=='%' )
	switch( * ++p )
	{
		case 'b':
		ival = va_arg( aptr, int );
     806:	67 01       	movw	r12, r14
		lcd_num( ival, 2 );
		break;
     808:	7d c0       	rjmp	.+250    	; 0x904 <Printf+0x17a>
		
		case 'x':
		ival = va_arg( aptr, int );
     80a:	76 01       	movw	r14, r12
     80c:	f2 e0       	ldi	r31, 0x02	; 2
     80e:	ef 0e       	add	r14, r31
     810:	f1 1c       	adc	r15, r1
		lcd_num( ival, 16 );
     812:	60 e1       	ldi	r22, 0x10	; 16
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	f6 01       	movw	r30, r12
     818:	80 81       	ld	r24, Z
     81a:	91 81       	ldd	r25, Z+1	; 0x01
     81c:	98 df       	rcall	.-208    	; 0x74e <lcd_num>
		ival = va_arg( aptr, int );
		lcd_num( ival, 2 );
		break;
		
		case 'x':
		ival = va_arg( aptr, int );
     81e:	67 01       	movw	r12, r14
		lcd_num( ival, 16 );
		break;
     820:	71 c0       	rjmp	.+226    	; 0x904 <Printf+0x17a>
		
		case 'd':
		ival = va_arg( aptr, int );
     822:	76 01       	movw	r14, r12
     824:	f2 e0       	ldi	r31, 0x02	; 2
     826:	ef 0e       	add	r14, r31
     828:	f1 1c       	adc	r15, r1
		lcd_num( ival, 10 );
     82a:	6a e0       	ldi	r22, 0x0A	; 10
     82c:	70 e0       	ldi	r23, 0x00	; 0
     82e:	f6 01       	movw	r30, r12
     830:	80 81       	ld	r24, Z
     832:	91 81       	ldd	r25, Z+1	; 0x01
     834:	8c df       	rcall	.-232    	; 0x74e <lcd_num>
		ival = va_arg( aptr, int );
		lcd_num( ival, 16 );
		break;
		
		case 'd':
		ival = va_arg( aptr, int );
     836:	67 01       	movw	r12, r14
		lcd_num( ival, 10 );
		break;
     838:	65 c0       	rjmp	.+202    	; 0x904 <Printf+0x17a>
		
		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
     83a:	f6 01       	movw	r30, r12
     83c:	82 e0       	ldi	r24, 0x02	; 2
     83e:	c8 0e       	add	r12, r24
     840:	d1 1c       	adc	r13, r1
     842:	01 90       	ld	r0, Z+
     844:	f0 81       	ld	r31, Z
     846:	e0 2d       	mov	r30, r0
     848:	80 81       	ld	r24, Z
     84a:	88 23       	and	r24, r24
     84c:	09 f4       	brne	.+2      	; 0x850 <Printf+0xc6>
     84e:	5a c0       	rjmp	.+180    	; 0x904 <Printf+0x17a>
void lcd_gotoxy( unsigned char x, unsigned char y )
{
	lcd_goto( y*64+x );
}

void Printf( char *fmt,... )
     850:	7f 01       	movw	r14, r30
     852:	9f ef       	ldi	r25, 0xFF	; 255
     854:	e9 1a       	sub	r14, r25
     856:	f9 0a       	sbc	r15, r25
		lcd_num( ival, 10 );
		break;
		
		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
		lcd_putch( *sval );
     858:	3b df       	rcall	.-394    	; 0x6d0 <lcd_putch>
		ival = va_arg( aptr, int );
		lcd_num( ival, 10 );
		break;
		
		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
     85a:	f7 01       	movw	r30, r14
     85c:	81 91       	ld	r24, Z+
     85e:	7f 01       	movw	r14, r30
     860:	81 11       	cpse	r24, r1
     862:	fa cf       	rjmp	.-12     	; 0x858 <Printf+0xce>
     864:	4f c0       	rjmp	.+158    	; 0x904 <Printf+0x17a>
		lcd_putch( *sval );
		break;
		
		case 'f':
		fval=va_arg( aptr, double ); 
     866:	56 01       	movw	r10, r12
     868:	f4 e0       	ldi	r31, 0x04	; 4
     86a:	af 0e       	add	r10, r31
     86c:	b1 1c       	adc	r11, r1
     86e:	f6 01       	movw	r30, r12
     870:	40 80       	ld	r4, Z
     872:	51 80       	ldd	r5, Z+1	; 0x01
     874:	62 80       	ldd	r6, Z+2	; 0x02
     876:	73 80       	ldd	r7, Z+3	; 0x03
		{
			int d,m;
			m=10000*(fval=fval-(d=fval));
     878:	c3 01       	movw	r24, r6
     87a:	b2 01       	movw	r22, r4
     87c:	42 d3       	rcall	.+1668   	; 0xf02 <__fixsfsi>
     87e:	6b 01       	movw	r12, r22
     880:	7c 01       	movw	r14, r24
     882:	88 27       	eor	r24, r24
     884:	77 fd       	sbrc	r23, 7
     886:	80 95       	com	r24
     888:	98 2f       	mov	r25, r24
     88a:	6e d3       	rcall	.+1756   	; 0xf68 <__floatsisf>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	c3 01       	movw	r24, r6
     892:	b2 01       	movw	r22, r4
     894:	65 d2       	rcall	.+1226   	; 0xd60 <__subsf3>
     896:	20 e0       	ldi	r18, 0x00	; 0
     898:	30 e4       	ldi	r19, 0x40	; 64
     89a:	4c e1       	ldi	r20, 0x1C	; 28
     89c:	56 e4       	ldi	r21, 0x46	; 70
     89e:	18 d4       	rcall	.+2096   	; 0x10d0 <__mulsf3>
     8a0:	30 d3       	rcall	.+1632   	; 0xf02 <__fixsfsi>
     8a2:	66 2e       	mov	r6, r22
     8a4:	77 2e       	mov	r7, r23
			if( m<0 )
			m*=-1;
			lcd_num( d, 10 );
     8a6:	6a e0       	ldi	r22, 0x0A	; 10
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	c6 01       	movw	r24, r12
     8ac:	50 df       	rcall	.-352    	; 0x74e <lcd_num>
			lcd_putch('.');
     8ae:	8e e2       	ldi	r24, 0x2E	; 46
     8b0:	0f df       	rcall	.-482    	; 0x6d0 <lcd_putch>
			lcd_num( m, 10 );
     8b2:	86 2d       	mov	r24, r6
     8b4:	97 2d       	mov	r25, r7
     8b6:	99 23       	and	r25, r25
     8b8:	1c f4       	brge	.+6      	; 0x8c0 <Printf+0x136>
     8ba:	91 95       	neg	r25
     8bc:	81 95       	neg	r24
     8be:	91 09       	sbc	r25, r1
     8c0:	6a e0       	ldi	r22, 0x0A	; 10
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	44 df       	rcall	.-376    	; 0x74e <lcd_num>
		for( sval=va_arg(aptr, char*); *sval; ++sval )
		lcd_putch( *sval );
		break;
		
		case 'f':
		fval=va_arg( aptr, double ); 
     8c6:	65 01       	movw	r12, r10
			m*=-1;
			lcd_num( d, 10 );
			lcd_putch('.');
			lcd_num( m, 10 );
		}
		break;
     8c8:	1d c0       	rjmp	.+58     	; 0x904 <Printf+0x17a>
		
		case 'o':
		ival = va_arg( aptr, int );
     8ca:	76 01       	movw	r14, r12
     8cc:	f2 e0       	ldi	r31, 0x02	; 2
     8ce:	ef 0e       	add	r14, r31
     8d0:	f1 1c       	adc	r15, r1
		lcd_num( ival, 8 );
     8d2:	68 e0       	ldi	r22, 0x08	; 8
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	f6 01       	movw	r30, r12
     8d8:	80 81       	ld	r24, Z
     8da:	91 81       	ldd	r25, Z+1	; 0x01
     8dc:	38 df       	rcall	.-400    	; 0x74e <lcd_num>
			lcd_num( m, 10 );
		}
		break;
		
		case 'o':
		ival = va_arg( aptr, int );
     8de:	67 01       	movw	r12, r14
		lcd_num( ival, 8 );
		break;
     8e0:	11 c0       	rjmp	.+34     	; 0x904 <Printf+0x17a>
		
		
		default:
		lcd_putch(*p);
     8e2:	f6 de       	rcall	.-532    	; 0x6d0 <lcd_putch>
     8e4:	0f c0       	rjmp	.+30     	; 0x904 <Printf+0x17a>
		
		
	}
	else if( *p=='\t' )
     8e6:	89 30       	cpi	r24, 0x09	; 9
     8e8:	21 f4       	brne	.+8      	; 0x8f2 <Printf+0x168>
	lcd_putch(' ');
     8ea:	80 e2       	ldi	r24, 0x20	; 32
     8ec:	f1 de       	rcall	.-542    	; 0x6d0 <lcd_putch>
     8ee:	87 01       	movw	r16, r14
     8f0:	09 c0       	rjmp	.+18     	; 0x904 <Printf+0x17a>
	else if( *p=='\n' )
     8f2:	8a 30       	cpi	r24, 0x0A	; 10
     8f4:	29 f4       	brne	.+10     	; 0x900 <Printf+0x176>
	lcd_gotoxy( 0,1 );		
     8f6:	61 e0       	ldi	r22, 0x01	; 1
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	41 df       	rcall	.-382    	; 0x77e <lcd_gotoxy>
     8fc:	87 01       	movw	r16, r14
     8fe:	02 c0       	rjmp	.+4      	; 0x904 <Printf+0x17a>
	else
	lcd_putch( *p );		
     900:	e7 de       	rcall	.-562    	; 0x6d0 <lcd_putch>
     902:	87 01       	movw	r16, r14
	char *p, *sval;
	int ival;
	float fval;
	va_start( aptr, fmt );
	
	for( p=fmt; *p ; ++p )
     904:	78 01       	movw	r14, r16
     906:	ff ef       	ldi	r31, 0xFF	; 255
     908:	ef 1a       	sub	r14, r31
     90a:	ff 0a       	sbc	r15, r31
     90c:	f8 01       	movw	r30, r16
     90e:	81 81       	ldd	r24, Z+1	; 0x01
     910:	81 11       	cpse	r24, r1
     912:	55 cf       	rjmp	.-342    	; 0x7be <Printf+0x34>
	lcd_putch(' ');
	else if( *p=='\n' )
	lcd_gotoxy( 0,1 );		
	else
	lcd_putch( *p );		
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	cf 90       	pop	r12
     924:	bf 90       	pop	r11
     926:	af 90       	pop	r10
     928:	7f 90       	pop	r7
     92a:	6f 90       	pop	r6
     92c:	5f 90       	pop	r5
     92e:	4f 90       	pop	r4
     930:	08 95       	ret

00000932 <__vector_2>:
	}
	
}

ISR( INT1_vect )//Falling edge on Int1
{
     932:	1f 92       	push	r1
     934:	0f 92       	push	r0
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	0f 92       	push	r0
     93a:	11 24       	eor	r1, r1
     93c:	8f 93       	push	r24
     93e:	9f 93       	push	r25
     940:	af 93       	push	r26
     942:	bf 93       	push	r27

	if( bit_is_set( PIND,PIND2 ) )//if true it is negative direction
     944:	82 9b       	sbis	0x10, 2	; 16
     946:	07 c0       	rjmp	.+14     	; 0x956 <__vector_2+0x24>
	dir_flag=1;
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	90 93 79 00 	sts	0x0079, r25
     950:	80 93 78 00 	sts	0x0078, r24
     954:	06 c0       	rjmp	.+12     	; 0x962 <__vector_2+0x30>

	else//else it is positive direction
	dir_flag=-1;
     956:	8f ef       	ldi	r24, 0xFF	; 255
     958:	9f ef       	ldi	r25, 0xFF	; 255
     95a:	90 93 79 00 	sts	0x0079, r25
     95e:	80 93 78 00 	sts	0x0078, r24
	

	count++;
     962:	80 91 83 00 	lds	r24, 0x0083
     966:	90 91 84 00 	lds	r25, 0x0084
     96a:	a0 91 85 00 	lds	r26, 0x0085
     96e:	b0 91 86 00 	lds	r27, 0x0086
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	a1 1d       	adc	r26, r1
     976:	b1 1d       	adc	r27, r1
     978:	80 93 83 00 	sts	0x0083, r24
     97c:	90 93 84 00 	sts	0x0084, r25
     980:	a0 93 85 00 	sts	0x0085, r26
     984:	b0 93 86 00 	sts	0x0086, r27

}
     988:	bf 91       	pop	r27
     98a:	af 91       	pop	r26
     98c:	9f 91       	pop	r25
     98e:	8f 91       	pop	r24
     990:	0f 90       	pop	r0
     992:	0f be       	out	0x3f, r0	; 63
     994:	0f 90       	pop	r0
     996:	1f 90       	pop	r1
     998:	18 95       	reti

0000099a <__vector_9>:


//---------------------------------------------------------------------------------------------------------------------------------------------------//

ISR( TIMER0_OVF_vect )//timer0 overflow
{
     99a:	1f 92       	push	r1
     99c:	0f 92       	push	r0
     99e:	0f b6       	in	r0, 0x3f	; 63
     9a0:	0f 92       	push	r0
     9a2:	11 24       	eor	r1, r1
     9a4:	cf 92       	push	r12
     9a6:	df 92       	push	r13
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	2f 93       	push	r18
     9ae:	3f 93       	push	r19
     9b0:	4f 93       	push	r20
     9b2:	5f 93       	push	r21
     9b4:	6f 93       	push	r22
     9b6:	7f 93       	push	r23
     9b8:	8f 93       	push	r24
     9ba:	9f 93       	push	r25
     9bc:	af 93       	push	r26
     9be:	bf 93       	push	r27
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	ef 93       	push	r30
     9c6:	ff 93       	push	r31
	
	rpm=(919.117647*4*count*dir_flag)/1024 ;
     9c8:	60 91 83 00 	lds	r22, 0x0083
     9cc:	70 91 84 00 	lds	r23, 0x0084
     9d0:	80 91 85 00 	lds	r24, 0x0085
     9d4:	90 91 86 00 	lds	r25, 0x0086
     9d8:	c0 91 78 00 	lds	r28, 0x0078
     9dc:	d0 91 79 00 	lds	r29, 0x0079
     9e0:	c3 d2       	rcall	.+1414   	; 0xf68 <__floatsisf>
     9e2:	28 e8       	ldi	r18, 0x88	; 136
     9e4:	37 ec       	ldi	r19, 0xC7	; 199
     9e6:	45 e6       	ldi	r20, 0x65	; 101
     9e8:	55 e4       	ldi	r21, 0x45	; 69
     9ea:	72 d3       	rcall	.+1764   	; 0x10d0 <__mulsf3>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	be 01       	movw	r22, r28
     9f2:	88 27       	eor	r24, r24
     9f4:	77 fd       	sbrc	r23, 7
     9f6:	80 95       	com	r24
     9f8:	98 2f       	mov	r25, r24
     9fa:	b6 d2       	rcall	.+1388   	; 0xf68 <__floatsisf>
     9fc:	9b 01       	movw	r18, r22
     9fe:	ac 01       	movw	r20, r24
     a00:	c7 01       	movw	r24, r14
     a02:	b6 01       	movw	r22, r12
     a04:	65 d3       	rcall	.+1738   	; 0x10d0 <__mulsf3>
     a06:	20 e0       	ldi	r18, 0x00	; 0
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	40 e8       	ldi	r20, 0x80	; 128
     a0c:	5a e3       	ldi	r21, 0x3A	; 58
     a0e:	60 d3       	rcall	.+1728   	; 0x10d0 <__mulsf3>
     a10:	46 2f       	mov	r20, r22
     a12:	57 2f       	mov	r21, r23
     a14:	68 2f       	mov	r22, r24
     a16:	79 2f       	mov	r23, r25
     a18:	40 93 7b 00 	sts	0x007B, r20
     a1c:	50 93 7c 00 	sts	0x007C, r21
     a20:	60 93 7d 00 	sts	0x007D, r22
     a24:	70 93 7e 00 	sts	0x007E, r23
	rps=rpm/60;
     a28:	60 91 7b 00 	lds	r22, 0x007B
     a2c:	70 91 7c 00 	lds	r23, 0x007C
     a30:	80 91 7d 00 	lds	r24, 0x007D
     a34:	90 91 7e 00 	lds	r25, 0x007E
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e7       	ldi	r20, 0x70	; 112
     a3e:	52 e4       	ldi	r21, 0x42	; 66
     a40:	f8 d1       	rcall	.+1008   	; 0xe32 <__divsf3>
     a42:	46 2f       	mov	r20, r22
     a44:	57 2f       	mov	r21, r23
     a46:	68 2f       	mov	r22, r24
     a48:	79 2f       	mov	r23, r25
     a4a:	40 93 7f 00 	sts	0x007F, r20
     a4e:	50 93 80 00 	sts	0x0080, r21
     a52:	60 93 81 00 	sts	0x0081, r22
     a56:	70 93 82 00 	sts	0x0082, r23
	calculation_flag++;
     a5a:	80 91 7a 00 	lds	r24, 0x007A
     a5e:	8f 5f       	subi	r24, 0xFF	; 255
     a60:	80 93 7a 00 	sts	0x007A, r24
	count=0;
     a64:	10 92 83 00 	sts	0x0083, r1
     a68:	10 92 84 00 	sts	0x0084, r1
     a6c:	10 92 85 00 	sts	0x0085, r1
     a70:	10 92 86 00 	sts	0x0086, r1
	display_count++;
     a74:	80 91 76 00 	lds	r24, 0x0076
     a78:	90 91 77 00 	lds	r25, 0x0077
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	90 93 77 00 	sts	0x0077, r25
     a82:	80 93 76 00 	sts	0x0076, r24
	TCNT0=1;
     a86:	81 e0       	ldi	r24, 0x01	; 1
     a88:	82 bf       	out	0x32, r24	; 50
}
     a8a:	ff 91       	pop	r31
     a8c:	ef 91       	pop	r30
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	bf 91       	pop	r27
     a94:	af 91       	pop	r26
     a96:	9f 91       	pop	r25
     a98:	8f 91       	pop	r24
     a9a:	7f 91       	pop	r23
     a9c:	6f 91       	pop	r22
     a9e:	5f 91       	pop	r21
     aa0:	4f 91       	pop	r20
     aa2:	3f 91       	pop	r19
     aa4:	2f 91       	pop	r18
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	0f 90       	pop	r0
     ab0:	0f be       	out	0x3f, r0	; 63
     ab2:	0f 90       	pop	r0
     ab4:	1f 90       	pop	r1
     ab6:	18 95       	reti

00000ab8 <__vector_10>:
//---------------------------------------------------------------------------------------------------------------------------------------------------//
ISR( SPI_STC_vect )//spi transmit complete interrupt
{
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	2f 93       	push	r18
     ac4:	3f 93       	push	r19
     ac6:	4f 93       	push	r20
     ac8:	5f 93       	push	r21
     aca:	6f 93       	push	r22
     acc:	7f 93       	push	r23
     ace:	8f 93       	push	r24
     ad0:	9f 93       	push	r25
     ad2:	af 93       	push	r26
     ad4:	bf 93       	push	r27
     ad6:	ef 93       	push	r30
     ad8:	ff 93       	push	r31
	
	speed=(int)(SPDR-127)*8;
     ada:	8f b1       	in	r24, 0x0f	; 15
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	8f 57       	subi	r24, 0x7F	; 127
     ae0:	91 09       	sbc	r25, r1
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	88 0f       	add	r24, r24
     aec:	99 1f       	adc	r25, r25
     aee:	90 93 75 00 	sts	0x0075, r25
     af2:	80 93 74 00 	sts	0x0074, r24
	
	//SPI_Buffer[0]=SPDR;
	//SetTargetPoint((float)speed/1.785714,TRUE);
	SetTargetPoint(speed,TRUE);
     af6:	61 e0       	ldi	r22, 0x01	; 1
     af8:	74 db       	rcall	.-2328   	; 0x1e2 <SetTargetPoint>
}
     afa:	ff 91       	pop	r31
     afc:	ef 91       	pop	r30
     afe:	bf 91       	pop	r27
     b00:	af 91       	pop	r26
     b02:	9f 91       	pop	r25
     b04:	8f 91       	pop	r24
     b06:	7f 91       	pop	r23
     b08:	6f 91       	pop	r22
     b0a:	5f 91       	pop	r21
     b0c:	4f 91       	pop	r20
     b0e:	3f 91       	pop	r19
     b10:	2f 91       	pop	r18
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <init_ext_interrupt>:
//--------------------------------------------------------------------------------------------------------------------------------------------------//
void init_ext_interrupt( void )
{
	INPUT( DD_INT1 );
     b1c:	8b 98       	cbi	0x11, 3	; 17
	INPUT( DD_INT0 );
     b1e:	8a 98       	cbi	0x11, 2	; 17
	PULLUP_ON( DD_INT1 );
     b20:	8b 98       	cbi	0x11, 3	; 17
     b22:	93 9a       	sbi	0x12, 3	; 18
	PULLUP_ON( DD_INT0 );
     b24:	8a 98       	cbi	0x11, 2	; 17
     b26:	92 9a       	sbi	0x12, 2	; 18
	REGISTER_SET1( MCUCR, ISC11 );
     b28:	85 b7       	in	r24, 0x35	; 53
     b2a:	88 60       	ori	r24, 0x08	; 8
     b2c:	85 bf       	out	0x35, r24	; 53
	REGISTER_SET1( GICR, INT1 );
     b2e:	8b b7       	in	r24, 0x3b	; 59
     b30:	80 68       	ori	r24, 0x80	; 128
     b32:	8b bf       	out	0x3b, r24	; 59
	REGISTER_SET1( GIFR, INTF1 );
     b34:	8a b7       	in	r24, 0x3a	; 58
     b36:	80 68       	ori	r24, 0x80	; 128
     b38:	8a bf       	out	0x3a, r24	; 58
     b3a:	08 95       	ret

00000b3c <init_timer0>:
}
//-------------------------------------------------------------------------------------------------------------------------------------------------//
void init_timer0( void )//timer0 if for rps calculation
{
	REGISTER_SET1( TIMSK, TOIE0 );
     b3c:	89 b7       	in	r24, 0x39	; 57
     b3e:	81 60       	ori	r24, 0x01	; 1
     b40:	89 bf       	out	0x39, r24	; 57
	REGISTER_SET2( TCCR0, CS02 , CS00 );
     b42:	83 b7       	in	r24, 0x33	; 51
     b44:	85 60       	ori	r24, 0x05	; 5
     b46:	83 bf       	out	0x33, r24	; 51
     b48:	08 95       	ret

00000b4a <init_timer1>:
}

void init_timer1()
{
	REGISTER_SET2(TCCR1A,COM1A1,WGM11);
     b4a:	8f b5       	in	r24, 0x2f	; 47
     b4c:	82 68       	ori	r24, 0x82	; 130
     b4e:	8f bd       	out	0x2f, r24	; 47
	REGISTER_SET3(TCCR1B,WGM13,WGM12,CS10);
     b50:	8e b5       	in	r24, 0x2e	; 46
     b52:	89 61       	ori	r24, 0x19	; 25
     b54:	8e bd       	out	0x2e, r24	; 46
	OUTPUT2(B,1);
     b56:	b9 9a       	sbi	0x17, 1	; 23
	ICR1=TOP;
     b58:	80 ed       	ldi	r24, 0xD0	; 208
     b5a:	97 e0       	ldi	r25, 0x07	; 7
     b5c:	97 bd       	out	0x27, r25	; 39
     b5e:	86 bd       	out	0x26, r24	; 38
	OCR1A=5;
     b60:	85 e0       	ldi	r24, 0x05	; 5
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9b bd       	out	0x2b, r25	; 43
     b66:	8a bd       	out	0x2a, r24	; 42
	inter_ocr=2005;
     b68:	85 ed       	ldi	r24, 0xD5	; 213
     b6a:	97 e0       	ldi	r25, 0x07	; 7
     b6c:	90 93 73 00 	sts	0x0073, r25
     b70:	80 93 72 00 	sts	0x0072, r24
	
	OUTPUT2(D,6);              //PD6 and PD7 pins for controlling direction of rotation of motor
     b74:	8e 9a       	sbi	0x11, 6	; 17
	OUTPUT2(D,7);
     b76:	8f 9a       	sbi	0x11, 7	; 17
	SET2(D,6);                //D6 high
     b78:	96 9a       	sbi	0x12, 6	; 18
	CLEAR2(D,7);              //D7 low
     b7a:	97 98       	cbi	0x12, 7	; 18
     b7c:	08 95       	ret

00000b7e <SPI_SlaveInit>:
}
//---------------------------------------------------------------------------------------------------------------------------------//
void SPI_SlaveInit(void)
{
	INPUT( DD_MOSI );
     b7e:	bb 98       	cbi	0x17, 3	; 23
	INPUT( DD_SCK );
     b80:	bd 98       	cbi	0x17, 5	; 23
	INPUT( DD_SS );
     b82:	ba 98       	cbi	0x17, 2	; 23
	OUTPUT( DD_MISO );
     b84:	bc 9a       	sbi	0x17, 4	; 23
	PULLUP_ON( DD_MOSI );
     b86:	bb 98       	cbi	0x17, 3	; 23
     b88:	c3 9a       	sbi	0x18, 3	; 24
	PULLUP_ON( DD_SCK );
     b8a:	bd 98       	cbi	0x17, 5	; 23
     b8c:	c5 9a       	sbi	0x18, 5	; 24
	PULLUP_ON( DD_SS );
     b8e:	ba 98       	cbi	0x17, 2	; 23
     b90:	c2 9a       	sbi	0x18, 2	; 24
	
	SPCR|= _BV( SPE )|_BV( SPIE )|_BV( CPHA )|_BV(SPR0);
     b92:	8d b1       	in	r24, 0x0d	; 13
     b94:	85 6c       	ori	r24, 0xC5	; 197
     b96:	8d b9       	out	0x0d, r24	; 13
     b98:	08 95       	ret

00000b9a <main>:
void SPI_SlaveInit( void );


int main(void)
{
	DDRD|=(1<<PIND7)|(1<<PIND6);
     b9a:	81 b3       	in	r24, 0x11	; 17
     b9c:	80 6c       	ori	r24, 0xC0	; 192
     b9e:	81 bb       	out	0x11, r24	; 17
	PORTD&=~(1<<PIND7);
     ba0:	97 98       	cbi	0x12, 7	; 18
	PORTD|=(1<<PIND6);
     ba2:	96 9a       	sbi	0x12, 6	; 18
	
	PORTD|=(1<<PIND2)|(1<<PIND3);
     ba4:	82 b3       	in	r24, 0x12	; 18
     ba6:	8c 60       	ori	r24, 0x0C	; 12
     ba8:	82 bb       	out	0x12, r24	; 18
	init_ext_interrupt();
     baa:	b8 df       	rcall	.-144    	; 0xb1c <init_ext_interrupt>
	init_timer0();
     bac:	c7 df       	rcall	.-114    	; 0xb3c <init_timer0>
	init_timer1();
     bae:	cd df       	rcall	.-102    	; 0xb4a <init_timer1>
	SPI_SlaveInit();
     bb0:	e6 df       	rcall	.-52     	; 0xb7e <SPI_SlaveInit>
	lcd_init();
     bb2:	95 dd       	rcall	.-1238   	; 0x6de <lcd_init>
	General_interrupt_enable();
     bb4:	78 94       	sei
	PIDinitialize();
     bb6:	53 da       	rcall	.-2906   	; 0x5e <PIDinitialize>
	SetSamplefrequency(1);
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	ba da       	rcall	.-2700   	; 0x132 <SetSamplefrequency>
	//SetTargetPoint(speed,TRUE);
	SetOutputLimits(-1900,1900);
     bbe:	6c e6       	ldi	r22, 0x6C	; 108
     bc0:	77 e0       	ldi	r23, 0x07	; 7
     bc2:	84 e9       	ldi	r24, 0x94	; 148
     bc4:	98 ef       	ldi	r25, 0xF8	; 248
     bc6:	9b da       	rcall	.-2762   	; 0xfe <SetOutputLimits>
	SetIntegralLimits(TRUE,-2.25,2.25);
     bc8:	42 e0       	ldi	r20, 0x02	; 2
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	6e ef       	ldi	r22, 0xFE	; 254
     bce:	7f ef       	ldi	r23, 0xFF	; 255
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	a1 da       	rcall	.-2750   	; 0x116 <SetIntegralLimits>
	//SetTuningConstants(0.965,0.0012,0.09);   //motor1
	//SetTuningConstants(0.955,0.0012,0.09);   //motor2
	//SetTuningConstants(0.975,0.0010,0.09);   //motor3
	//SetTuningConstants(0.92,0.0012,0.09);      //motor4
	SetTuningConstants(0.45,0.0,0.0);
     bd4:	e1 2c       	mov	r14, r1
     bd6:	f1 2c       	mov	r15, r1
     bd8:	87 01       	movw	r16, r14
     bda:	a8 01       	movw	r20, r16
     bdc:	97 01       	movw	r18, r14
     bde:	66 e6       	ldi	r22, 0x66	; 102
     be0:	76 e6       	ldi	r23, 0x66	; 102
     be2:	86 ee       	ldi	r24, 0xE6	; 230
     be4:	9e e3       	ldi	r25, 0x3E	; 62
     be6:	51 db       	rcall	.-2398   	; 0x28a <SetTuningConstants>
			inter_ocr=OCRmin;
			
			ex_ocr=inter_ocr;
			if(ex_ocr<2000)
			{
				ex_ocr=2000-ex_ocr;
     be8:	0f 2e       	mov	r0, r31
     bea:	f0 ed       	ldi	r31, 0xD0	; 208
     bec:	ef 2e       	mov	r14, r31
     bee:	f7 e0       	ldi	r31, 0x07	; 7
     bf0:	ff 2e       	mov	r15, r31
     bf2:	f0 2d       	mov	r31, r0
			else if(speed==0)
			inter_ocr=TOP;
			if(inter_ocr>OCRmax)
			inter_ocr=OCRmax;
			else if(inter_ocr<OCRmin)
			inter_ocr=OCRmin;
     bf4:	0f 2e       	mov	r0, r31
     bf6:	f8 ee       	ldi	r31, 0xE8	; 232
     bf8:	af 2e       	mov	r10, r31
     bfa:	f3 e0       	ldi	r31, 0x03	; 3
     bfc:	bf 2e       	mov	r11, r31
     bfe:	f0 2d       	mov	r31, r0
			else if(speed<0)
			inter_ocr=TOP-offset+speed;
			else if(speed==0)
			inter_ocr=TOP;
			if(inter_ocr>OCRmax)
			inter_ocr=OCRmax;
     c00:	0f 2e       	mov	r0, r31
     c02:	f8 eb       	ldi	r31, 0xB8	; 184
     c04:	cf 2e       	mov	r12, r31
     c06:	fb e0       	ldi	r31, 0x0B	; 11
     c08:	df 2e       	mov	r13, r31
     c0a:	f0 2d       	mov	r31, r0
		
		if(display_count>=9)
		{
			
		 lcd_clear();
		 Printf("Rp=%d",(int)rpm);
     c0c:	00 e6       	ldi	r16, 0x60	; 96
     c0e:	10 e0       	ldi	r17, 0x00	; 0
		 Printf("\nOCR1A=%d",OCR1A);
     c10:	c6 e6       	ldi	r28, 0x66	; 102
     c12:	d0 e0       	ldi	r29, 0x00	; 0
	//SetTuningConstants(0.975,0.0010,0.09);   //motor3
	//SetTuningConstants(0.92,0.0012,0.09);      //motor4
	SetTuningConstants(0.45,0.0,0.0);
	while(1)
	{
		if(SPDR==127)
     c14:	8f b1       	in	r24, 0x0f	; 15
     c16:	8f 37       	cpi	r24, 0x7F	; 127
     c18:	21 f4       	brne	.+8      	; 0xc22 <main+0x88>
		{
			speed=0;
     c1a:	10 92 75 00 	sts	0x0075, r1
     c1e:	10 92 74 00 	sts	0x0074, r1
		}
	
		
		if( calculation_flag>=4)
     c22:	80 91 7a 00 	lds	r24, 0x007A
     c26:	84 30       	cpi	r24, 0x04	; 4
     c28:	08 f4       	brcc	.+2      	; 0xc2c <main+0x92>
     c2a:	6f c0       	rjmp	.+222    	; 0xd0a <main+0x170>
		{
			SetInput(rpm );           //encoder rpm converted to actual wheel rpm
     c2c:	60 91 7b 00 	lds	r22, 0x007B
     c30:	70 91 7c 00 	lds	r23, 0x007C
     c34:	80 91 7d 00 	lds	r24, 0x007D
     c38:	90 91 7e 00 	lds	r25, 0x007E
     c3c:	e4 db       	rcall	.-2104   	; 0x406 <SetInput>
			
			CalculatePID();
     c3e:	29 dc       	rcall	.-1966   	; 0x492 <CalculatePID>
			if(speed>0)
     c40:	80 91 74 00 	lds	r24, 0x0074
     c44:	90 91 75 00 	lds	r25, 0x0075
     c48:	18 16       	cp	r1, r24
     c4a:	19 06       	cpc	r1, r25
     c4c:	3c f4       	brge	.+14     	; 0xc5c <main+0xc2>
			inter_ocr=TOP+offset+speed;
     c4e:	88 5b       	subi	r24, 0xB8	; 184
     c50:	97 4f       	sbci	r25, 0xF7	; 247
     c52:	90 93 73 00 	sts	0x0073, r25
     c56:	80 93 72 00 	sts	0x0072, r24
     c5a:	0f c0       	rjmp	.+30     	; 0xc7a <main+0xe0>
			else if(speed<0)
     c5c:	99 23       	and	r25, r25
     c5e:	3c f4       	brge	.+14     	; 0xc6e <main+0xd4>
			inter_ocr=TOP-offset+speed;
     c60:	88 5a       	subi	r24, 0xA8	; 168
     c62:	98 4f       	sbci	r25, 0xF8	; 248
     c64:	90 93 73 00 	sts	0x0073, r25
     c68:	80 93 72 00 	sts	0x0072, r24
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <main+0xe0>
			else if(speed==0)
     c6e:	89 2b       	or	r24, r25
     c70:	21 f4       	brne	.+8      	; 0xc7a <main+0xe0>
			inter_ocr=TOP;
     c72:	f0 92 73 00 	sts	0x0073, r15
     c76:	e0 92 72 00 	sts	0x0072, r14
			if(inter_ocr>OCRmax)
     c7a:	80 91 72 00 	lds	r24, 0x0072
     c7e:	90 91 73 00 	lds	r25, 0x0073
     c82:	89 3b       	cpi	r24, 0xB9	; 185
     c84:	9b 40       	sbci	r25, 0x0B	; 11
     c86:	2c f0       	brlt	.+10     	; 0xc92 <main+0xf8>
			inter_ocr=OCRmax;
     c88:	d0 92 73 00 	sts	0x0073, r13
     c8c:	c0 92 72 00 	sts	0x0072, r12
     c90:	0b c0       	rjmp	.+22     	; 0xca8 <main+0x10e>
			else if(inter_ocr<OCRmin)
     c92:	80 91 72 00 	lds	r24, 0x0072
     c96:	90 91 73 00 	lds	r25, 0x0073
     c9a:	88 3e       	cpi	r24, 0xE8	; 232
     c9c:	93 40       	sbci	r25, 0x03	; 3
     c9e:	24 f4       	brge	.+8      	; 0xca8 <main+0x10e>
			inter_ocr=OCRmin;
     ca0:	b0 92 73 00 	sts	0x0073, r11
     ca4:	a0 92 72 00 	sts	0x0072, r10
			
			ex_ocr=inter_ocr;
     ca8:	80 91 72 00 	lds	r24, 0x0072
     cac:	90 91 73 00 	lds	r25, 0x0073
     cb0:	90 93 71 00 	sts	0x0071, r25
     cb4:	80 93 70 00 	sts	0x0070, r24
			if(ex_ocr<2000)
     cb8:	80 91 70 00 	lds	r24, 0x0070
     cbc:	90 91 71 00 	lds	r25, 0x0071
     cc0:	80 3d       	cpi	r24, 0xD0	; 208
     cc2:	97 40       	sbci	r25, 0x07	; 7
     cc4:	74 f4       	brge	.+28     	; 0xce2 <main+0x148>
			{
				ex_ocr=2000-ex_ocr;
     cc6:	80 91 70 00 	lds	r24, 0x0070
     cca:	90 91 71 00 	lds	r25, 0x0071
     cce:	97 01       	movw	r18, r14
     cd0:	28 1b       	sub	r18, r24
     cd2:	39 0b       	sbc	r19, r25
     cd4:	30 93 71 00 	sts	0x0071, r19
     cd8:	20 93 70 00 	sts	0x0070, r18
				CLEAR2(D,6);     //D7 low and D6 high i.e, 01
     cdc:	96 98       	cbi	0x12, 6	; 18
				SET2(D,7);
     cde:	97 9a       	sbi	0x12, 7	; 18
     ce0:	0c c0       	rjmp	.+24     	; 0xcfa <main+0x160>
			}
			else
			{
				ex_ocr=ex_ocr-2000;
     ce2:	80 91 70 00 	lds	r24, 0x0070
     ce6:	90 91 71 00 	lds	r25, 0x0071
     cea:	80 5d       	subi	r24, 0xD0	; 208
     cec:	97 40       	sbci	r25, 0x07	; 7
     cee:	90 93 71 00 	sts	0x0071, r25
     cf2:	80 93 70 00 	sts	0x0070, r24
				SET2(D,6);       //D6 high and D7 low i.e, 10
     cf6:	96 9a       	sbi	0x12, 6	; 18
				CLEAR2(D,7);
     cf8:	97 98       	cbi	0x12, 7	; 18
			}
			
			OCR1A=ex_ocr;
     cfa:	80 91 70 00 	lds	r24, 0x0070
     cfe:	90 91 71 00 	lds	r25, 0x0071
     d02:	9b bd       	out	0x2b, r25	; 43
     d04:	8a bd       	out	0x2a, r24	; 42
			
			calculation_flag=0;
     d06:	10 92 7a 00 	sts	0x007A, r1
			
		}
		
		if(display_count>=9)
     d0a:	80 91 76 00 	lds	r24, 0x0076
     d0e:	90 91 77 00 	lds	r25, 0x0077
     d12:	09 97       	sbiw	r24, 0x09	; 9
     d14:	0c f4       	brge	.+2      	; 0xd18 <main+0x17e>
     d16:	7e cf       	rjmp	.-260    	; 0xc14 <main+0x7a>
		{
			
		 lcd_clear();
     d18:	c2 dc       	rcall	.-1660   	; 0x69e <lcd_clear>
		 Printf("Rp=%d",(int)rpm);
     d1a:	60 91 7b 00 	lds	r22, 0x007B
     d1e:	70 91 7c 00 	lds	r23, 0x007C
     d22:	80 91 7d 00 	lds	r24, 0x007D
     d26:	90 91 7e 00 	lds	r25, 0x007E
     d2a:	eb d0       	rcall	.+470    	; 0xf02 <__fixsfsi>
     d2c:	7f 93       	push	r23
     d2e:	6f 93       	push	r22
     d30:	1f 93       	push	r17
     d32:	0f 93       	push	r16
     d34:	2a dd       	rcall	.-1452   	; 0x78a <Printf>
		 Printf("\nOCR1A=%d",OCR1A);
     d36:	8a b5       	in	r24, 0x2a	; 42
     d38:	9b b5       	in	r25, 0x2b	; 43
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	23 dd       	rcall	.-1466   	; 0x78a <Printf>
		 display_count=0;
     d44:	10 92 77 00 	sts	0x0077, r1
     d48:	10 92 76 00 	sts	0x0076, r1
     d4c:	2d b7       	in	r18, 0x3d	; 61
     d4e:	3e b7       	in	r19, 0x3e	; 62
     d50:	28 5f       	subi	r18, 0xF8	; 248
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	3e bf       	out	0x3e, r19	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	2d bf       	out	0x3d, r18	; 61
     d5e:	5a cf       	rjmp	.-332    	; 0xc14 <main+0x7a>

00000d60 <__subsf3>:
     d60:	50 58       	subi	r21, 0x80	; 128

00000d62 <__addsf3>:
     d62:	bb 27       	eor	r27, r27
     d64:	aa 27       	eor	r26, r26
     d66:	0e d0       	rcall	.+28     	; 0xd84 <__addsf3x>
     d68:	75 c1       	rjmp	.+746    	; 0x1054 <__fp_round>
     d6a:	66 d1       	rcall	.+716    	; 0x1038 <__fp_pscA>
     d6c:	30 f0       	brcs	.+12     	; 0xd7a <__addsf3+0x18>
     d6e:	6b d1       	rcall	.+726    	; 0x1046 <__fp_pscB>
     d70:	20 f0       	brcs	.+8      	; 0xd7a <__addsf3+0x18>
     d72:	31 f4       	brne	.+12     	; 0xd80 <__addsf3+0x1e>
     d74:	9f 3f       	cpi	r25, 0xFF	; 255
     d76:	11 f4       	brne	.+4      	; 0xd7c <__addsf3+0x1a>
     d78:	1e f4       	brtc	.+6      	; 0xd80 <__addsf3+0x1e>
     d7a:	5b c1       	rjmp	.+694    	; 0x1032 <__fp_nan>
     d7c:	0e f4       	brtc	.+2      	; 0xd80 <__addsf3+0x1e>
     d7e:	e0 95       	com	r30
     d80:	e7 fb       	bst	r30, 7
     d82:	51 c1       	rjmp	.+674    	; 0x1026 <__fp_inf>

00000d84 <__addsf3x>:
     d84:	e9 2f       	mov	r30, r25
     d86:	77 d1       	rcall	.+750    	; 0x1076 <__fp_split3>
     d88:	80 f3       	brcs	.-32     	; 0xd6a <__addsf3+0x8>
     d8a:	ba 17       	cp	r27, r26
     d8c:	62 07       	cpc	r22, r18
     d8e:	73 07       	cpc	r23, r19
     d90:	84 07       	cpc	r24, r20
     d92:	95 07       	cpc	r25, r21
     d94:	18 f0       	brcs	.+6      	; 0xd9c <__addsf3x+0x18>
     d96:	71 f4       	brne	.+28     	; 0xdb4 <__addsf3x+0x30>
     d98:	9e f5       	brtc	.+102    	; 0xe00 <__addsf3x+0x7c>
     d9a:	8f c1       	rjmp	.+798    	; 0x10ba <__fp_zero>
     d9c:	0e f4       	brtc	.+2      	; 0xda0 <__addsf3x+0x1c>
     d9e:	e0 95       	com	r30
     da0:	0b 2e       	mov	r0, r27
     da2:	ba 2f       	mov	r27, r26
     da4:	a0 2d       	mov	r26, r0
     da6:	0b 01       	movw	r0, r22
     da8:	b9 01       	movw	r22, r18
     daa:	90 01       	movw	r18, r0
     dac:	0c 01       	movw	r0, r24
     dae:	ca 01       	movw	r24, r20
     db0:	a0 01       	movw	r20, r0
     db2:	11 24       	eor	r1, r1
     db4:	ff 27       	eor	r31, r31
     db6:	59 1b       	sub	r21, r25
     db8:	99 f0       	breq	.+38     	; 0xde0 <__addsf3x+0x5c>
     dba:	59 3f       	cpi	r21, 0xF9	; 249
     dbc:	50 f4       	brcc	.+20     	; 0xdd2 <__addsf3x+0x4e>
     dbe:	50 3e       	cpi	r21, 0xE0	; 224
     dc0:	68 f1       	brcs	.+90     	; 0xe1c <__addsf3x+0x98>
     dc2:	1a 16       	cp	r1, r26
     dc4:	f0 40       	sbci	r31, 0x00	; 0
     dc6:	a2 2f       	mov	r26, r18
     dc8:	23 2f       	mov	r18, r19
     dca:	34 2f       	mov	r19, r20
     dcc:	44 27       	eor	r20, r20
     dce:	58 5f       	subi	r21, 0xF8	; 248
     dd0:	f3 cf       	rjmp	.-26     	; 0xdb8 <__addsf3x+0x34>
     dd2:	46 95       	lsr	r20
     dd4:	37 95       	ror	r19
     dd6:	27 95       	ror	r18
     dd8:	a7 95       	ror	r26
     dda:	f0 40       	sbci	r31, 0x00	; 0
     ddc:	53 95       	inc	r21
     dde:	c9 f7       	brne	.-14     	; 0xdd2 <__addsf3x+0x4e>
     de0:	7e f4       	brtc	.+30     	; 0xe00 <__addsf3x+0x7c>
     de2:	1f 16       	cp	r1, r31
     de4:	ba 0b       	sbc	r27, r26
     de6:	62 0b       	sbc	r22, r18
     de8:	73 0b       	sbc	r23, r19
     dea:	84 0b       	sbc	r24, r20
     dec:	ba f0       	brmi	.+46     	; 0xe1c <__addsf3x+0x98>
     dee:	91 50       	subi	r25, 0x01	; 1
     df0:	a1 f0       	breq	.+40     	; 0xe1a <__addsf3x+0x96>
     df2:	ff 0f       	add	r31, r31
     df4:	bb 1f       	adc	r27, r27
     df6:	66 1f       	adc	r22, r22
     df8:	77 1f       	adc	r23, r23
     dfa:	88 1f       	adc	r24, r24
     dfc:	c2 f7       	brpl	.-16     	; 0xdee <__addsf3x+0x6a>
     dfe:	0e c0       	rjmp	.+28     	; 0xe1c <__addsf3x+0x98>
     e00:	ba 0f       	add	r27, r26
     e02:	62 1f       	adc	r22, r18
     e04:	73 1f       	adc	r23, r19
     e06:	84 1f       	adc	r24, r20
     e08:	48 f4       	brcc	.+18     	; 0xe1c <__addsf3x+0x98>
     e0a:	87 95       	ror	r24
     e0c:	77 95       	ror	r23
     e0e:	67 95       	ror	r22
     e10:	b7 95       	ror	r27
     e12:	f7 95       	ror	r31
     e14:	9e 3f       	cpi	r25, 0xFE	; 254
     e16:	08 f0       	brcs	.+2      	; 0xe1a <__addsf3x+0x96>
     e18:	b3 cf       	rjmp	.-154    	; 0xd80 <__addsf3+0x1e>
     e1a:	93 95       	inc	r25
     e1c:	88 0f       	add	r24, r24
     e1e:	08 f0       	brcs	.+2      	; 0xe22 <__addsf3x+0x9e>
     e20:	99 27       	eor	r25, r25
     e22:	ee 0f       	add	r30, r30
     e24:	97 95       	ror	r25
     e26:	87 95       	ror	r24
     e28:	08 95       	ret

00000e2a <__cmpsf2>:
     e2a:	d9 d0       	rcall	.+434    	; 0xfde <__fp_cmp>
     e2c:	08 f4       	brcc	.+2      	; 0xe30 <__cmpsf2+0x6>
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	08 95       	ret

00000e32 <__divsf3>:
     e32:	0c d0       	rcall	.+24     	; 0xe4c <__divsf3x>
     e34:	0f c1       	rjmp	.+542    	; 0x1054 <__fp_round>
     e36:	07 d1       	rcall	.+526    	; 0x1046 <__fp_pscB>
     e38:	40 f0       	brcs	.+16     	; 0xe4a <__divsf3+0x18>
     e3a:	fe d0       	rcall	.+508    	; 0x1038 <__fp_pscA>
     e3c:	30 f0       	brcs	.+12     	; 0xe4a <__divsf3+0x18>
     e3e:	21 f4       	brne	.+8      	; 0xe48 <__divsf3+0x16>
     e40:	5f 3f       	cpi	r21, 0xFF	; 255
     e42:	19 f0       	breq	.+6      	; 0xe4a <__divsf3+0x18>
     e44:	f0 c0       	rjmp	.+480    	; 0x1026 <__fp_inf>
     e46:	51 11       	cpse	r21, r1
     e48:	39 c1       	rjmp	.+626    	; 0x10bc <__fp_szero>
     e4a:	f3 c0       	rjmp	.+486    	; 0x1032 <__fp_nan>

00000e4c <__divsf3x>:
     e4c:	14 d1       	rcall	.+552    	; 0x1076 <__fp_split3>
     e4e:	98 f3       	brcs	.-26     	; 0xe36 <__divsf3+0x4>

00000e50 <__divsf3_pse>:
     e50:	99 23       	and	r25, r25
     e52:	c9 f3       	breq	.-14     	; 0xe46 <__divsf3+0x14>
     e54:	55 23       	and	r21, r21
     e56:	b1 f3       	breq	.-20     	; 0xe44 <__divsf3+0x12>
     e58:	95 1b       	sub	r25, r21
     e5a:	55 0b       	sbc	r21, r21
     e5c:	bb 27       	eor	r27, r27
     e5e:	aa 27       	eor	r26, r26
     e60:	62 17       	cp	r22, r18
     e62:	73 07       	cpc	r23, r19
     e64:	84 07       	cpc	r24, r20
     e66:	38 f0       	brcs	.+14     	; 0xe76 <__divsf3_pse+0x26>
     e68:	9f 5f       	subi	r25, 0xFF	; 255
     e6a:	5f 4f       	sbci	r21, 0xFF	; 255
     e6c:	22 0f       	add	r18, r18
     e6e:	33 1f       	adc	r19, r19
     e70:	44 1f       	adc	r20, r20
     e72:	aa 1f       	adc	r26, r26
     e74:	a9 f3       	breq	.-22     	; 0xe60 <__divsf3_pse+0x10>
     e76:	33 d0       	rcall	.+102    	; 0xede <__divsf3_pse+0x8e>
     e78:	0e 2e       	mov	r0, r30
     e7a:	3a f0       	brmi	.+14     	; 0xe8a <__divsf3_pse+0x3a>
     e7c:	e0 e8       	ldi	r30, 0x80	; 128
     e7e:	30 d0       	rcall	.+96     	; 0xee0 <__divsf3_pse+0x90>
     e80:	91 50       	subi	r25, 0x01	; 1
     e82:	50 40       	sbci	r21, 0x00	; 0
     e84:	e6 95       	lsr	r30
     e86:	00 1c       	adc	r0, r0
     e88:	ca f7       	brpl	.-14     	; 0xe7c <__divsf3_pse+0x2c>
     e8a:	29 d0       	rcall	.+82     	; 0xede <__divsf3_pse+0x8e>
     e8c:	fe 2f       	mov	r31, r30
     e8e:	27 d0       	rcall	.+78     	; 0xede <__divsf3_pse+0x8e>
     e90:	66 0f       	add	r22, r22
     e92:	77 1f       	adc	r23, r23
     e94:	88 1f       	adc	r24, r24
     e96:	bb 1f       	adc	r27, r27
     e98:	26 17       	cp	r18, r22
     e9a:	37 07       	cpc	r19, r23
     e9c:	48 07       	cpc	r20, r24
     e9e:	ab 07       	cpc	r26, r27
     ea0:	b0 e8       	ldi	r27, 0x80	; 128
     ea2:	09 f0       	breq	.+2      	; 0xea6 <__divsf3_pse+0x56>
     ea4:	bb 0b       	sbc	r27, r27
     ea6:	80 2d       	mov	r24, r0
     ea8:	bf 01       	movw	r22, r30
     eaa:	ff 27       	eor	r31, r31
     eac:	93 58       	subi	r25, 0x83	; 131
     eae:	5f 4f       	sbci	r21, 0xFF	; 255
     eb0:	2a f0       	brmi	.+10     	; 0xebc <__divsf3_pse+0x6c>
     eb2:	9e 3f       	cpi	r25, 0xFE	; 254
     eb4:	51 05       	cpc	r21, r1
     eb6:	68 f0       	brcs	.+26     	; 0xed2 <__divsf3_pse+0x82>
     eb8:	b6 c0       	rjmp	.+364    	; 0x1026 <__fp_inf>
     eba:	00 c1       	rjmp	.+512    	; 0x10bc <__fp_szero>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	ec f3       	brlt	.-6      	; 0xeba <__divsf3_pse+0x6a>
     ec0:	98 3e       	cpi	r25, 0xE8	; 232
     ec2:	dc f3       	brlt	.-10     	; 0xeba <__divsf3_pse+0x6a>
     ec4:	86 95       	lsr	r24
     ec6:	77 95       	ror	r23
     ec8:	67 95       	ror	r22
     eca:	b7 95       	ror	r27
     ecc:	f7 95       	ror	r31
     ece:	9f 5f       	subi	r25, 0xFF	; 255
     ed0:	c9 f7       	brne	.-14     	; 0xec4 <__divsf3_pse+0x74>
     ed2:	88 0f       	add	r24, r24
     ed4:	91 1d       	adc	r25, r1
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	97 f9       	bld	r25, 7
     edc:	08 95       	ret
     ede:	e1 e0       	ldi	r30, 0x01	; 1
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	bb 1f       	adc	r27, r27
     ee8:	62 17       	cp	r22, r18
     eea:	73 07       	cpc	r23, r19
     eec:	84 07       	cpc	r24, r20
     eee:	ba 07       	cpc	r27, r26
     ef0:	20 f0       	brcs	.+8      	; 0xefa <__divsf3_pse+0xaa>
     ef2:	62 1b       	sub	r22, r18
     ef4:	73 0b       	sbc	r23, r19
     ef6:	84 0b       	sbc	r24, r20
     ef8:	ba 0b       	sbc	r27, r26
     efa:	ee 1f       	adc	r30, r30
     efc:	88 f7       	brcc	.-30     	; 0xee0 <__divsf3_pse+0x90>
     efe:	e0 95       	com	r30
     f00:	08 95       	ret

00000f02 <__fixsfsi>:
     f02:	04 d0       	rcall	.+8      	; 0xf0c <__fixunssfsi>
     f04:	68 94       	set
     f06:	b1 11       	cpse	r27, r1
     f08:	d9 c0       	rjmp	.+434    	; 0x10bc <__fp_szero>
     f0a:	08 95       	ret

00000f0c <__fixunssfsi>:
     f0c:	bc d0       	rcall	.+376    	; 0x1086 <__fp_splitA>
     f0e:	88 f0       	brcs	.+34     	; 0xf32 <__fixunssfsi+0x26>
     f10:	9f 57       	subi	r25, 0x7F	; 127
     f12:	90 f0       	brcs	.+36     	; 0xf38 <__fixunssfsi+0x2c>
     f14:	b9 2f       	mov	r27, r25
     f16:	99 27       	eor	r25, r25
     f18:	b7 51       	subi	r27, 0x17	; 23
     f1a:	a0 f0       	brcs	.+40     	; 0xf44 <__fixunssfsi+0x38>
     f1c:	d1 f0       	breq	.+52     	; 0xf52 <__fixunssfsi+0x46>
     f1e:	66 0f       	add	r22, r22
     f20:	77 1f       	adc	r23, r23
     f22:	88 1f       	adc	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	1a f0       	brmi	.+6      	; 0xf2e <__fixunssfsi+0x22>
     f28:	ba 95       	dec	r27
     f2a:	c9 f7       	brne	.-14     	; 0xf1e <__fixunssfsi+0x12>
     f2c:	12 c0       	rjmp	.+36     	; 0xf52 <__fixunssfsi+0x46>
     f2e:	b1 30       	cpi	r27, 0x01	; 1
     f30:	81 f0       	breq	.+32     	; 0xf52 <__fixunssfsi+0x46>
     f32:	c3 d0       	rcall	.+390    	; 0x10ba <__fp_zero>
     f34:	b1 e0       	ldi	r27, 0x01	; 1
     f36:	08 95       	ret
     f38:	c0 c0       	rjmp	.+384    	; 0x10ba <__fp_zero>
     f3a:	67 2f       	mov	r22, r23
     f3c:	78 2f       	mov	r23, r24
     f3e:	88 27       	eor	r24, r24
     f40:	b8 5f       	subi	r27, 0xF8	; 248
     f42:	39 f0       	breq	.+14     	; 0xf52 <__fixunssfsi+0x46>
     f44:	b9 3f       	cpi	r27, 0xF9	; 249
     f46:	cc f3       	brlt	.-14     	; 0xf3a <__fixunssfsi+0x2e>
     f48:	86 95       	lsr	r24
     f4a:	77 95       	ror	r23
     f4c:	67 95       	ror	r22
     f4e:	b3 95       	inc	r27
     f50:	d9 f7       	brne	.-10     	; 0xf48 <__fixunssfsi+0x3c>
     f52:	3e f4       	brtc	.+14     	; 0xf62 <__fixunssfsi+0x56>
     f54:	90 95       	com	r25
     f56:	80 95       	com	r24
     f58:	70 95       	com	r23
     f5a:	61 95       	neg	r22
     f5c:	7f 4f       	sbci	r23, 0xFF	; 255
     f5e:	8f 4f       	sbci	r24, 0xFF	; 255
     f60:	9f 4f       	sbci	r25, 0xFF	; 255
     f62:	08 95       	ret

00000f64 <__floatunsisf>:
     f64:	e8 94       	clt
     f66:	09 c0       	rjmp	.+18     	; 0xf7a <__floatsisf+0x12>

00000f68 <__floatsisf>:
     f68:	97 fb       	bst	r25, 7
     f6a:	3e f4       	brtc	.+14     	; 0xf7a <__floatsisf+0x12>
     f6c:	90 95       	com	r25
     f6e:	80 95       	com	r24
     f70:	70 95       	com	r23
     f72:	61 95       	neg	r22
     f74:	7f 4f       	sbci	r23, 0xFF	; 255
     f76:	8f 4f       	sbci	r24, 0xFF	; 255
     f78:	9f 4f       	sbci	r25, 0xFF	; 255
     f7a:	99 23       	and	r25, r25
     f7c:	a9 f0       	breq	.+42     	; 0xfa8 <__floatsisf+0x40>
     f7e:	f9 2f       	mov	r31, r25
     f80:	96 e9       	ldi	r25, 0x96	; 150
     f82:	bb 27       	eor	r27, r27
     f84:	93 95       	inc	r25
     f86:	f6 95       	lsr	r31
     f88:	87 95       	ror	r24
     f8a:	77 95       	ror	r23
     f8c:	67 95       	ror	r22
     f8e:	b7 95       	ror	r27
     f90:	f1 11       	cpse	r31, r1
     f92:	f8 cf       	rjmp	.-16     	; 0xf84 <__floatsisf+0x1c>
     f94:	fa f4       	brpl	.+62     	; 0xfd4 <__floatsisf+0x6c>
     f96:	bb 0f       	add	r27, r27
     f98:	11 f4       	brne	.+4      	; 0xf9e <__floatsisf+0x36>
     f9a:	60 ff       	sbrs	r22, 0
     f9c:	1b c0       	rjmp	.+54     	; 0xfd4 <__floatsisf+0x6c>
     f9e:	6f 5f       	subi	r22, 0xFF	; 255
     fa0:	7f 4f       	sbci	r23, 0xFF	; 255
     fa2:	8f 4f       	sbci	r24, 0xFF	; 255
     fa4:	9f 4f       	sbci	r25, 0xFF	; 255
     fa6:	16 c0       	rjmp	.+44     	; 0xfd4 <__floatsisf+0x6c>
     fa8:	88 23       	and	r24, r24
     faa:	11 f0       	breq	.+4      	; 0xfb0 <__floatsisf+0x48>
     fac:	96 e9       	ldi	r25, 0x96	; 150
     fae:	11 c0       	rjmp	.+34     	; 0xfd2 <__floatsisf+0x6a>
     fb0:	77 23       	and	r23, r23
     fb2:	21 f0       	breq	.+8      	; 0xfbc <__floatsisf+0x54>
     fb4:	9e e8       	ldi	r25, 0x8E	; 142
     fb6:	87 2f       	mov	r24, r23
     fb8:	76 2f       	mov	r23, r22
     fba:	05 c0       	rjmp	.+10     	; 0xfc6 <__floatsisf+0x5e>
     fbc:	66 23       	and	r22, r22
     fbe:	71 f0       	breq	.+28     	; 0xfdc <__floatsisf+0x74>
     fc0:	96 e8       	ldi	r25, 0x86	; 134
     fc2:	86 2f       	mov	r24, r22
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	60 e0       	ldi	r22, 0x00	; 0
     fc8:	2a f0       	brmi	.+10     	; 0xfd4 <__floatsisf+0x6c>
     fca:	9a 95       	dec	r25
     fcc:	66 0f       	add	r22, r22
     fce:	77 1f       	adc	r23, r23
     fd0:	88 1f       	adc	r24, r24
     fd2:	da f7       	brpl	.-10     	; 0xfca <__floatsisf+0x62>
     fd4:	88 0f       	add	r24, r24
     fd6:	96 95       	lsr	r25
     fd8:	87 95       	ror	r24
     fda:	97 f9       	bld	r25, 7
     fdc:	08 95       	ret

00000fde <__fp_cmp>:
     fde:	99 0f       	add	r25, r25
     fe0:	00 08       	sbc	r0, r0
     fe2:	55 0f       	add	r21, r21
     fe4:	aa 0b       	sbc	r26, r26
     fe6:	e0 e8       	ldi	r30, 0x80	; 128
     fe8:	fe ef       	ldi	r31, 0xFE	; 254
     fea:	16 16       	cp	r1, r22
     fec:	17 06       	cpc	r1, r23
     fee:	e8 07       	cpc	r30, r24
     ff0:	f9 07       	cpc	r31, r25
     ff2:	c0 f0       	brcs	.+48     	; 0x1024 <__fp_cmp+0x46>
     ff4:	12 16       	cp	r1, r18
     ff6:	13 06       	cpc	r1, r19
     ff8:	e4 07       	cpc	r30, r20
     ffa:	f5 07       	cpc	r31, r21
     ffc:	98 f0       	brcs	.+38     	; 0x1024 <__fp_cmp+0x46>
     ffe:	62 1b       	sub	r22, r18
    1000:	73 0b       	sbc	r23, r19
    1002:	84 0b       	sbc	r24, r20
    1004:	95 0b       	sbc	r25, r21
    1006:	39 f4       	brne	.+14     	; 0x1016 <__fp_cmp+0x38>
    1008:	0a 26       	eor	r0, r26
    100a:	61 f0       	breq	.+24     	; 0x1024 <__fp_cmp+0x46>
    100c:	23 2b       	or	r18, r19
    100e:	24 2b       	or	r18, r20
    1010:	25 2b       	or	r18, r21
    1012:	21 f4       	brne	.+8      	; 0x101c <__fp_cmp+0x3e>
    1014:	08 95       	ret
    1016:	0a 26       	eor	r0, r26
    1018:	09 f4       	brne	.+2      	; 0x101c <__fp_cmp+0x3e>
    101a:	a1 40       	sbci	r26, 0x01	; 1
    101c:	a6 95       	lsr	r26
    101e:	8f ef       	ldi	r24, 0xFF	; 255
    1020:	81 1d       	adc	r24, r1
    1022:	81 1d       	adc	r24, r1
    1024:	08 95       	ret

00001026 <__fp_inf>:
    1026:	97 f9       	bld	r25, 7
    1028:	9f 67       	ori	r25, 0x7F	; 127
    102a:	80 e8       	ldi	r24, 0x80	; 128
    102c:	70 e0       	ldi	r23, 0x00	; 0
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	08 95       	ret

00001032 <__fp_nan>:
    1032:	9f ef       	ldi	r25, 0xFF	; 255
    1034:	80 ec       	ldi	r24, 0xC0	; 192
    1036:	08 95       	ret

00001038 <__fp_pscA>:
    1038:	00 24       	eor	r0, r0
    103a:	0a 94       	dec	r0
    103c:	16 16       	cp	r1, r22
    103e:	17 06       	cpc	r1, r23
    1040:	18 06       	cpc	r1, r24
    1042:	09 06       	cpc	r0, r25
    1044:	08 95       	ret

00001046 <__fp_pscB>:
    1046:	00 24       	eor	r0, r0
    1048:	0a 94       	dec	r0
    104a:	12 16       	cp	r1, r18
    104c:	13 06       	cpc	r1, r19
    104e:	14 06       	cpc	r1, r20
    1050:	05 06       	cpc	r0, r21
    1052:	08 95       	ret

00001054 <__fp_round>:
    1054:	09 2e       	mov	r0, r25
    1056:	03 94       	inc	r0
    1058:	00 0c       	add	r0, r0
    105a:	11 f4       	brne	.+4      	; 0x1060 <__fp_round+0xc>
    105c:	88 23       	and	r24, r24
    105e:	52 f0       	brmi	.+20     	; 0x1074 <__fp_round+0x20>
    1060:	bb 0f       	add	r27, r27
    1062:	40 f4       	brcc	.+16     	; 0x1074 <__fp_round+0x20>
    1064:	bf 2b       	or	r27, r31
    1066:	11 f4       	brne	.+4      	; 0x106c <__fp_round+0x18>
    1068:	60 ff       	sbrs	r22, 0
    106a:	04 c0       	rjmp	.+8      	; 0x1074 <__fp_round+0x20>
    106c:	6f 5f       	subi	r22, 0xFF	; 255
    106e:	7f 4f       	sbci	r23, 0xFF	; 255
    1070:	8f 4f       	sbci	r24, 0xFF	; 255
    1072:	9f 4f       	sbci	r25, 0xFF	; 255
    1074:	08 95       	ret

00001076 <__fp_split3>:
    1076:	57 fd       	sbrc	r21, 7
    1078:	90 58       	subi	r25, 0x80	; 128
    107a:	44 0f       	add	r20, r20
    107c:	55 1f       	adc	r21, r21
    107e:	59 f0       	breq	.+22     	; 0x1096 <__fp_splitA+0x10>
    1080:	5f 3f       	cpi	r21, 0xFF	; 255
    1082:	71 f0       	breq	.+28     	; 0x10a0 <__fp_splitA+0x1a>
    1084:	47 95       	ror	r20

00001086 <__fp_splitA>:
    1086:	88 0f       	add	r24, r24
    1088:	97 fb       	bst	r25, 7
    108a:	99 1f       	adc	r25, r25
    108c:	61 f0       	breq	.+24     	; 0x10a6 <__fp_splitA+0x20>
    108e:	9f 3f       	cpi	r25, 0xFF	; 255
    1090:	79 f0       	breq	.+30     	; 0x10b0 <__fp_splitA+0x2a>
    1092:	87 95       	ror	r24
    1094:	08 95       	ret
    1096:	12 16       	cp	r1, r18
    1098:	13 06       	cpc	r1, r19
    109a:	14 06       	cpc	r1, r20
    109c:	55 1f       	adc	r21, r21
    109e:	f2 cf       	rjmp	.-28     	; 0x1084 <__fp_split3+0xe>
    10a0:	46 95       	lsr	r20
    10a2:	f1 df       	rcall	.-30     	; 0x1086 <__fp_splitA>
    10a4:	08 c0       	rjmp	.+16     	; 0x10b6 <__fp_splitA+0x30>
    10a6:	16 16       	cp	r1, r22
    10a8:	17 06       	cpc	r1, r23
    10aa:	18 06       	cpc	r1, r24
    10ac:	99 1f       	adc	r25, r25
    10ae:	f1 cf       	rjmp	.-30     	; 0x1092 <__fp_splitA+0xc>
    10b0:	86 95       	lsr	r24
    10b2:	71 05       	cpc	r23, r1
    10b4:	61 05       	cpc	r22, r1
    10b6:	08 94       	sec
    10b8:	08 95       	ret

000010ba <__fp_zero>:
    10ba:	e8 94       	clt

000010bc <__fp_szero>:
    10bc:	bb 27       	eor	r27, r27
    10be:	66 27       	eor	r22, r22
    10c0:	77 27       	eor	r23, r23
    10c2:	cb 01       	movw	r24, r22
    10c4:	97 f9       	bld	r25, 7
    10c6:	08 95       	ret

000010c8 <__gesf2>:
    10c8:	8a df       	rcall	.-236    	; 0xfde <__fp_cmp>
    10ca:	08 f4       	brcc	.+2      	; 0x10ce <__gesf2+0x6>
    10cc:	8f ef       	ldi	r24, 0xFF	; 255
    10ce:	08 95       	ret

000010d0 <__mulsf3>:
    10d0:	0b d0       	rcall	.+22     	; 0x10e8 <__mulsf3x>
    10d2:	c0 cf       	rjmp	.-128    	; 0x1054 <__fp_round>
    10d4:	b1 df       	rcall	.-158    	; 0x1038 <__fp_pscA>
    10d6:	28 f0       	brcs	.+10     	; 0x10e2 <__mulsf3+0x12>
    10d8:	b6 df       	rcall	.-148    	; 0x1046 <__fp_pscB>
    10da:	18 f0       	brcs	.+6      	; 0x10e2 <__mulsf3+0x12>
    10dc:	95 23       	and	r25, r21
    10de:	09 f0       	breq	.+2      	; 0x10e2 <__mulsf3+0x12>
    10e0:	a2 cf       	rjmp	.-188    	; 0x1026 <__fp_inf>
    10e2:	a7 cf       	rjmp	.-178    	; 0x1032 <__fp_nan>
    10e4:	11 24       	eor	r1, r1
    10e6:	ea cf       	rjmp	.-44     	; 0x10bc <__fp_szero>

000010e8 <__mulsf3x>:
    10e8:	c6 df       	rcall	.-116    	; 0x1076 <__fp_split3>
    10ea:	a0 f3       	brcs	.-24     	; 0x10d4 <__mulsf3+0x4>

000010ec <__mulsf3_pse>:
    10ec:	95 9f       	mul	r25, r21
    10ee:	d1 f3       	breq	.-12     	; 0x10e4 <__mulsf3+0x14>
    10f0:	95 0f       	add	r25, r21
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	55 1f       	adc	r21, r21
    10f6:	62 9f       	mul	r22, r18
    10f8:	f0 01       	movw	r30, r0
    10fa:	72 9f       	mul	r23, r18
    10fc:	bb 27       	eor	r27, r27
    10fe:	f0 0d       	add	r31, r0
    1100:	b1 1d       	adc	r27, r1
    1102:	63 9f       	mul	r22, r19
    1104:	aa 27       	eor	r26, r26
    1106:	f0 0d       	add	r31, r0
    1108:	b1 1d       	adc	r27, r1
    110a:	aa 1f       	adc	r26, r26
    110c:	64 9f       	mul	r22, r20
    110e:	66 27       	eor	r22, r22
    1110:	b0 0d       	add	r27, r0
    1112:	a1 1d       	adc	r26, r1
    1114:	66 1f       	adc	r22, r22
    1116:	82 9f       	mul	r24, r18
    1118:	22 27       	eor	r18, r18
    111a:	b0 0d       	add	r27, r0
    111c:	a1 1d       	adc	r26, r1
    111e:	62 1f       	adc	r22, r18
    1120:	73 9f       	mul	r23, r19
    1122:	b0 0d       	add	r27, r0
    1124:	a1 1d       	adc	r26, r1
    1126:	62 1f       	adc	r22, r18
    1128:	83 9f       	mul	r24, r19
    112a:	a0 0d       	add	r26, r0
    112c:	61 1d       	adc	r22, r1
    112e:	22 1f       	adc	r18, r18
    1130:	74 9f       	mul	r23, r20
    1132:	33 27       	eor	r19, r19
    1134:	a0 0d       	add	r26, r0
    1136:	61 1d       	adc	r22, r1
    1138:	23 1f       	adc	r18, r19
    113a:	84 9f       	mul	r24, r20
    113c:	60 0d       	add	r22, r0
    113e:	21 1d       	adc	r18, r1
    1140:	82 2f       	mov	r24, r18
    1142:	76 2f       	mov	r23, r22
    1144:	6a 2f       	mov	r22, r26
    1146:	11 24       	eor	r1, r1
    1148:	9f 57       	subi	r25, 0x7F	; 127
    114a:	50 40       	sbci	r21, 0x00	; 0
    114c:	8a f0       	brmi	.+34     	; 0x1170 <__mulsf3_pse+0x84>
    114e:	e1 f0       	breq	.+56     	; 0x1188 <__mulsf3_pse+0x9c>
    1150:	88 23       	and	r24, r24
    1152:	4a f0       	brmi	.+18     	; 0x1166 <__mulsf3_pse+0x7a>
    1154:	ee 0f       	add	r30, r30
    1156:	ff 1f       	adc	r31, r31
    1158:	bb 1f       	adc	r27, r27
    115a:	66 1f       	adc	r22, r22
    115c:	77 1f       	adc	r23, r23
    115e:	88 1f       	adc	r24, r24
    1160:	91 50       	subi	r25, 0x01	; 1
    1162:	50 40       	sbci	r21, 0x00	; 0
    1164:	a9 f7       	brne	.-22     	; 0x1150 <__mulsf3_pse+0x64>
    1166:	9e 3f       	cpi	r25, 0xFE	; 254
    1168:	51 05       	cpc	r21, r1
    116a:	70 f0       	brcs	.+28     	; 0x1188 <__mulsf3_pse+0x9c>
    116c:	5c cf       	rjmp	.-328    	; 0x1026 <__fp_inf>
    116e:	a6 cf       	rjmp	.-180    	; 0x10bc <__fp_szero>
    1170:	5f 3f       	cpi	r21, 0xFF	; 255
    1172:	ec f3       	brlt	.-6      	; 0x116e <__mulsf3_pse+0x82>
    1174:	98 3e       	cpi	r25, 0xE8	; 232
    1176:	dc f3       	brlt	.-10     	; 0x116e <__mulsf3_pse+0x82>
    1178:	86 95       	lsr	r24
    117a:	77 95       	ror	r23
    117c:	67 95       	ror	r22
    117e:	b7 95       	ror	r27
    1180:	f7 95       	ror	r31
    1182:	e7 95       	ror	r30
    1184:	9f 5f       	subi	r25, 0xFF	; 255
    1186:	c1 f7       	brne	.-16     	; 0x1178 <__mulsf3_pse+0x8c>
    1188:	fe 2b       	or	r31, r30
    118a:	88 0f       	add	r24, r24
    118c:	91 1d       	adc	r25, r1
    118e:	96 95       	lsr	r25
    1190:	87 95       	ror	r24
    1192:	97 f9       	bld	r25, 7
    1194:	08 95       	ret

00001196 <itoa>:
    1196:	fb 01       	movw	r30, r22
    1198:	9f 01       	movw	r18, r30
    119a:	e8 94       	clt
    119c:	42 30       	cpi	r20, 0x02	; 2
    119e:	bc f0       	brlt	.+46     	; 0x11ce <itoa+0x38>
    11a0:	45 32       	cpi	r20, 0x25	; 37
    11a2:	ac f4       	brge	.+42     	; 0x11ce <itoa+0x38>
    11a4:	4a 30       	cpi	r20, 0x0A	; 10
    11a6:	29 f4       	brne	.+10     	; 0x11b2 <itoa+0x1c>
    11a8:	97 fb       	bst	r25, 7
    11aa:	1e f4       	brtc	.+6      	; 0x11b2 <itoa+0x1c>
    11ac:	90 95       	com	r25
    11ae:	81 95       	neg	r24
    11b0:	9f 4f       	sbci	r25, 0xFF	; 255
    11b2:	64 2f       	mov	r22, r20
    11b4:	77 27       	eor	r23, r23
    11b6:	1e d0       	rcall	.+60     	; 0x11f4 <__udivmodhi4>
    11b8:	80 5d       	subi	r24, 0xD0	; 208
    11ba:	8a 33       	cpi	r24, 0x3A	; 58
    11bc:	0c f0       	brlt	.+2      	; 0x11c0 <itoa+0x2a>
    11be:	89 5d       	subi	r24, 0xD9	; 217
    11c0:	81 93       	st	Z+, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	00 97       	sbiw	r24, 0x00	; 0
    11c6:	a9 f7       	brne	.-22     	; 0x11b2 <itoa+0x1c>
    11c8:	16 f4       	brtc	.+4      	; 0x11ce <itoa+0x38>
    11ca:	5d e2       	ldi	r21, 0x2D	; 45
    11cc:	51 93       	st	Z+, r21
    11ce:	10 82       	st	Z, r1
    11d0:	c9 01       	movw	r24, r18
    11d2:	00 c0       	rjmp	.+0      	; 0x11d4 <strrev>

000011d4 <strrev>:
    11d4:	dc 01       	movw	r26, r24
    11d6:	fc 01       	movw	r30, r24
    11d8:	67 2f       	mov	r22, r23
    11da:	71 91       	ld	r23, Z+
    11dc:	77 23       	and	r23, r23
    11de:	e1 f7       	brne	.-8      	; 0x11d8 <strrev+0x4>
    11e0:	32 97       	sbiw	r30, 0x02	; 2
    11e2:	04 c0       	rjmp	.+8      	; 0x11ec <strrev+0x18>
    11e4:	7c 91       	ld	r23, X
    11e6:	6d 93       	st	X+, r22
    11e8:	70 83       	st	Z, r23
    11ea:	62 91       	ld	r22, -Z
    11ec:	ae 17       	cp	r26, r30
    11ee:	bf 07       	cpc	r27, r31
    11f0:	c8 f3       	brcs	.-14     	; 0x11e4 <strrev+0x10>
    11f2:	08 95       	ret

000011f4 <__udivmodhi4>:
    11f4:	aa 1b       	sub	r26, r26
    11f6:	bb 1b       	sub	r27, r27
    11f8:	51 e1       	ldi	r21, 0x11	; 17
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <__udivmodhi4_ep>

000011fc <__udivmodhi4_loop>:
    11fc:	aa 1f       	adc	r26, r26
    11fe:	bb 1f       	adc	r27, r27
    1200:	a6 17       	cp	r26, r22
    1202:	b7 07       	cpc	r27, r23
    1204:	10 f0       	brcs	.+4      	; 0x120a <__udivmodhi4_ep>
    1206:	a6 1b       	sub	r26, r22
    1208:	b7 0b       	sbc	r27, r23

0000120a <__udivmodhi4_ep>:
    120a:	88 1f       	adc	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	5a 95       	dec	r21
    1210:	a9 f7       	brne	.-22     	; 0x11fc <__udivmodhi4_loop>
    1212:	80 95       	com	r24
    1214:	90 95       	com	r25
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	08 95       	ret

0000121c <_exit>:
    121c:	f8 94       	cli

0000121e <__stop_program>:
    121e:	ff cf       	rjmp	.-2      	; 0x121e <__stop_program>
