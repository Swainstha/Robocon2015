
hybridInterfaceLCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000006ae  00800100  00003414  000034a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003414  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  008007ae  008007ae  00003b56  2**0
                  ALLOC
  3 .stab         00001f08  00000000  00000000  00003b58  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000853  00000000  00000000  00005a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000062b3  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001b8  00000000  00000000  000062e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032f5  00000000  00000000  0000649a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003d8  00000000  00000000  0000978f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ffb  00000000  00000000  00009b67  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000098c  00000000  00000000  0000ab64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c4a  00000000  00000000  0000b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002f17  00000000  00000000  0000c13a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000001c0  00000000  00000000  0000f051  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4c 00 	jmp	0x98	; 0x98 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 43 03 	jmp	0x686	; 0x686 <__vector_14>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	e4 17       	cp	r30, r20
      6a:	28 18       	sub	r2, r8
      6c:	e7 17       	cp	r30, r23
      6e:	ea 17       	cp	r30, r26
      70:	ed 17       	cp	r30, r29
      72:	f0 17       	cp	r31, r16
      74:	f3 17       	cp	r31, r19
      76:	f6 17       	cp	r31, r22
      78:	ff 17       	cp	r31, r31
      7a:	f9 17       	cp	r31, r25
      7c:	fc 17       	cp	r31, r28
      7e:	02 18       	sub	r0, r2
      80:	05 18       	sub	r0, r5
      82:	08 18       	sub	r0, r8
      84:	0b 18       	sub	r0, r11
      86:	1a 18       	sub	r1, r10
      88:	17 18       	sub	r1, r7
      8a:	23 18       	sub	r2, r3
      8c:	20 18       	sub	r2, r0
      8e:	1d 18       	sub	r1, r13
      90:	0e 18       	sub	r0, r14
      92:	11 18       	sub	r1, r1
      94:	14 18       	sub	r1, r4
      96:	26 18       	sub	r2, r6

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	d8 e0       	ldi	r29, 0x08	; 8
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
      a4:	17 e0       	ldi	r17, 0x07	; 7
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	b1 e0       	ldi	r27, 0x01	; 1
      aa:	e4 e1       	ldi	r30, 0x14	; 20
      ac:	f4 e3       	ldi	r31, 0x34	; 52
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x10>
      b0:	05 90       	lpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	ae 3a       	cpi	r26, 0xAE	; 174
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0xc>

000000ba <__do_clear_bss>:
      ba:	27 e0       	ldi	r18, 0x07	; 7
      bc:	ae ea       	ldi	r26, 0xAE	; 174
      be:	b7 e0       	ldi	r27, 0x07	; 7
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	af 3f       	cpi	r26, 0xFF	; 255
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	0e 94 90 17 	call	0x2f20	; 0x2f20 <main>
      ce:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <_ZL9lcd_writeh>:
    }
	
    lcd_putch((bcd4)?(chex[bcd4]):' ');    
    lcd_putch((!bcd4 && bcd<0x1000)	?' ':(pgm_read_byte(&chex[bcd>>12])));
    lcd_putch((!bcd4 && bcd<0x100)	?' ':(pgm_read_byte(&chex[(bcd>>8)&0x000F])));
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
      d6:	95 ed       	ldi	r25, 0xD5	; 213
      d8:	9a 95       	dec	r25
      da:	f1 f7       	brne	.-4      	; 0xd8 <_ZL9lcd_writeh+0x2>
      dc:	00 00       	nop
      de:	88 23       	and	r24, r24
      e0:	14 f4       	brge	.+4      	; 0xe6 <_ZL9lcd_writeh+0x10>
      e2:	40 9a       	sbi	0x08, 0	; 8
      e4:	01 c0       	rjmp	.+2      	; 0xe8 <_ZL9lcd_writeh+0x12>
      e6:	40 98       	cbi	0x08, 0	; 8
      e8:	86 ff       	sbrs	r24, 6
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <_ZL9lcd_writeh+0x1a>
      ec:	41 9a       	sbi	0x08, 1	; 8
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <_ZL9lcd_writeh+0x1c>
      f0:	41 98       	cbi	0x08, 1	; 8
      f2:	85 ff       	sbrs	r24, 5
      f4:	02 c0       	rjmp	.+4      	; 0xfa <_ZL9lcd_writeh+0x24>
      f6:	42 9a       	sbi	0x08, 2	; 8
      f8:	01 c0       	rjmp	.+2      	; 0xfc <_ZL9lcd_writeh+0x26>
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));	
      fa:	42 98       	cbi	0x08, 2	; 8
      fc:	84 ff       	sbrs	r24, 4
      fe:	02 c0       	rjmp	.+4      	; 0x104 <_ZL9lcd_writeh+0x2e>
     100:	43 9a       	sbi	0x08, 3	; 8
     102:	01 c0       	rjmp	.+2      	; 0x106 <_ZL9lcd_writeh+0x30>
     104:	43 98       	cbi	0x08, 3	; 8
     106:	44 9a       	sbi	0x08, 4	; 8
     108:	44 98       	cbi	0x08, 4	; 8
     10a:	83 ff       	sbrs	r24, 3
        bcd4 += ((bcd&0x8000)?1:0);
        bcd <<= 1;
        bcd += ((num&(1<<(i-1)))?1:0);
    }
	
    lcd_putch((bcd4)?(chex[bcd4]):' ');    
     10c:	02 c0       	rjmp	.+4      	; 0x112 <_ZL9lcd_writeh+0x3c>
     10e:	40 9a       	sbi	0x08, 0	; 8
     110:	01 c0       	rjmp	.+2      	; 0x114 <_ZL9lcd_writeh+0x3e>
    lcd_putch((!bcd4 && bcd<0x1000)	?' ':(pgm_read_byte(&chex[bcd>>12])));
     112:	40 98       	cbi	0x08, 0	; 8
     114:	82 ff       	sbrs	r24, 2
     116:	02 c0       	rjmp	.+4      	; 0x11c <_ZL9lcd_writeh+0x46>
     118:	41 9a       	sbi	0x08, 1	; 8
     11a:	01 c0       	rjmp	.+2      	; 0x11e <_ZL9lcd_writeh+0x48>
     11c:	41 98       	cbi	0x08, 1	; 8
     11e:	81 ff       	sbrs	r24, 1
     120:	02 c0       	rjmp	.+4      	; 0x126 <_ZL9lcd_writeh+0x50>
     122:	42 9a       	sbi	0x08, 2	; 8
    lcd_putch((!bcd4 && bcd<0x100)	?' ':(pgm_read_byte(&chex[(bcd>>8)&0x000F])));
     124:	01 c0       	rjmp	.+2      	; 0x128 <_ZL9lcd_writeh+0x52>
     126:	42 98       	cbi	0x08, 2	; 8
     128:	80 ff       	sbrs	r24, 0
     12a:	02 c0       	rjmp	.+4      	; 0x130 <_ZL9lcd_writeh+0x5a>
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));	
}	
     12c:	43 9a       	sbi	0x08, 3	; 8
     12e:	01 c0       	rjmp	.+2      	; 0x132 <_ZL9lcd_writeh+0x5c>
     130:	43 98       	cbi	0x08, 3	; 8
     132:	44 9a       	sbi	0x08, 4	; 8
	if(c & 0x01)
		LCD_D4_PORT |=  (1 << LCD_D4_PIN);
	else
		LCD_D4_PORT &= ~(1 << LCD_D4_PIN);
	
	LCD_STROBE();
     134:	44 98       	cbi	0x08, 4	; 8
     136:	08 95       	ret

00000138 <_Z9lcd_clearv>:
 * 	Clear and home the LCD
 */

void lcd_clear(void)
{
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
     138:	45 98       	cbi	0x08, 5	; 8
	lcd_write(1<<LCD_CLR);
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     140:	8f e3       	ldi	r24, 0x3F	; 63
     142:	9f e1       	ldi	r25, 0x1F	; 31
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	f1 f7       	brne	.-4      	; 0x144 <_Z9lcd_clearv+0xc>
     148:	00 c0       	rjmp	.+0      	; 0x14a <_Z9lcd_clearv+0x12>
     14a:	00 00       	nop
     14c:	08 95       	ret

0000014e <_Z8lcd_putsPKc>:
}

/* write a string of chars to the LCD */

void lcd_puts(const char * s)
{
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	ec 01       	movw	r28, r24
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
     154:	45 9a       	sbi	0x08, 5	; 8
	while(*s)
     156:	88 81       	ld	r24, Y
     158:	88 23       	and	r24, r24
     15a:	31 f0       	breq	.+12     	; 0x168 <_Z8lcd_putsPKc+0x1a>
	_delay_ms(2);
}

/* write a string of chars to the LCD */

void lcd_puts(const char * s)
     15c:	21 96       	adiw	r28, 0x01	; 1
{
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
	while(*s)
		lcd_write(*s++);
     15e:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
/* write a string of chars to the LCD */

void lcd_puts(const char * s)
{
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
	while(*s)
     162:	89 91       	ld	r24, Y+
     164:	81 11       	cpse	r24, r1
     166:	fb cf       	rjmp	.-10     	; 0x15e <_Z8lcd_putsPKc+0x10>
		lcd_write(*s++);
}
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <_Z9lcd_putchc>:
}
/* write one character to the LCD */

void lcd_putch(char c)
{
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
     16e:	45 9a       	sbi	0x08, 5	; 8
	lcd_write( c );
     170:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
     174:	08 95       	ret

00000176 <_Z10lcd_gotoxyhh>:
	lcd_write(0x80|pos);
}
	
void lcd_gotoxy(uint8_t x, uint8_t y)
{
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
     176:	45 98       	cbi	0x08, 5	; 8
	lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1+x);
	else
	lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2+x);
	#endif
	#if LCD_LINES==4
	if ( y==0 )
     178:	61 11       	cpse	r22, r1
     17a:	04 c0       	rjmp	.+8      	; 0x184 <_Z10lcd_gotoxyhh+0xe>
	lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1+x);
     17c:	80 58       	subi	r24, 0x80	; 128
     17e:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
     182:	08 95       	ret
	else if ( y==1)
     184:	61 30       	cpi	r22, 0x01	; 1
     186:	21 f4       	brne	.+8      	; 0x190 <_Z10lcd_gotoxyhh+0x1a>
	lcd_write((1<<LCD_DDRAM)+LCD_START_LINE2+x);
     188:	80 54       	subi	r24, 0x40	; 64
     18a:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
     18e:	08 95       	ret
	else if ( y==2)
     190:	62 30       	cpi	r22, 0x02	; 2
     192:	21 f4       	brne	.+8      	; 0x19c <_Z10lcd_gotoxyhh+0x26>
	lcd_write((1<<LCD_DDRAM)+LCD_START_LINE3+x);
     194:	8c 56       	subi	r24, 0x6C	; 108
     196:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
     19a:	08 95       	ret
	else /* y==3 */
	lcd_write((1<<LCD_DDRAM)+LCD_START_LINE4+x);
     19c:	8c 52       	subi	r24, 0x2C	; 44
     19e:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
     1a2:	08 95       	ret

000001a4 <_Z8lcd_initv>:
	}/* lcd_gotoxy */


void lcd_init()
{
	DDR(LCD_RS_PORT) |= (1 << LCD_RS_PIN);
     1a4:	3d 9a       	sbi	0x07, 5	; 7
	DDR(LCD_EN_PORT) |= (1 << LCD_EN_PIN);
     1a6:	3c 9a       	sbi	0x07, 4	; 7
	
	DDR(LCD_D7_PORT) |= (1 << LCD_D7_PIN);
     1a8:	38 9a       	sbi	0x07, 0	; 7
	DDR(LCD_D6_PORT) |= (1 << LCD_D6_PIN);
     1aa:	39 9a       	sbi	0x07, 1	; 7
	DDR(LCD_D5_PORT) |= (1 << LCD_D5_PIN);
     1ac:	3a 9a       	sbi	0x07, 2	; 7
	DDR(LCD_D4_PORT) |= (1 << LCD_D4_PIN);
     1ae:	3b 9a       	sbi	0x07, 3	; 7
	
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
     1b0:	45 98       	cbi	0x08, 5	; 8
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);
     1b2:	44 98       	cbi	0x08, 4	; 8
     1b4:	8f e5       	ldi	r24, 0x5F	; 95
     1b6:	9a ee       	ldi	r25, 0xEA	; 234
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <_Z8lcd_initv+0x14>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <_Z8lcd_initv+0x1a>
     1be:	00 00       	nop
	
	_delay_ms(15);	// wait 15mSec after power applied,

	LCD_D4_PORT |= (1 << LCD_D4_PIN);//0x3 & 0x01;				//bit0 000X
     1c0:	43 9a       	sbi	0x08, 3	; 8
	LCD_D5_PORT |= (1 << LCD_D5_PIN);//(0x3>>1) & 0x01;		//bit1 00XY -> 000X
     1c2:	42 9a       	sbi	0x08, 2	; 8
	LCD_D6_PORT &= ~(1 << LCD_D6_PIN);//(0x3>>2) & 0x01;		//bit2 0XYZ -> 000X
     1c4:	41 98       	cbi	0x08, 1	; 8
	LCD_D7_PORT &= ~(1 << LCD_D7_PIN);//(0x3>>3) & 0x01;		//bit3 XYZW -> 000X
     1c6:	40 98       	cbi	0x08, 0	; 8
	
	LCD_STROBE();
     1c8:	44 9a       	sbi	0x08, 4	; 8
     1ca:	44 98       	cbi	0x08, 4	; 8
     1cc:	8f e1       	ldi	r24, 0x1F	; 31
     1ce:	9e e4       	ldi	r25, 0x4E	; 78
     1d0:	01 97       	sbiw	r24, 0x01	; 1
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z8lcd_initv+0x2c>
     1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z8lcd_initv+0x32>
     1d6:	00 00       	nop
	_delay_ms(5);
	LCD_STROBE();
     1d8:	44 9a       	sbi	0x08, 4	; 8
     1da:	44 98       	cbi	0x08, 4	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1dc:	8f e1       	ldi	r24, 0x1F	; 31
     1de:	93 e0       	ldi	r25, 0x03	; 3
     1e0:	01 97       	sbiw	r24, 0x01	; 1
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <_Z8lcd_initv+0x3c>
     1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <_Z8lcd_initv+0x42>
     1e6:	00 00       	nop
	_delay_us(200);
	LCD_STROBE();
     1e8:	44 9a       	sbi	0x08, 4	; 8
     1ea:	44 98       	cbi	0x08, 4	; 8
     1ec:	8f e1       	ldi	r24, 0x1F	; 31
     1ee:	93 e0       	ldi	r25, 0x03	; 3
     1f0:	01 97       	sbiw	r24, 0x01	; 1
     1f2:	f1 f7       	brne	.-4      	; 0x1f0 <_Z8lcd_initv+0x4c>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <_Z8lcd_initv+0x52>
     1f6:	00 00       	nop
	_delay_us(200);
	
	// Four bit mode 
	LCD_D4_PORT &= ~(1 << LCD_D4_PIN);	//2 & 0x01
     1f8:	43 98       	cbi	0x08, 3	; 8
	LCD_D5_PORT |=  (1 << LCD_D5_PIN);	//(2>>1) & 0x01
     1fa:	42 9a       	sbi	0x08, 2	; 8
	LCD_D6_PORT &= ~(1 << LCD_D6_PIN);	//(2>>2) & 0x01
     1fc:	41 98       	cbi	0x08, 1	; 8
	LCD_D7_PORT &= ~(1 << LCD_D7_PIN);	//(2>>3) & 0x01
     1fe:	40 98       	cbi	0x08, 0	; 8
	
	LCD_STROBE();
     200:	44 9a       	sbi	0x08, 4	; 8
     202:	44 98       	cbi	0x08, 4	; 8

	lcd_write(0x28);		// Set interface length: nibblemode, 2line, 5x7dot
     204:	88 e2       	ldi	r24, 0x28	; 40
     206:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
	lcd_write(0b00001100);	// Display On, Cursor Off, Cursor Blink off
     20a:	8c e0       	ldi	r24, 0x0C	; 12
     20c:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
	lcd_clear();			// Clear screen
     210:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
	lcd_write(0x6);			// Set entry Mode : increment, displayShiftOff
     214:	86 e0       	ldi	r24, 0x06	; 6
     216:	0e 94 6b 00 	call	0xd6	; 0xd6 <_ZL9lcd_writeh>
     21a:	08 95       	ret

0000021c <_Z7lcd_numii>:
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));	
}	

void lcd_num( int num, int radix )
{
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	00 d0       	rcall	.+0      	; 0x222 <_Z7lcd_numii+0x6>
     222:	00 d0       	rcall	.+0      	; 0x224 <_Z7lcd_numii+0x8>
     224:	00 d0       	rcall	.+0      	; 0x226 <_Z7lcd_numii+0xa>
     226:	cd b7       	in	r28, 0x3d	; 61
     228:	de b7       	in	r29, 0x3e	; 62
     22a:	ab 01       	movw	r20, r22
	char str[6];
	itoa( num, str, radix );
     22c:	be 01       	movw	r22, r28
     22e:	6f 5f       	subi	r22, 0xFF	; 255
     230:	7f 4f       	sbci	r23, 0xFF	; 255
     232:	0e 94 c3 19 	call	0x3386	; 0x3386 <itoa>
	lcd_puts( str );
     236:	ce 01       	movw	r24, r28
     238:	01 96       	adiw	r24, 0x01	; 1
     23a:	0e 94 a7 00 	call	0x14e	; 0x14e <_Z8lcd_putsPKc>
}
     23e:	26 96       	adiw	r28, 0x06	; 6
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <_Z6PrintfhPcz>:


void Printf(unsigned char linenumber, char *fmt,... )
{
     250:	4f 92       	push	r4
     252:	5f 92       	push	r5
     254:	6f 92       	push	r6
     256:	7f 92       	push	r7
     258:	af 92       	push	r10
     25a:	bf 92       	push	r11
     25c:	cf 92       	push	r12
     25e:	df 92       	push	r13
     260:	ef 92       	push	r14
     262:	ff 92       	push	r15
     264:	0f 93       	push	r16
     266:	1f 93       	push	r17
     268:	cf 93       	push	r28
     26a:	df 93       	push	r29
     26c:	cd b7       	in	r28, 0x3d	; 61
     26e:	de b7       	in	r29, 0x3e	; 62
     270:	89 89       	ldd	r24, Y+17	; 0x11
     272:	ea 88       	ldd	r14, Y+18	; 0x12
     274:	fb 88       	ldd	r15, Y+19	; 0x13
	if(linenumber==1)
     276:	81 30       	cpi	r24, 0x01	; 1
     278:	29 f4       	brne	.+10     	; 0x284 <_Z6PrintfhPcz+0x34>
	{
		lcd_gotoxy(0,0);
     27a:	60 e0       	ldi	r22, 0x00	; 0
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 bb 00 	call	0x176	; 0x176 <_Z10lcd_gotoxyhh>
     282:	14 c0       	rjmp	.+40     	; 0x2ac <_Z6PrintfhPcz+0x5c>
	}
	else if(linenumber==2)
     284:	82 30       	cpi	r24, 0x02	; 2
     286:	29 f4       	brne	.+10     	; 0x292 <_Z6PrintfhPcz+0x42>
	{
		lcd_gotoxy(0,1);
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	0e 94 bb 00 	call	0x176	; 0x176 <_Z10lcd_gotoxyhh>
     290:	0d c0       	rjmp	.+26     	; 0x2ac <_Z6PrintfhPcz+0x5c>
	}
	else if(linenumber==3)
     292:	83 30       	cpi	r24, 0x03	; 3
     294:	29 f4       	brne	.+10     	; 0x2a0 <_Z6PrintfhPcz+0x50>
	{
		lcd_gotoxy(0,2);
     296:	62 e0       	ldi	r22, 0x02	; 2
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	0e 94 bb 00 	call	0x176	; 0x176 <_Z10lcd_gotoxyhh>
     29e:	06 c0       	rjmp	.+12     	; 0x2ac <_Z6PrintfhPcz+0x5c>
	}
	else if(linenumber==4)
     2a0:	84 30       	cpi	r24, 0x04	; 4
     2a2:	21 f4       	brne	.+8      	; 0x2ac <_Z6PrintfhPcz+0x5c>
	{
		lcd_gotoxy(0,3);
     2a4:	63 e0       	ldi	r22, 0x03	; 3
     2a6:	80 e0       	ldi	r24, 0x00	; 0
     2a8:	0e 94 bb 00 	call	0x176	; 0x176 <_Z10lcd_gotoxyhh>
	}
	va_list aptr;
	char *p, *sval;
	int ival;
	float fval;
	va_start( aptr, fmt );
     2ac:	6e 01       	movw	r12, r28
     2ae:	84 e1       	ldi	r24, 0x14	; 20
     2b0:	c8 0e       	add	r12, r24
     2b2:	d1 1c       	adc	r13, r1
	
	for( p=fmt; *p ; ++p )
     2b4:	f7 01       	movw	r30, r14
     2b6:	80 81       	ld	r24, Z
     2b8:	88 23       	and	r24, r24
     2ba:	09 f4       	brne	.+2      	; 0x2be <_Z6PrintfhPcz+0x6e>
     2bc:	bc c0       	rjmp	.+376    	; 0x436 <_Z6PrintfhPcz+0x1e6>
	if( *p=='%' )
     2be:	85 32       	cpi	r24, 0x25	; 37
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <_Z6PrintfhPcz+0x74>
     2c2:	9f c0       	rjmp	.+318    	; 0x402 <_Z6PrintfhPcz+0x1b2>
	switch( * ++p )
     2c4:	87 01       	movw	r16, r14
     2c6:	0f 5f       	subi	r16, 0xFF	; 255
     2c8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ca:	f7 01       	movw	r30, r14
     2cc:	81 81       	ldd	r24, Z+1	; 0x01
     2ce:	86 36       	cpi	r24, 0x66	; 102
     2d0:	09 f4       	brne	.+2      	; 0x2d4 <_Z6PrintfhPcz+0x84>
     2d2:	4d c0       	rjmp	.+154    	; 0x36e <_Z6PrintfhPcz+0x11e>
     2d4:	30 f4       	brcc	.+12     	; 0x2e2 <_Z6PrintfhPcz+0x92>
     2d6:	82 36       	cpi	r24, 0x62	; 98
     2d8:	61 f0       	breq	.+24     	; 0x2f2 <_Z6PrintfhPcz+0xa2>
     2da:	84 36       	cpi	r24, 0x64	; 100
     2dc:	09 f0       	breq	.+2      	; 0x2e0 <_Z6PrintfhPcz+0x90>
     2de:	8e c0       	rjmp	.+284    	; 0x3fc <_Z6PrintfhPcz+0x1ac>
     2e0:	22 c0       	rjmp	.+68     	; 0x326 <_Z6PrintfhPcz+0xd6>
     2e2:	83 37       	cpi	r24, 0x73	; 115
     2e4:	69 f1       	breq	.+90     	; 0x340 <_Z6PrintfhPcz+0xf0>
     2e6:	88 37       	cpi	r24, 0x78	; 120
     2e8:	89 f0       	breq	.+34     	; 0x30c <_Z6PrintfhPcz+0xbc>
     2ea:	8f 36       	cpi	r24, 0x6F	; 111
     2ec:	09 f0       	breq	.+2      	; 0x2f0 <_Z6PrintfhPcz+0xa0>
     2ee:	86 c0       	rjmp	.+268    	; 0x3fc <_Z6PrintfhPcz+0x1ac>
     2f0:	78 c0       	rjmp	.+240    	; 0x3e2 <_Z6PrintfhPcz+0x192>
	{
		case 'b':
		ival = va_arg( aptr, int );
     2f2:	76 01       	movw	r14, r12
     2f4:	f2 e0       	ldi	r31, 0x02	; 2
     2f6:	ef 0e       	add	r14, r31
     2f8:	f1 1c       	adc	r15, r1
		lcd_num( ival, 2 );
     2fa:	62 e0       	ldi	r22, 0x02	; 2
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	f6 01       	movw	r30, r12
     300:	80 81       	ld	r24, Z
     302:	91 81       	ldd	r25, Z+1	; 0x01
     304:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z7lcd_numii>
	for( p=fmt; *p ; ++p )
	if( *p=='%' )
	switch( * ++p )
	{
		case 'b':
		ival = va_arg( aptr, int );
     308:	67 01       	movw	r12, r14
		lcd_num( ival, 2 );
		break;
     30a:	8d c0       	rjmp	.+282    	; 0x426 <_Z6PrintfhPcz+0x1d6>
		
		case 'x':
		ival = va_arg( aptr, int );
     30c:	76 01       	movw	r14, r12
     30e:	f2 e0       	ldi	r31, 0x02	; 2
     310:	ef 0e       	add	r14, r31
     312:	f1 1c       	adc	r15, r1
		lcd_num( ival, 16 );
     314:	60 e1       	ldi	r22, 0x10	; 16
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	f6 01       	movw	r30, r12
     31a:	80 81       	ld	r24, Z
     31c:	91 81       	ldd	r25, Z+1	; 0x01
     31e:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z7lcd_numii>
		ival = va_arg( aptr, int );
		lcd_num( ival, 2 );
		break;
		
		case 'x':
		ival = va_arg( aptr, int );
     322:	67 01       	movw	r12, r14
		lcd_num( ival, 16 );
		break;
     324:	80 c0       	rjmp	.+256    	; 0x426 <_Z6PrintfhPcz+0x1d6>
		
		case 'd':
		ival = va_arg( aptr, int );
     326:	76 01       	movw	r14, r12
     328:	f2 e0       	ldi	r31, 0x02	; 2
     32a:	ef 0e       	add	r14, r31
     32c:	f1 1c       	adc	r15, r1
		lcd_num( ival, 10 );
     32e:	6a e0       	ldi	r22, 0x0A	; 10
     330:	70 e0       	ldi	r23, 0x00	; 0
     332:	f6 01       	movw	r30, r12
     334:	80 81       	ld	r24, Z
     336:	91 81       	ldd	r25, Z+1	; 0x01
     338:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z7lcd_numii>
		ival = va_arg( aptr, int );
		lcd_num( ival, 16 );
		break;
		
		case 'd':
		ival = va_arg( aptr, int );
     33c:	67 01       	movw	r12, r14
		lcd_num( ival, 10 );
		break;
     33e:	73 c0       	rjmp	.+230    	; 0x426 <_Z6PrintfhPcz+0x1d6>
		
		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
     340:	f6 01       	movw	r30, r12
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	c8 0e       	add	r12, r24
     346:	d1 1c       	adc	r13, r1
     348:	01 90       	ld	r0, Z+
     34a:	f0 81       	ld	r31, Z
     34c:	e0 2d       	mov	r30, r0
     34e:	80 81       	ld	r24, Z
     350:	88 23       	and	r24, r24
     352:	09 f4       	brne	.+2      	; 0x356 <_Z6PrintfhPcz+0x106>
     354:	68 c0       	rjmp	.+208    	; 0x426 <_Z6PrintfhPcz+0x1d6>
	itoa( num, str, radix );
	lcd_puts( str );
}


void Printf(unsigned char linenumber, char *fmt,... )
     356:	7f 01       	movw	r14, r30
     358:	9f ef       	ldi	r25, 0xFF	; 255
     35a:	e9 1a       	sub	r14, r25
     35c:	f9 0a       	sbc	r15, r25
		lcd_num( ival, 10 );
		break;
		
		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
		lcd_putch( *sval );
     35e:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z9lcd_putchc>
		ival = va_arg( aptr, int );
		lcd_num( ival, 10 );
		break;
		
		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
     362:	f7 01       	movw	r30, r14
     364:	81 91       	ld	r24, Z+
     366:	7f 01       	movw	r14, r30
     368:	81 11       	cpse	r24, r1
     36a:	f9 cf       	rjmp	.-14     	; 0x35e <_Z6PrintfhPcz+0x10e>
     36c:	5c c0       	rjmp	.+184    	; 0x426 <_Z6PrintfhPcz+0x1d6>
		lcd_putch( *sval );
		break;
		
		case 'f':
		fval=va_arg( aptr, double ); 
     36e:	56 01       	movw	r10, r12
     370:	f4 e0       	ldi	r31, 0x04	; 4
     372:	af 0e       	add	r10, r31
     374:	b1 1c       	adc	r11, r1
     376:	f6 01       	movw	r30, r12
     378:	40 80       	ld	r4, Z
     37a:	51 80       	ldd	r5, Z+1	; 0x01
     37c:	62 80       	ldd	r6, Z+2	; 0x02
     37e:	73 80       	ldd	r7, Z+3	; 0x03
		{
			int d,m;
			m=10000*(fval=fval-(d=fval));
     380:	c3 01       	movw	r24, r6
     382:	b2 01       	movw	r22, r4
     384:	0e 94 94 18 	call	0x3128	; 0x3128 <__fixsfsi>
     388:	6b 01       	movw	r12, r22
     38a:	7c 01       	movw	r14, r24
     38c:	88 27       	eor	r24, r24
     38e:	77 fd       	sbrc	r23, 7
     390:	80 95       	com	r24
     392:	98 2f       	mov	r25, r24
     394:	0e 94 c7 18 	call	0x318e	; 0x318e <__floatsisf>
     398:	9b 01       	movw	r18, r22
     39a:	ac 01       	movw	r20, r24
     39c:	c3 01       	movw	r24, r6
     39e:	b2 01       	movw	r22, r4
     3a0:	0e 94 2f 18 	call	0x305e	; 0x305e <__subsf3>
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e4       	ldi	r19, 0x40	; 64
     3a8:	4c e1       	ldi	r20, 0x1C	; 28
     3aa:	56 e4       	ldi	r21, 0x46	; 70
     3ac:	0e 94 53 19 	call	0x32a6	; 0x32a6 <__mulsf3>
     3b0:	0e 94 94 18 	call	0x3128	; 0x3128 <__fixsfsi>
     3b4:	66 2e       	mov	r6, r22
     3b6:	77 2e       	mov	r7, r23
			if( m<0 )
			m*=-1;
			lcd_num( d, 10 );
     3b8:	6a e0       	ldi	r22, 0x0A	; 10
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	c6 01       	movw	r24, r12
     3be:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z7lcd_numii>
			lcd_putch('.');
     3c2:	8e e2       	ldi	r24, 0x2E	; 46
     3c4:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z9lcd_putchc>
			lcd_num( m, 10 );
     3c8:	86 2d       	mov	r24, r6
     3ca:	97 2d       	mov	r25, r7
     3cc:	99 23       	and	r25, r25
     3ce:	1c f4       	brge	.+6      	; 0x3d6 <_Z6PrintfhPcz+0x186>
     3d0:	91 95       	neg	r25
     3d2:	81 95       	neg	r24
     3d4:	91 09       	sbc	r25, r1
     3d6:	6a e0       	ldi	r22, 0x0A	; 10
     3d8:	70 e0       	ldi	r23, 0x00	; 0
     3da:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z7lcd_numii>
		for( sval=va_arg(aptr, char*); *sval; ++sval )
		lcd_putch( *sval );
		break;
		
		case 'f':
		fval=va_arg( aptr, double ); 
     3de:	65 01       	movw	r12, r10
			m*=-1;
			lcd_num( d, 10 );
			lcd_putch('.');
			lcd_num( m, 10 );
		}
		break;
     3e0:	22 c0       	rjmp	.+68     	; 0x426 <_Z6PrintfhPcz+0x1d6>
		
		case 'o':
		ival = va_arg( aptr, int );
     3e2:	76 01       	movw	r14, r12
     3e4:	f2 e0       	ldi	r31, 0x02	; 2
     3e6:	ef 0e       	add	r14, r31
     3e8:	f1 1c       	adc	r15, r1
		lcd_num( ival, 8 );
     3ea:	68 e0       	ldi	r22, 0x08	; 8
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	f6 01       	movw	r30, r12
     3f0:	80 81       	ld	r24, Z
     3f2:	91 81       	ldd	r25, Z+1	; 0x01
     3f4:	0e 94 0e 01 	call	0x21c	; 0x21c <_Z7lcd_numii>
			lcd_num( m, 10 );
		}
		break;
		
		case 'o':
		ival = va_arg( aptr, int );
     3f8:	67 01       	movw	r12, r14
		lcd_num( ival, 8 );
		break;
     3fa:	15 c0       	rjmp	.+42     	; 0x426 <_Z6PrintfhPcz+0x1d6>
		
		
		default:
		lcd_putch(*p);
     3fc:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z9lcd_putchc>
     400:	12 c0       	rjmp	.+36     	; 0x426 <_Z6PrintfhPcz+0x1d6>
		
		
	}
	else if( *p=='\t' )
     402:	89 30       	cpi	r24, 0x09	; 9
     404:	29 f4       	brne	.+10     	; 0x410 <_Z6PrintfhPcz+0x1c0>
	lcd_putch(' ');
     406:	80 e2       	ldi	r24, 0x20	; 32
     408:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z9lcd_putchc>
     40c:	87 01       	movw	r16, r14
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_Z6PrintfhPcz+0x1d6>
	else if( *p=='\n' )
     410:	8a 30       	cpi	r24, 0x0A	; 10
     412:	31 f4       	brne	.+12     	; 0x420 <_Z6PrintfhPcz+0x1d0>
	lcd_gotoxy( 0,1 );		
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 bb 00 	call	0x176	; 0x176 <_Z10lcd_gotoxyhh>
     41c:	87 01       	movw	r16, r14
     41e:	03 c0       	rjmp	.+6      	; 0x426 <_Z6PrintfhPcz+0x1d6>
	else
	lcd_putch( *p );		
     420:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z9lcd_putchc>
     424:	87 01       	movw	r16, r14
	char *p, *sval;
	int ival;
	float fval;
	va_start( aptr, fmt );
	
	for( p=fmt; *p ; ++p )
     426:	78 01       	movw	r14, r16
     428:	ff ef       	ldi	r31, 0xFF	; 255
     42a:	ef 1a       	sub	r14, r31
     42c:	ff 0a       	sbc	r15, r31
     42e:	f8 01       	movw	r30, r16
     430:	81 81       	ldd	r24, Z+1	; 0x01
     432:	81 11       	cpse	r24, r1
     434:	44 cf       	rjmp	.-376    	; 0x2be <_Z6PrintfhPcz+0x6e>
	lcd_putch(' ');
	else if( *p=='\n' )
	lcd_gotoxy( 0,1 );		
	else
	lcd_putch( *p );		
}
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	1f 91       	pop	r17
     43c:	0f 91       	pop	r16
     43e:	ff 90       	pop	r15
     440:	ef 90       	pop	r14
     442:	df 90       	pop	r13
     444:	cf 90       	pop	r12
     446:	bf 90       	pop	r11
     448:	af 90       	pop	r10
     44a:	7f 90       	pop	r7
     44c:	6f 90       	pop	r6
     44e:	5f 90       	pop	r5
     450:	4f 90       	pop	r4
     452:	08 95       	ret

00000454 <_Z11keypad_initv>:
enum buttons_t {NO_BUTTON,BUTTON_0,BUTTON_1,BUTTON_2,BUTTON_3,BUTTON_4,BUTTON_5,BUTTON_6,BUTTON_7,BUTTON_8,BUTTON_9,BUTTON_HASH,BUTTON_AST,BUTTON_A,BUTTON_B,BUTTON_C,BUTTON_D};
unsigned int last_button=NO_BUTTON;

void keypad_init()
{
	DDRB|=((1<<PINB1)|(1<<PB0));
     454:	84 b1       	in	r24, 0x04	; 4
     456:	83 60       	ori	r24, 0x03	; 3
     458:	84 b9       	out	0x04, r24	; 4
	DDRD|=((1<<PD2)|(1<<PD3));
     45a:	8a b1       	in	r24, 0x0a	; 10
     45c:	8c 60       	ori	r24, 0x0C	; 12
     45e:	8a b9       	out	0x0a, r24	; 10
	DDRD&=~((1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7));
     460:	8a b1       	in	r24, 0x0a	; 10
     462:	8f 70       	andi	r24, 0x0F	; 15
     464:	8a b9       	out	0x0a, r24	; 10
	PORTB|=((1<<PB1)|(1<<PB0));
     466:	85 b1       	in	r24, 0x05	; 5
     468:	83 60       	ori	r24, 0x03	; 3
     46a:	85 b9       	out	0x05, r24	; 5
	PORTD|=((1<<PD2)|(1<<PD3)|(1<<PD4)|(1<<PD5)|(1<<PD6)|(1<<PD7));
     46c:	8b b1       	in	r24, 0x0b	; 11
     46e:	8c 6f       	ori	r24, 0xFC	; 252
     470:	8b b9       	out	0x0b, r24	; 11
     472:	08 95       	ret

00000474 <_Z12keypad_checkv>:
}

unsigned int keypad_check()
{
	select_s1;
     474:	29 98       	cbi	0x05, 1	; 5
	unselect_spin2;
     476:	28 9a       	sbi	0x05, 0	; 5
	unselect_spin3;
     478:	5a 9a       	sbi	0x0b, 2	; 11
	unselect_spin4;
     47a:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     47c:	8f e5       	ldi	r24, 0x5F	; 95
     47e:	9a ee       	ldi	r25, 0xEA	; 234
     480:	01 97       	sbiw	r24, 0x01	; 1
     482:	f1 f7       	brne	.-4      	; 0x480 <_Z12keypad_checkv+0xc>
     484:	00 c0       	rjmp	.+0      	; 0x486 <_Z12keypad_checkv+0x12>
     486:	00 00       	nop
	
	_delay_ms(15);
	if (bit_is_clear(PIND,PIND4) && bit_is_clear(PINB,1))
     488:	4c 99       	sbic	0x09, 4	; 9
     48a:	61 c0       	rjmp	.+194    	; 0x54e <_Z12keypad_checkv+0xda>
     48c:	19 9b       	sbis	0x03, 1	; 3
     48e:	30 c0       	rjmp	.+96     	; 0x4f0 <_Z12keypad_checkv+0x7c>
     490:	5e c0       	rjmp	.+188    	; 0x54e <_Z12keypad_checkv+0xda>
	{
		return BUTTON_1;
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PINB,1))
     492:	19 9b       	sbis	0x03, 1	; 3
     494:	30 c0       	rjmp	.+96     	; 0x4f6 <_Z12keypad_checkv+0x82>
     496:	5d c0       	rjmp	.+186    	; 0x552 <_Z12keypad_checkv+0xde>
	{
		return BUTTON_2;
	}
	else if(bit_is_clear(PIND,PD6) && bit_is_clear(PINB,1))
     498:	19 9b       	sbis	0x03, 1	; 3
     49a:	30 c0       	rjmp	.+96     	; 0x4fc <_Z12keypad_checkv+0x88>
     49c:	5c c0       	rjmp	.+184    	; 0x556 <_Z12keypad_checkv+0xe2>
	{
		return BUTTON_3;
	}
	else if(bit_is_clear(PIND,PD7) && bit_is_clear(PINB,1))
     49e:	19 9b       	sbis	0x03, 1	; 3
     4a0:	30 c0       	rjmp	.+96     	; 0x502 <_Z12keypad_checkv+0x8e>
     4a2:	5b c0       	rjmp	.+182    	; 0x55a <_Z12keypad_checkv+0xe6>
	unselect_spin1;
	_delay_ms(5);

	select_s2;
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PINB,0))
     4a4:	18 9b       	sbis	0x03, 0	; 3
     4a6:	30 c0       	rjmp	.+96     	; 0x508 <_Z12keypad_checkv+0x94>
     4a8:	68 c0       	rjmp	.+208    	; 0x57a <_Z12keypad_checkv+0x106>
	{
		return BUTTON_4;
	}
	else if(bit_is_clear(PIND,5) && bit_is_clear(PINB,0))
     4aa:	18 9b       	sbis	0x03, 0	; 3
     4ac:	30 c0       	rjmp	.+96     	; 0x50e <_Z12keypad_checkv+0x9a>
     4ae:	67 c0       	rjmp	.+206    	; 0x57e <_Z12keypad_checkv+0x10a>
	{
		return BUTTON_5;
	}
	else if(bit_is_clear(PIND,PD6) && bit_is_clear(PINB,0))
     4b0:	18 9b       	sbis	0x03, 0	; 3
     4b2:	30 c0       	rjmp	.+96     	; 0x514 <_Z12keypad_checkv+0xa0>
     4b4:	66 c0       	rjmp	.+204    	; 0x582 <_Z12keypad_checkv+0x10e>
	{
		return BUTTON_6;
	}
	else if(bit_is_clear(PIND,PD7) && bit_is_clear(PINB,0))
     4b6:	18 9b       	sbis	0x03, 0	; 3
     4b8:	30 c0       	rjmp	.+96     	; 0x51a <_Z12keypad_checkv+0xa6>
     4ba:	65 c0       	rjmp	.+202    	; 0x586 <_Z12keypad_checkv+0x112>
	}
	unselect_spin2;
	_delay_ms(5);
	select_s3;
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PIND,2))
     4bc:	4a 9b       	sbis	0x09, 2	; 9
     4be:	30 c0       	rjmp	.+96     	; 0x520 <_Z12keypad_checkv+0xac>
     4c0:	72 c0       	rjmp	.+228    	; 0x5a6 <_Z12keypad_checkv+0x132>
	{
		return BUTTON_7;
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PIND,2))
     4c2:	4a 9b       	sbis	0x09, 2	; 9
     4c4:	30 c0       	rjmp	.+96     	; 0x526 <_Z12keypad_checkv+0xb2>
     4c6:	71 c0       	rjmp	.+226    	; 0x5aa <_Z12keypad_checkv+0x136>
	{
		return BUTTON_8;
	}
	else if(bit_is_clear(PIND,PIND6) && bit_is_clear(PIND,2))
     4c8:	4a 9b       	sbis	0x09, 2	; 9
     4ca:	30 c0       	rjmp	.+96     	; 0x52c <_Z12keypad_checkv+0xb8>
     4cc:	70 c0       	rjmp	.+224    	; 0x5ae <_Z12keypad_checkv+0x13a>
	{
		return BUTTON_9;
	}
	else if(bit_is_clear(PIND,PIND7) && bit_is_clear(PIND,2))
     4ce:	4a 9b       	sbis	0x09, 2	; 9
     4d0:	30 c0       	rjmp	.+96     	; 0x532 <_Z12keypad_checkv+0xbe>
     4d2:	6f c0       	rjmp	.+222    	; 0x5b2 <_Z12keypad_checkv+0x13e>
	}
	unselect_spin3;
	_delay_ms(5);
	select_s4;
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PIND,3))
     4d4:	4b 9b       	sbis	0x09, 3	; 9
     4d6:	30 c0       	rjmp	.+96     	; 0x538 <_Z12keypad_checkv+0xc4>
     4d8:	7c c0       	rjmp	.+248    	; 0x5d2 <_Z12keypad_checkv+0x15e>
	{
		return BUTTON_AST;
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PIND,3))
     4da:	4b 9b       	sbis	0x09, 3	; 9
     4dc:	30 c0       	rjmp	.+96     	; 0x53e <_Z12keypad_checkv+0xca>
     4de:	7b c0       	rjmp	.+246    	; 0x5d6 <_Z12keypad_checkv+0x162>
	{
		return BUTTON_0;
	}
	else if(bit_is_clear(PIND,PIND6) && bit_is_clear(PIND,3))
     4e0:	4b 9b       	sbis	0x09, 3	; 9
     4e2:	30 c0       	rjmp	.+96     	; 0x544 <_Z12keypad_checkv+0xd0>
     4e4:	7a c0       	rjmp	.+244    	; 0x5da <_Z12keypad_checkv+0x166>
	{
		return BUTTON_HASH;
	}
	else if(bit_is_clear(PIND,PIND7) && bit_is_clear(PIND,3))
     4e6:	4b 99       	sbic	0x09, 3	; 9
     4e8:	7a c0       	rjmp	.+244    	; 0x5de <_Z12keypad_checkv+0x16a>
	{
		return BUTTON_D;
     4ea:	20 e1       	ldi	r18, 0x10	; 16
     4ec:	30 e0       	ldi	r19, 0x00	; 0
     4ee:	2c c0       	rjmp	.+88     	; 0x548 <_Z12keypad_checkv+0xd4>
	unselect_spin4;
	
	_delay_ms(15);
	if (bit_is_clear(PIND,PIND4) && bit_is_clear(PINB,1))
	{
		return BUTTON_1;
     4f0:	22 e0       	ldi	r18, 0x02	; 2
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	29 c0       	rjmp	.+82     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PINB,1))
	{
		return BUTTON_2;
     4f6:	23 e0       	ldi	r18, 0x03	; 3
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	26 c0       	rjmp	.+76     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PD6) && bit_is_clear(PINB,1))
	{
		return BUTTON_3;
     4fc:	24 e0       	ldi	r18, 0x04	; 4
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	23 c0       	rjmp	.+70     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PD7) && bit_is_clear(PINB,1))
	{
		return BUTTON_A;
     502:	2d e0       	ldi	r18, 0x0D	; 13
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	20 c0       	rjmp	.+64     	; 0x548 <_Z12keypad_checkv+0xd4>

	select_s2;
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PINB,0))
	{
		return BUTTON_4;
     508:	25 e0       	ldi	r18, 0x05	; 5
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	1d c0       	rjmp	.+58     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,5) && bit_is_clear(PINB,0))
	{
		return BUTTON_5;
     50e:	26 e0       	ldi	r18, 0x06	; 6
     510:	30 e0       	ldi	r19, 0x00	; 0
     512:	1a c0       	rjmp	.+52     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PD6) && bit_is_clear(PINB,0))
	{
		return BUTTON_6;
     514:	27 e0       	ldi	r18, 0x07	; 7
     516:	30 e0       	ldi	r19, 0x00	; 0
     518:	17 c0       	rjmp	.+46     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PD7) && bit_is_clear(PINB,0))
	{
		return BUTTON_B;
     51a:	2e e0       	ldi	r18, 0x0E	; 14
     51c:	30 e0       	ldi	r19, 0x00	; 0
     51e:	14 c0       	rjmp	.+40     	; 0x548 <_Z12keypad_checkv+0xd4>
	_delay_ms(5);
	select_s3;
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PIND,2))
	{
		return BUTTON_7;
     520:	28 e0       	ldi	r18, 0x08	; 8
     522:	30 e0       	ldi	r19, 0x00	; 0
     524:	11 c0       	rjmp	.+34     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PIND,2))
	{
		return BUTTON_8;
     526:	29 e0       	ldi	r18, 0x09	; 9
     528:	30 e0       	ldi	r19, 0x00	; 0
     52a:	0e c0       	rjmp	.+28     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PIND6) && bit_is_clear(PIND,2))
	{
		return BUTTON_9;
     52c:	2a e0       	ldi	r18, 0x0A	; 10
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	0b c0       	rjmp	.+22     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PIND7) && bit_is_clear(PIND,2))
	{
		return BUTTON_C;
     532:	2f e0       	ldi	r18, 0x0F	; 15
     534:	30 e0       	ldi	r19, 0x00	; 0
     536:	08 c0       	rjmp	.+16     	; 0x548 <_Z12keypad_checkv+0xd4>
	_delay_ms(5);
	select_s4;
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PIND,3))
	{
		return BUTTON_AST;
     538:	2c e0       	ldi	r18, 0x0C	; 12
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	05 c0       	rjmp	.+10     	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PIND,3))
	{
		return BUTTON_0;
     53e:	21 e0       	ldi	r18, 0x01	; 1
     540:	30 e0       	ldi	r19, 0x00	; 0
     542:	02 c0       	rjmp	.+4      	; 0x548 <_Z12keypad_checkv+0xd4>
	}
	else if(bit_is_clear(PIND,PIND6) && bit_is_clear(PIND,3))
	{
		return BUTTON_HASH;
     544:	2b e0       	ldi	r18, 0x0B	; 11
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	82 2f       	mov	r24, r18
     54a:	93 2f       	mov	r25, r19
     54c:	08 95       	ret
	_delay_ms(15);
	if (bit_is_clear(PIND,PIND4) && bit_is_clear(PINB,1))
	{
		return BUTTON_1;
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PINB,1))
     54e:	4d 9b       	sbis	0x09, 5	; 9
     550:	a0 cf       	rjmp	.-192    	; 0x492 <_Z12keypad_checkv+0x1e>
	{
		return BUTTON_2;
	}
	else if(bit_is_clear(PIND,PD6) && bit_is_clear(PINB,1))
     552:	4e 9b       	sbis	0x09, 6	; 9
     554:	a1 cf       	rjmp	.-190    	; 0x498 <_Z12keypad_checkv+0x24>
	{
		return BUTTON_3;
	}
	else if(bit_is_clear(PIND,PD7) && bit_is_clear(PINB,1))
     556:	4f 9b       	sbis	0x09, 7	; 9
     558:	a2 cf       	rjmp	.-188    	; 0x49e <_Z12keypad_checkv+0x2a>
	{
		return BUTTON_A;
	}
	unselect_spin1;
     55a:	29 9a       	sbi	0x05, 1	; 5
     55c:	8f e1       	ldi	r24, 0x1F	; 31
     55e:	9e e4       	ldi	r25, 0x4E	; 78
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <_Z12keypad_checkv+0xec>
     564:	00 c0       	rjmp	.+0      	; 0x566 <_Z12keypad_checkv+0xf2>
     566:	00 00       	nop
	_delay_ms(5);

	select_s2;
     568:	28 98       	cbi	0x05, 0	; 5
     56a:	8f e5       	ldi	r24, 0x5F	; 95
     56c:	9a ee       	ldi	r25, 0xEA	; 234
     56e:	01 97       	sbiw	r24, 0x01	; 1
     570:	f1 f7       	brne	.-4      	; 0x56e <_Z12keypad_checkv+0xfa>
     572:	00 c0       	rjmp	.+0      	; 0x574 <_Z12keypad_checkv+0x100>
     574:	00 00       	nop
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PINB,0))
     576:	4c 9b       	sbis	0x09, 4	; 9
     578:	95 cf       	rjmp	.-214    	; 0x4a4 <_Z12keypad_checkv+0x30>
	{
		return BUTTON_4;
	}
	else if(bit_is_clear(PIND,5) && bit_is_clear(PINB,0))
     57a:	4d 9b       	sbis	0x09, 5	; 9
     57c:	96 cf       	rjmp	.-212    	; 0x4aa <_Z12keypad_checkv+0x36>
	{
		return BUTTON_5;
	}
	else if(bit_is_clear(PIND,PD6) && bit_is_clear(PINB,0))
     57e:	4e 9b       	sbis	0x09, 6	; 9
     580:	97 cf       	rjmp	.-210    	; 0x4b0 <_Z12keypad_checkv+0x3c>
	{
		return BUTTON_6;
	}
	else if(bit_is_clear(PIND,PD7) && bit_is_clear(PINB,0))
     582:	4f 9b       	sbis	0x09, 7	; 9
     584:	98 cf       	rjmp	.-208    	; 0x4b6 <_Z12keypad_checkv+0x42>
	{
		return BUTTON_B;
	}
	unselect_spin2;
     586:	28 9a       	sbi	0x05, 0	; 5
     588:	8f e1       	ldi	r24, 0x1F	; 31
     58a:	9e e4       	ldi	r25, 0x4E	; 78
     58c:	01 97       	sbiw	r24, 0x01	; 1
     58e:	f1 f7       	brne	.-4      	; 0x58c <_Z12keypad_checkv+0x118>
     590:	00 c0       	rjmp	.+0      	; 0x592 <_Z12keypad_checkv+0x11e>
     592:	00 00       	nop
	_delay_ms(5);
	select_s3;
     594:	5a 98       	cbi	0x0b, 2	; 11
     596:	8f e5       	ldi	r24, 0x5F	; 95
     598:	9a ee       	ldi	r25, 0xEA	; 234
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	f1 f7       	brne	.-4      	; 0x59a <_Z12keypad_checkv+0x126>
     59e:	00 c0       	rjmp	.+0      	; 0x5a0 <_Z12keypad_checkv+0x12c>
     5a0:	00 00       	nop
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PIND,2))
     5a2:	4c 9b       	sbis	0x09, 4	; 9
     5a4:	8b cf       	rjmp	.-234    	; 0x4bc <_Z12keypad_checkv+0x48>
	{
		return BUTTON_7;
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PIND,2))
     5a6:	4d 9b       	sbis	0x09, 5	; 9
     5a8:	8c cf       	rjmp	.-232    	; 0x4c2 <_Z12keypad_checkv+0x4e>
	{
		return BUTTON_8;
	}
	else if(bit_is_clear(PIND,PIND6) && bit_is_clear(PIND,2))
     5aa:	4e 9b       	sbis	0x09, 6	; 9
     5ac:	8d cf       	rjmp	.-230    	; 0x4c8 <_Z12keypad_checkv+0x54>
	{
		return BUTTON_9;
	}
	else if(bit_is_clear(PIND,PIND7) && bit_is_clear(PIND,2))
     5ae:	4f 9b       	sbis	0x09, 7	; 9
     5b0:	8e cf       	rjmp	.-228    	; 0x4ce <_Z12keypad_checkv+0x5a>
	{
		return BUTTON_C;
	}
	unselect_spin3;
     5b2:	5a 9a       	sbi	0x0b, 2	; 11
     5b4:	8f e1       	ldi	r24, 0x1F	; 31
     5b6:	9e e4       	ldi	r25, 0x4E	; 78
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	f1 f7       	brne	.-4      	; 0x5b8 <_Z12keypad_checkv+0x144>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <_Z12keypad_checkv+0x14a>
     5be:	00 00       	nop
	_delay_ms(5);
	select_s4;
     5c0:	5b 98       	cbi	0x0b, 3	; 11
     5c2:	8f e5       	ldi	r24, 0x5F	; 95
     5c4:	9a ee       	ldi	r25, 0xEA	; 234
     5c6:	01 97       	sbiw	r24, 0x01	; 1
     5c8:	f1 f7       	brne	.-4      	; 0x5c6 <_Z12keypad_checkv+0x152>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <_Z12keypad_checkv+0x158>
     5cc:	00 00       	nop
	_delay_ms(15);
	if(bit_is_clear(PIND,PIND4) && bit_is_clear(PIND,3))
     5ce:	4c 9b       	sbis	0x09, 4	; 9
     5d0:	81 cf       	rjmp	.-254    	; 0x4d4 <_Z12keypad_checkv+0x60>
	{
		return BUTTON_AST;
	}
	else if(bit_is_clear(PIND,PIND5) && bit_is_clear(PIND,3))
     5d2:	4d 9b       	sbis	0x09, 5	; 9
     5d4:	82 cf       	rjmp	.-252    	; 0x4da <_Z12keypad_checkv+0x66>
	{
		return BUTTON_0;
	}
	else if(bit_is_clear(PIND,PIND6) && bit_is_clear(PIND,3))
     5d6:	4e 9b       	sbis	0x09, 6	; 9
     5d8:	83 cf       	rjmp	.-250    	; 0x4e0 <_Z12keypad_checkv+0x6c>
	{
		return BUTTON_HASH;
	}
	else if(bit_is_clear(PIND,PIND7) && bit_is_clear(PIND,3))
     5da:	4f 9b       	sbis	0x09, 7	; 9
     5dc:	84 cf       	rjmp	.-248    	; 0x4e6 <_Z12keypad_checkv+0x72>
	{
		return BUTTON_D;
	}
	unselect_spin4;
     5de:	5b 9a       	sbi	0x0b, 3	; 11
     5e0:	8f e1       	ldi	r24, 0x1F	; 31
     5e2:	9e e4       	ldi	r25, 0x4E	; 78
     5e4:	01 97       	sbiw	r24, 0x01	; 1
     5e6:	f1 f7       	brne	.-4      	; 0x5e4 <_Z12keypad_checkv+0x170>
     5e8:	00 c0       	rjmp	.+0      	; 0x5ea <_Z12keypad_checkv+0x176>
     5ea:	00 00       	nop
	_delay_ms(5);
	last_button=NO_BUTTON;
     5ec:	10 92 fe 07 	sts	0x07FE, r1
     5f0:	10 92 fd 07 	sts	0x07FD, r1
	return NO_BUTTON;
     5f4:	20 e0       	ldi	r18, 0x00	; 0
     5f6:	30 e0       	ldi	r19, 0x00	; 0
     5f8:	a7 cf       	rjmp	.-178    	; 0x548 <_Z12keypad_checkv+0xd4>

000005fa <_Z10get_statusv>:
}
unsigned int get_status()
{
	select_s1;
     5fa:	29 98       	cbi	0x05, 1	; 5
	select_s2;
     5fc:	28 98       	cbi	0x05, 0	; 5
	select_s3;
     5fe:	5a 98       	cbi	0x0b, 2	; 11
	select_s4;
     600:	5b 98       	cbi	0x0b, 3	; 11
	if(bit_is_clear(PIND,PIND4))
     602:	4c 9b       	sbis	0x09, 4	; 9
     604:	10 c0       	rjmp	.+32     	; 0x626 <_Z10get_statusv+0x2c>
	return Pressed;
	else if(bit_is_clear(PIND,PIND5))
     606:	4d 9b       	sbis	0x09, 5	; 9
     608:	11 c0       	rjmp	.+34     	; 0x62c <_Z10get_statusv+0x32>
	return Pressed;
	else if(bit_is_clear(PIND,PIND6))
     60a:	4e 9b       	sbis	0x09, 6	; 9
     60c:	12 c0       	rjmp	.+36     	; 0x632 <_Z10get_statusv+0x38>
	return Pressed;
	else if(bit_is_clear(PIND,PIND7))
     60e:	89 b1       	in	r24, 0x09	; 9
     610:	99 27       	eor	r25, r25
     612:	87 fd       	sbrc	r24, 7
     614:	90 95       	com	r25
     616:	80 95       	com	r24
     618:	90 95       	com	r25
	select_s1;
	select_s2;
	select_s3;
	select_s4;
	if(bit_is_clear(PIND,PIND4))
	return Pressed;
     61a:	29 2f       	mov	r18, r25
     61c:	22 1f       	adc	r18, r18
     61e:	22 27       	eor	r18, r18
     620:	22 1f       	adc	r18, r18
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	08 c0       	rjmp	.+16     	; 0x636 <_Z10get_statusv+0x3c>
     626:	21 e0       	ldi	r18, 0x01	; 1
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	05 c0       	rjmp	.+10     	; 0x636 <_Z10get_statusv+0x3c>
	else if(bit_is_clear(PIND,PIND5))
	return Pressed;
     62c:	21 e0       	ldi	r18, 0x01	; 1
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	02 c0       	rjmp	.+4      	; 0x636 <_Z10get_statusv+0x3c>
	else if(bit_is_clear(PIND,PIND6))
	return Pressed;
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	30 e0       	ldi	r19, 0x00	; 0
	else if(bit_is_clear(PIND,PIND7))
	return Pressed;
	else 
	return Release;
}
     636:	82 2f       	mov	r24, r18
     638:	93 2f       	mov	r25, r19
     63a:	08 95       	ret

0000063c <_Z7get_keyv>:
unsigned int get_key()
{
	if((get_status()==Pressed) && (last_button!=NO_BUTTON))
     63c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <_Z10get_statusv>
     640:	01 97       	sbiw	r24, 0x01	; 1
     642:	51 f4       	brne	.+20     	; 0x658 <_Z7get_keyv+0x1c>
     644:	20 91 fd 07 	lds	r18, 0x07FD
     648:	30 91 fe 07 	lds	r19, 0x07FE
     64c:	21 15       	cp	r18, r1
     64e:	31 05       	cpc	r19, r1
     650:	19 f0       	breq	.+6      	; 0x658 <_Z7get_keyv+0x1c>
     652:	82 2f       	mov	r24, r18
     654:	93 2f       	mov	r25, r19
     656:	08 95       	ret
	{
		return last_button;
	}
	else 
	{
		last_button=keypad_check();
     658:	0e 94 3a 02 	call	0x474	; 0x474 <_Z12keypad_checkv>
     65c:	9c 01       	movw	r18, r24
     65e:	90 93 fe 07 	sts	0x07FE, r25
     662:	80 93 fd 07 	sts	0x07FD, r24
		return last_button;
     666:	f5 cf       	rjmp	.-22     	; 0x652 <_Z7get_keyv+0x16>

00000668 <_Z11init_timer0v>:
unsigned char teamselect=0;
volatile unsigned int timeout=0;
volatile unsigned int datatimeout=0;
void init_timer0()
{
	TCCR0A|=(1<<WGM01);
     668:	84 b5       	in	r24, 0x24	; 36
     66a:	82 60       	ori	r24, 0x02	; 2
     66c:	84 bd       	out	0x24, r24	; 36
	TCCR0B|=(1<<CS02)|(1<<CS00);
     66e:	85 b5       	in	r24, 0x25	; 37
     670:	85 60       	ori	r24, 0x05	; 5
     672:	85 bd       	out	0x25, r24	; 37
	TIMSK0|=(1<<OCIE0A);
     674:	ee e6       	ldi	r30, 0x6E	; 110
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	80 81       	ld	r24, Z
     67a:	82 60       	ori	r24, 0x02	; 2
     67c:	80 83       	st	Z, r24
	TIFR0|=(1<<OCF0A);
     67e:	a9 9a       	sbi	0x15, 1	; 21
	OCR0A=154;
     680:	8a e9       	ldi	r24, 0x9A	; 154
     682:	87 bd       	out	0x27, r24	; 39
     684:	08 95       	ret

00000686 <__vector_14>:
}
ISR(TIMER0_COMPA_vect)
{
     686:	1f 92       	push	r1
     688:	0f 92       	push	r0
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	0f 92       	push	r0
     68e:	11 24       	eor	r1, r1
     690:	8f 93       	push	r24
     692:	9f 93       	push	r25
	timeout++;
     694:	80 91 b0 07 	lds	r24, 0x07B0
     698:	90 91 b1 07 	lds	r25, 0x07B1
     69c:	01 96       	adiw	r24, 0x01	; 1
     69e:	90 93 b1 07 	sts	0x07B1, r25
     6a2:	80 93 b0 07 	sts	0x07B0, r24
	displaycounter++;
     6a6:	80 91 b8 07 	lds	r24, 0x07B8
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	80 93 b8 07 	sts	0x07B8, r24
	datatimeout++;
     6b0:	80 91 ae 07 	lds	r24, 0x07AE
     6b4:	90 91 af 07 	lds	r25, 0x07AF
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	90 93 af 07 	sts	0x07AF, r25
     6be:	80 93 ae 07 	sts	0x07AE, r24
	if(displaycounter>=8)
     6c2:	80 91 b8 07 	lds	r24, 0x07B8
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	38 f0       	brcs	.+14     	; 0x6d8 <__vector_14+0x52>
	{
		connection_checkflag=1;
     6ca:	81 e0       	ldi	r24, 0x01	; 1
     6cc:	80 93 b6 07 	sts	0x07B6, r24
		displayflag=1;
     6d0:	80 93 b7 07 	sts	0x07B7, r24
		displaycounter=0;
     6d4:	10 92 b8 07 	sts	0x07B8, r1
	}
}
     6d8:	9f 91       	pop	r25
     6da:	8f 91       	pop	r24
     6dc:	0f 90       	pop	r0
     6de:	0f be       	out	0x3f, r0	; 63
     6e0:	0f 90       	pop	r0
     6e2:	1f 90       	pop	r1
     6e4:	18 95       	reti

000006e6 <_Z12transmitdatah>:
void transmitdata(unsigned char transmitdata)
{
	while( !( UCSR0A &(1<<UDRE0) ));
     6e6:	e0 ec       	ldi	r30, 0xC0	; 192
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	90 81       	ld	r25, Z
     6ec:	95 ff       	sbrs	r25, 5
     6ee:	fd cf       	rjmp	.-6      	; 0x6ea <_Z12transmitdatah+0x4>
	UDR0=transmitdata;
     6f0:	80 93 c6 00 	sts	0x00C6, r24
     6f4:	08 95       	ret

000006f6 <_Z11receivedatav>:
}
unsigned char receivedata()
{
    unsigned char tempdata;
	timeout=0;
     6f6:	10 92 b1 07 	sts	0x07B1, r1
     6fa:	10 92 b0 07 	sts	0x07B0, r1
	while ( !(UCSR0A & (1<<RXC0)) )
     6fe:	e0 ec       	ldi	r30, 0xC0	; 192
     700:	f0 e0       	ldi	r31, 0x00	; 0
     702:	06 c0       	rjmp	.+12     	; 0x710 <_Z11receivedatav+0x1a>
	{
		if(timeout>3)
     704:	80 91 b0 07 	lds	r24, 0x07B0
     708:	90 91 b1 07 	lds	r25, 0x07B1
     70c:	04 97       	sbiw	r24, 0x04	; 4
     70e:	30 f4       	brcc	.+12     	; 0x71c <_Z11receivedatav+0x26>
}
unsigned char receivedata()
{
    unsigned char tempdata;
	timeout=0;
	while ( !(UCSR0A & (1<<RXC0)) )
     710:	80 81       	ld	r24, Z
     712:	88 23       	and	r24, r24
     714:	bc f7       	brge	.-18     	; 0x704 <_Z11receivedatav+0xe>
	{
		if(timeout>3)
		return 0;
	}
	
	tempdata=UDR0;
     716:	80 91 c6 00 	lds	r24, 0x00C6
	return tempdata;
     71a:	08 95       	ret
    unsigned char tempdata;
	timeout=0;
	while ( !(UCSR0A & (1<<RXC0)) )
	{
		if(timeout>3)
		return 0;
     71c:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	tempdata=UDR0;
	return tempdata;
}
     71e:	08 95       	ret

00000720 <_Z14transceivedatah>:
unsigned char transceivedata(unsigned char transmitdata)
{
	unsigned char tempdata;
	while( !( UCSR0A &(1<<UDRE0) ));
     720:	e0 ec       	ldi	r30, 0xC0	; 192
     722:	f0 e0       	ldi	r31, 0x00	; 0
     724:	90 81       	ld	r25, Z
     726:	95 ff       	sbrs	r25, 5
     728:	fd cf       	rjmp	.-6      	; 0x724 <_Z14transceivedatah+0x4>
	UDR0=transmitdata;
     72a:	80 93 c6 00 	sts	0x00C6, r24
	timeout=0;
     72e:	10 92 b1 07 	sts	0x07B1, r1
     732:	10 92 b0 07 	sts	0x07B0, r1
    TCNT0=0;
     736:	16 bc       	out	0x26, r1	; 38
	while ( !(UCSR0A & (1<<RXC0)))
     738:	e0 ec       	ldi	r30, 0xC0	; 192
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	06 c0       	rjmp	.+12     	; 0x74a <_Z14transceivedatah+0x2a>
	{
		if(timeout>8)
     73e:	80 91 b0 07 	lds	r24, 0x07B0
     742:	90 91 b1 07 	lds	r25, 0x07B1
     746:	09 97       	sbiw	r24, 0x09	; 9
     748:	30 f4       	brcc	.+12     	; 0x756 <_Z14transceivedatah+0x36>
	unsigned char tempdata;
	while( !( UCSR0A &(1<<UDRE0) ));
	UDR0=transmitdata;
	timeout=0;
    TCNT0=0;
	while ( !(UCSR0A & (1<<RXC0)))
     74a:	80 81       	ld	r24, Z
     74c:	88 23       	and	r24, r24
     74e:	bc f7       	brge	.-18     	; 0x73e <_Z14transceivedatah+0x1e>
	{
		if(timeout>8)
		return 0;
	}
	tempdata=UDR0;
     750:	80 91 c6 00 	lds	r24, 0x00C6
	return tempdata;
     754:	08 95       	ret
	timeout=0;
    TCNT0=0;
	while ( !(UCSR0A & (1<<RXC0)))
	{
		if(timeout>8)
		return 0;
     756:	80 e0       	ldi	r24, 0x00	; 0
	}
	tempdata=UDR0;
	return tempdata;
}
     758:	08 95       	ret

0000075a <_Z12getUART_datahc>:
char* getUART_data(unsigned char transmit,char key )
{
     75a:	cf 93       	push	r28
     75c:	df 93       	push	r29
	strcpy(buffer,"");
     75e:	10 92 d8 07 	sts	0x07D8, r1
	unsigned int dataindex=0;
	char tempdata;
	while( !( UCSR0A &(1<<UDRE0) ));
     762:	e0 ec       	ldi	r30, 0xC0	; 192
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	90 81       	ld	r25, Z
     768:	95 ff       	sbrs	r25, 5
     76a:	fd cf       	rjmp	.-6      	; 0x766 <_Z12getUART_datahc+0xc>
	UDR0=transmit;
     76c:	80 93 c6 00 	sts	0x00C6, r24
	datatimeout=0;
     770:	10 92 af 07 	sts	0x07AF, r1
     774:	10 92 ae 07 	sts	0x07AE, r1
     778:	a8 ed       	ldi	r26, 0xD8	; 216
     77a:	b7 e0       	ldi	r27, 0x07	; 7
	return tempdata;
}
char* getUART_data(unsigned char transmit,char key )
{
	strcpy(buffer,"");
	unsigned int dataindex=0;
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
	UDR0=transmit;
	datatimeout=0;
	while(1)
	{
		timeout=0;
		while (!(UCSR0A & (1<<RXC0)) )
     780:	e0 ec       	ldi	r30, 0xC0	; 192
     782:	f0 e0       	ldi	r31, 0x00	; 0
		if(timeout>8)
		{
			break;
		}	
		}
		tempdata=UDR0;
     784:	c6 ec       	ldi	r28, 0xC6	; 198
     786:	d0 e0       	ldi	r29, 0x00	; 0
	while( !( UCSR0A &(1<<UDRE0) ));
	UDR0=transmit;
	datatimeout=0;
	while(1)
	{
		timeout=0;
     788:	10 92 b1 07 	sts	0x07B1, r1
     78c:	10 92 b0 07 	sts	0x07B0, r1
		while (!(UCSR0A & (1<<RXC0)) )
     790:	06 c0       	rjmp	.+12     	; 0x79e <_Z12getUART_datahc+0x44>
		{
		if(timeout>8)
     792:	80 91 b0 07 	lds	r24, 0x07B0
     796:	90 91 b1 07 	lds	r25, 0x07B1
     79a:	09 97       	sbiw	r24, 0x09	; 9
     79c:	18 f4       	brcc	.+6      	; 0x7a4 <_Z12getUART_datahc+0x4a>
	UDR0=transmit;
	datatimeout=0;
	while(1)
	{
		timeout=0;
		while (!(UCSR0A & (1<<RXC0)) )
     79e:	80 81       	ld	r24, Z
     7a0:	88 23       	and	r24, r24
     7a2:	bc f7       	brge	.-18     	; 0x792 <_Z12getUART_datahc+0x38>
		if(timeout>8)
		{
			break;
		}	
		}
		tempdata=UDR0;
     7a4:	48 81       	ld	r20, Y
		if( tempdata=='#')
     7a6:	43 32       	cpi	r20, 0x23	; 35
     7a8:	29 f4       	brne	.+10     	; 0x7b4 <_Z12getUART_datahc+0x5a>
		{
			buffer[dataindex]='\0';
     7aa:	f9 01       	movw	r30, r18
     7ac:	e8 52       	subi	r30, 0x28	; 40
     7ae:	f8 4f       	sbci	r31, 0xF8	; 248
     7b0:	10 82       	st	Z, r1
			break;
     7b2:	11 c0       	rjmp	.+34     	; 0x7d6 <_Z12getUART_datahc+0x7c>
		}
		else if(datatimeout>=25)
     7b4:	80 91 ae 07 	lds	r24, 0x07AE
     7b8:	90 91 af 07 	lds	r25, 0x07AF
     7bc:	49 97       	sbiw	r24, 0x19	; 25
     7be:	38 f0       	brcs	.+14     	; 0x7ce <_Z12getUART_datahc+0x74>
		{
			strcpy(buffer,"");
     7c0:	10 92 d8 07 	sts	0x07D8, r1
			datatimeout=0;
     7c4:	10 92 af 07 	sts	0x07AF, r1
     7c8:	10 92 ae 07 	sts	0x07AE, r1
			break;
     7cc:	04 c0       	rjmp	.+8      	; 0x7d6 <_Z12getUART_datahc+0x7c>
		}
		buffer[dataindex]=tempdata;
     7ce:	4d 93       	st	X+, r20
		dataindex++;
     7d0:	2f 5f       	subi	r18, 0xFF	; 255
     7d2:	3f 4f       	sbci	r19, 0xFF	; 255
	unsigned int dataindex=0;
	char tempdata;
	while( !( UCSR0A &(1<<UDRE0) ));
	UDR0=transmit;
	datatimeout=0;
	while(1)
     7d4:	d9 cf       	rjmp	.-78     	; 0x788 <_Z12getUART_datahc+0x2e>
		}
		buffer[dataindex]=tempdata;
		dataindex++;
	}
return buffer;
}
     7d6:	88 ed       	ldi	r24, 0xD8	; 216
     7d8:	97 e0       	ldi	r25, 0x07	; 7
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	08 95       	ret

000007e0 <_Z11clearbufferv>:
void clearbuffer()
{
	strcpy(buffer1,"");
     7e0:	10 92 ce 07 	sts	0x07CE, r1
	strcpy(buffer2,"");
     7e4:	10 92 c4 07 	sts	0x07C4, r1
	strcpy(buffer3,"");
     7e8:	10 92 ba 07 	sts	0x07BA, r1
     7ec:	08 95       	ret

000007ee <_Z11init_myuartv>:
}
void init_myuart( void )
{
	DDRD|=(1<<PIND1);   //tx as output
     7ee:	51 9a       	sbi	0x0a, 1	; 10
	DDRD&=~(1<<PIND0);  //rx as input
     7f0:	50 98       	cbi	0x0a, 0	; 10
    UCSR0B=(1<<RXEN0)|(1<<TXEN0);
     7f2:	88 e1       	ldi	r24, 0x18	; 24
     7f4:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C=(1<<UCSZ01)|(1<<UCSZ00);
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0H=(BAUD_PRESCALE>>8);
     7fe:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=BAUD_PRESCALE;
     802:	87 e6       	ldi	r24, 0x67	; 103
     804:	80 93 c4 00 	sts	0x00C4, r24
     808:	08 95       	ret

0000080a <_Z17displayhomescreenv>:
    }
}

void displayhomescreen()
{
	if(displayflag)
     80a:	80 91 b7 07 	lds	r24, 0x07B7
     80e:	88 23       	and	r24, r24
     810:	09 f4       	brne	.+2      	; 0x814 <_Z17displayhomescreenv+0xa>
     812:	94 c0       	rjmp	.+296    	; 0x93c <__stack+0x3d>
	{
		lcd_clear();
     814:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		if(teamselect)
     818:	80 91 b2 07 	lds	r24, 0x07B2
     81c:	88 23       	and	r24, r24
     81e:	91 f1       	breq	.+100    	; 0x884 <_Z17displayhomescreenv+0x7a>
		{
			if(duct_calibrate_complete)
     820:	80 91 b4 07 	lds	r24, 0x07B4
     824:	88 23       	and	r24, r24
     826:	61 f0       	breq	.+24     	; 0x840 <_Z17displayhomescreenv+0x36>
			Printf(1,"Calibration Complete");
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	9f 93       	push	r25
     82e:	8f 93       	push	r24
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	8f 93       	push	r24
     834:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     838:	0f 90       	pop	r0
     83a:	0f 90       	pop	r0
     83c:	0f 90       	pop	r0
     83e:	0b c0       	rjmp	.+22     	; 0x856 <_Z17displayhomescreenv+0x4c>
			else 
			Printf(1,"B to Calibrate Duct");
     840:	86 e1       	ldi	r24, 0x16	; 22
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9f 93       	push	r25
     846:	8f 93       	push	r24
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	8f 93       	push	r24
     84c:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     850:	0f 90       	pop	r0
     852:	0f 90       	pop	r0
     854:	0f 90       	pop	r0
			Printf(2,"C to Calibrate Line");
     856:	8a e2       	ldi	r24, 0x2A	; 42
     858:	91 e0       	ldi	r25, 0x01	; 1
     85a:	9f 93       	push	r25
     85c:	8f 93       	push	r24
     85e:	82 e0       	ldi	r24, 0x02	; 2
     860:	8f 93       	push	r24
     862:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"  Press D to Start  ");
     866:	8e e3       	ldi	r24, 0x3E	; 62
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	9f 93       	push	r25
     86c:	8f 93       	push	r24
     86e:	83 e0       	ldi	r24, 0x03	; 3
     870:	8f 93       	push	r24
     872:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	0f 90       	pop	r0
     882:	31 c0       	rjmp	.+98     	; 0x8e6 <_Z17displayhomescreenv+0xdc>
		}
		else
		{
			if(connection_status)
     884:	80 91 b5 07 	lds	r24, 0x07B5
     888:	88 23       	and	r24, r24
     88a:	61 f0       	breq	.+24     	; 0x8a4 <_Z17displayhomescreenv+0x9a>
			Printf(2,"  STATUS:CONNECTED  ");
     88c:	83 e5       	ldi	r24, 0x53	; 83
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	82 e0       	ldi	r24, 0x02	; 2
     896:	8f 93       	push	r24
     898:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0b c0       	rjmp	.+22     	; 0x8ba <_Z17displayhomescreenv+0xb0>
			else
			Printf(2,"STATUS:DISCONNECTED");
     8a4:	88 e6       	ldi	r24, 0x68	; 104
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	9f 93       	push	r25
     8aa:	8f 93       	push	r24
     8ac:	82 e0       	ldi	r24, 0x02	; 2
     8ae:	8f 93       	push	r24
     8b0:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
			
			Printf(1,"**HYBRID ROBO 2016**");
     8ba:	8c e7       	ldi	r24, 0x7C	; 124
     8bc:	91 e0       	ldi	r25, 0x01	; 1
     8be:	9f 93       	push	r25
     8c0:	8f 93       	push	r24
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	8f 93       	push	r24
     8c6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3," RED-4        BLUE-6");
     8ca:	81 e9       	ldi	r24, 0x91	; 145
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	9f 93       	push	r25
     8d0:	8f 93       	push	r24
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	8f 93       	push	r24
     8d6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     8da:	0f 90       	pop	r0
     8dc:	0f 90       	pop	r0
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
		}	
		if(teamselect==RED)
     8e6:	80 91 b2 07 	lds	r24, 0x07B2
     8ea:	82 30       	cpi	r24, 0x02	; 2
     8ec:	61 f4       	brne	.+24     	; 0x906 <__stack+0x7>
		   Printf(4,"  RED         MENU-#");
     8ee:	86 ea       	ldi	r24, 0xA6	; 166
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	84 e0       	ldi	r24, 0x04	; 4
     8f8:	8f 93       	push	r24
     8fa:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	19 c0       	rjmp	.+50     	; 0x938 <__stack+0x39>
		else if(teamselect==BLUE)
     906:	84 30       	cpi	r24, 0x04	; 4
     908:	61 f4       	brne	.+24     	; 0x922 <__stack+0x23>
		   Printf(4,"  BLUE       MENU-#");
     90a:	8b eb       	ldi	r24, 0xBB	; 187
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	9f 93       	push	r25
     910:	8f 93       	push	r24
     912:	84 e0       	ldi	r24, 0x04	; 4
     914:	8f 93       	push	r24
     916:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     91a:	0f 90       	pop	r0
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0b c0       	rjmp	.+22     	; 0x938 <__stack+0x39>
	    else
		   Printf(4,"Calibrate-C   MENU-#");
     922:	8f ec       	ldi	r24, 0xCF	; 207
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	9f 93       	push	r25
     928:	8f 93       	push	r24
     92a:	84 e0       	ldi	r24, 0x04	; 4
     92c:	8f 93       	push	r24
     92e:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
		displayflag=0;
     938:	10 92 b7 07 	sts	0x07B7, r1
	}
	if(connection_checkflag && connection_check_enable)
     93c:	80 91 b6 07 	lds	r24, 0x07B6
     940:	88 23       	and	r24, r24
     942:	69 f0       	breq	.+26     	; 0x95e <__stack+0x5f>
     944:	80 91 00 01 	lds	r24, 0x0100
     948:	81 11       	cpse	r24, r1
     94a:	14 c1       	rjmp	.+552    	; 0xb74 <__stack+0x275>
     94c:	08 c0       	rjmp	.+16     	; 0x95e <__stack+0x5f>
	{
		if(transceivedata('5')!='6')
		{
	     connection_status=0;
     94e:	10 92 b5 07 	sts	0x07B5, r1
     952:	03 c0       	rjmp	.+6      	; 0x95a <__stack+0x5b>
		}
		else
		 connection_status=1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	80 93 b5 07 	sts	0x07B5, r24
		connection_checkflag=0;
     95a:	10 92 b6 07 	sts	0x07B6, r1
	}
	switch(get_key())
     95e:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
     962:	8b 30       	cpi	r24, 0x0B	; 11
     964:	91 05       	cpc	r25, r1
     966:	09 f4       	brne	.+2      	; 0x96a <__stack+0x6b>
     968:	b7 c0       	rjmp	.+366    	; 0xad8 <__stack+0x1d9>
     96a:	40 f4       	brcc	.+16     	; 0x97c <__stack+0x7d>
     96c:	85 30       	cpi	r24, 0x05	; 5
     96e:	91 05       	cpc	r25, r1
     970:	09 f4       	brne	.+2      	; 0x974 <__stack+0x75>
     972:	d2 c0       	rjmp	.+420    	; 0xb18 <__stack+0x219>
     974:	07 97       	sbiw	r24, 0x07	; 7
     976:	09 f0       	breq	.+2      	; 0x97a <__stack+0x7b>
     978:	04 c1       	rjmp	.+520    	; 0xb82 <__stack+0x283>
     97a:	e8 c0       	rjmp	.+464    	; 0xb4c <__stack+0x24d>
     97c:	8f 30       	cpi	r24, 0x0F	; 15
     97e:	91 05       	cpc	r25, r1
     980:	39 f0       	breq	.+14     	; 0x990 <__stack+0x91>
     982:	80 31       	cpi	r24, 0x10	; 16
     984:	91 05       	cpc	r25, r1
     986:	29 f1       	breq	.+74     	; 0x9d2 <__stack+0xd3>
     988:	0e 97       	sbiw	r24, 0x0e	; 14
     98a:	09 f0       	breq	.+2      	; 0x98e <__stack+0x8f>
     98c:	fa c0       	rjmp	.+500    	; 0xb82 <__stack+0x283>
     98e:	5e c0       	rjmp	.+188    	; 0xa4c <__stack+0x14d>
	{
		case BUTTON_C:transmitdata('2');
     990:	82 e3       	ldi	r24, 0x32	; 50
     992:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
		              present_menu=CALIBRATE_MODE;
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	80 93 fc 07 	sts	0x07FC, r24
					  clearbuffer();
     99c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
					  list_states[++list_index]=present_menu;
     9a0:	80 91 e7 07 	lds	r24, 0x07E7
     9a4:	90 91 e8 07 	lds	r25, 0x07E8
     9a8:	01 96       	adiw	r24, 0x01	; 1
     9aa:	90 93 e8 07 	sts	0x07E8, r25
     9ae:	80 93 e7 07 	sts	0x07E7, r24
     9b2:	fc 01       	movw	r30, r24
     9b4:	e7 51       	subi	r30, 0x17	; 23
     9b6:	f8 4f       	sbci	r31, 0xF8	; 248
     9b8:	20 91 fc 07 	lds	r18, 0x07FC
     9bc:	20 83       	st	Z, r18
     9be:	2f ef       	ldi	r18, 0xFF	; 255
     9c0:	83 ec       	ldi	r24, 0xC3	; 195
     9c2:	99 e0       	ldi	r25, 0x09	; 9
     9c4:	21 50       	subi	r18, 0x01	; 1
     9c6:	80 40       	sbci	r24, 0x00	; 0
     9c8:	90 40       	sbci	r25, 0x00	; 0
     9ca:	e1 f7       	brne	.-8      	; 0x9c4 <__stack+0xc5>
     9cc:	00 c0       	rjmp	.+0      	; 0x9ce <__stack+0xcf>
     9ce:	00 00       	nop
     9d0:	08 95       	ret
					  _delay_ms(200);
					  break;
		case BUTTON_D:  if(teamselect==RED)    //send start command to hybrid base circuit
     9d2:	80 91 b2 07 	lds	r24, 0x07B2
     9d6:	82 30       	cpi	r24, 0x02	; 2
     9d8:	d9 f4       	brne	.+54     	; 0xa10 <__stack+0x111>
     9da:	06 c0       	rjmp	.+12     	; 0x9e8 <__stack+0xe9>
     9dc:	8f e3       	ldi	r24, 0x3F	; 63
     9de:	9f e1       	ldi	r25, 0x1F	; 31
     9e0:	01 97       	sbiw	r24, 0x01	; 1
     9e2:	f1 f7       	brne	.-4      	; 0x9e0 <__stack+0xe1>
     9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <__stack+0xe7>
     9e6:	00 00       	nop
							{
								while(transceivedata('Z')!='#')
     9e8:	8a e5       	ldi	r24, 0x5A	; 90
     9ea:	0e 94 90 03 	call	0x720	; 0x720 <_Z14transceivedatah>
     9ee:	83 32       	cpi	r24, 0x23	; 35
     9f0:	a9 f7       	brne	.-22     	; 0x9dc <__stack+0xdd>
     9f2:	06 c0       	rjmp	.+12     	; 0xa00 <__stack+0x101>
     9f4:	8f e3       	ldi	r24, 0x3F	; 63
     9f6:	9f e1       	ldi	r25, 0x1F	; 31
     9f8:	01 97       	sbiw	r24, 0x01	; 1
     9fa:	f1 f7       	brne	.-4      	; 0x9f8 <__stack+0xf9>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <__stack+0xff>
     9fe:	00 00       	nop
								{
									_delay_ms(2);
								}
								while(transceivedata('f')!='#')
     a00:	86 e6       	ldi	r24, 0x66	; 102
     a02:	0e 94 90 03 	call	0x720	; 0x720 <_Z14transceivedatah>
     a06:	83 32       	cpi	r24, 0x23	; 35
     a08:	a9 f7       	brne	.-22     	; 0x9f4 <__stack+0xf5>
								{
									_delay_ms(2);
								}
								connection_check_enable=0;
     a0a:	10 92 00 01 	sts	0x0100, r1
     a0e:	08 95       	ret
							}
						else if(teamselect==BLUE)
     a10:	84 30       	cpi	r24, 0x04	; 4
     a12:	09 f0       	breq	.+2      	; 0xa16 <__stack+0x117>
     a14:	b6 c0       	rjmp	.+364    	; 0xb82 <__stack+0x283>
     a16:	06 c0       	rjmp	.+12     	; 0xa24 <__stack+0x125>
     a18:	8f e3       	ldi	r24, 0x3F	; 63
     a1a:	9f e1       	ldi	r25, 0x1F	; 31
     a1c:	01 97       	sbiw	r24, 0x01	; 1
     a1e:	f1 f7       	brne	.-4      	; 0xa1c <__stack+0x11d>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <__stack+0x123>
     a22:	00 00       	nop
						{
							while(transceivedata('X')!='#')
     a24:	88 e5       	ldi	r24, 0x58	; 88
     a26:	0e 94 90 03 	call	0x720	; 0x720 <_Z14transceivedatah>
     a2a:	83 32       	cpi	r24, 0x23	; 35
     a2c:	a9 f7       	brne	.-22     	; 0xa18 <__stack+0x119>
     a2e:	06 c0       	rjmp	.+12     	; 0xa3c <__stack+0x13d>
     a30:	8f e3       	ldi	r24, 0x3F	; 63
     a32:	9f e1       	ldi	r25, 0x1F	; 31
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <__stack+0x135>
     a38:	00 c0       	rjmp	.+0      	; 0xa3a <__stack+0x13b>
     a3a:	00 00       	nop
							{
								_delay_ms(2);
							}
							while(transceivedata('f')!='#')
     a3c:	86 e6       	ldi	r24, 0x66	; 102
     a3e:	0e 94 90 03 	call	0x720	; 0x720 <_Z14transceivedatah>
     a42:	83 32       	cpi	r24, 0x23	; 35
     a44:	a9 f7       	brne	.-22     	; 0xa30 <__stack+0x131>
							{
								_delay_ms(2);
							}
							connection_check_enable=0;
     a46:	10 92 00 01 	sts	0x0100, r1
     a4a:	08 95       	ret
						}
					    break;
						
		case BUTTON_B: Printf(1," Calibrating.....    ");
     a4c:	84 ee       	ldi	r24, 0xE4	; 228
     a4e:	91 e0       	ldi	r25, 0x01	; 1
     a50:	9f 93       	push	r25
     a52:	8f 93       	push	r24
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	8f 93       	push	r24
     a58:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		               transmitdata('4');
     a5c:	84 e3       	ldi	r24, 0x34	; 52
     a5e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
		               transmitdata('4');
     a62:	84 e3       	ldi	r24, 0x34	; 52
     a64:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
     a68:	8f e1       	ldi	r24, 0x1F	; 31
     a6a:	9e e4       	ldi	r25, 0x4E	; 78
     a6c:	01 97       	sbiw	r24, 0x01	; 1
     a6e:	f1 f7       	brne	.-4      	; 0xa6c <__stack+0x16d>
     a70:	00 c0       	rjmp	.+0      	; 0xa72 <__stack+0x173>
     a72:	00 00       	nop
		               _delay_ms(5);
					   transmitdata('t');
     a74:	84 e7       	ldi	r24, 0x74	; 116
     a76:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
     a7a:	9f ef       	ldi	r25, 0xFF	; 255
     a7c:	21 ee       	ldi	r18, 0xE1	; 225
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	91 50       	subi	r25, 0x01	; 1
     a82:	20 40       	sbci	r18, 0x00	; 0
     a84:	80 40       	sbci	r24, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <__stack+0x181>
     a88:	00 c0       	rjmp	.+0      	; 0xa8a <__stack+0x18b>
     a8a:	00 00       	nop
					   _delay_ms(100);
					   datatimeout=0;
     a8c:	10 92 af 07 	sts	0x07AF, r1
     a90:	10 92 ae 07 	sts	0x07AE, r1
					   while(receivedata()!='c')
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	07 c0       	rjmp	.+14     	; 0xaaa <__stack+0x1ab>
					   {
						   if(datatimeout>600)
     a9c:	80 91 ae 07 	lds	r24, 0x07AE
     aa0:	90 91 af 07 	lds	r25, 0x07AF
     aa4:	89 35       	cpi	r24, 0x59	; 89
     aa6:	92 40       	sbci	r25, 0x02	; 2
     aa8:	20 f4       	brcc	.+8      	; 0xab2 <__stack+0x1b3>
		               transmitdata('4');
		               _delay_ms(5);
					   transmitdata('t');
					   _delay_ms(100);
					   datatimeout=0;
					   while(receivedata()!='c')
     aaa:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <_Z11receivedatav>
     aae:	83 36       	cpi	r24, 0x63	; 99
     ab0:	a9 f7       	brne	.-22     	; 0xa9c <__stack+0x19d>
					   {
						   if(datatimeout>600)
						   break;
					   }
					   transmitdata('3');
     ab2:	83 e3       	ldi	r24, 0x33	; 51
     ab4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					   transmitdata('3');
     ab8:	83 e3       	ldi	r24, 0x33	; 51
     aba:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					   duct_calibrate_complete=1;	               
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	80 93 b4 07 	sts	0x07B4, r24
     ac4:	8f ef       	ldi	r24, 0xFF	; 255
     ac6:	91 ee       	ldi	r25, 0xE1	; 225
     ac8:	24 e0       	ldi	r18, 0x04	; 4
     aca:	81 50       	subi	r24, 0x01	; 1
     acc:	90 40       	sbci	r25, 0x00	; 0
     ace:	20 40       	sbci	r18, 0x00	; 0
     ad0:	e1 f7       	brne	.-8      	; 0xaca <__stack+0x1cb>
     ad2:	00 c0       	rjmp	.+0      	; 0xad4 <__stack+0x1d5>
     ad4:	00 00       	nop
     ad6:	08 95       	ret
		               _delay_ms(100);
					   break;
	    case BUTTON_HASH:
		                 present_menu=MODE_CHO0SE;
     ad8:	23 e0       	ldi	r18, 0x03	; 3
     ada:	20 93 fc 07 	sts	0x07FC, r18
						 list_states[++list_index]=present_menu;
     ade:	80 91 e7 07 	lds	r24, 0x07E7
     ae2:	90 91 e8 07 	lds	r25, 0x07E8
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	90 93 e8 07 	sts	0x07E8, r25
     aec:	80 93 e7 07 	sts	0x07E7, r24
     af0:	fc 01       	movw	r30, r24
     af2:	e7 51       	subi	r30, 0x17	; 23
     af4:	f8 4f       	sbci	r31, 0xF8	; 248
     af6:	20 83       	st	Z, r18
     af8:	8f ef       	ldi	r24, 0xFF	; 255
     afa:	93 ec       	ldi	r25, 0xC3	; 195
     afc:	29 e0       	ldi	r18, 0x09	; 9
     afe:	81 50       	subi	r24, 0x01	; 1
     b00:	90 40       	sbci	r25, 0x00	; 0
     b02:	20 40       	sbci	r18, 0x00	; 0
     b04:	e1 f7       	brne	.-8      	; 0xafe <__stack+0x1ff>
     b06:	00 c0       	rjmp	.+0      	; 0xb08 <__stack+0x209>
     b08:	00 00       	nop
     b0a:	08 95       	ret
     b0c:	8f e1       	ldi	r24, 0x1F	; 31
     b0e:	9e e4       	ldi	r25, 0x4E	; 78
     b10:	01 97       	sbiw	r24, 0x01	; 1
     b12:	f1 f7       	brne	.-4      	; 0xb10 <__stack+0x211>
     b14:	00 c0       	rjmp	.+0      	; 0xb16 <__stack+0x217>
     b16:	00 00       	nop
						 _delay_ms(200);
						 break;
		case BUTTON_4:   //select red team
					  while(transceivedata('Z')!='#')
     b18:	8a e5       	ldi	r24, 0x5A	; 90
     b1a:	0e 94 90 03 	call	0x720	; 0x720 <_Z14transceivedatah>
     b1e:	83 32       	cpi	r24, 0x23	; 35
     b20:	a9 f7       	brne	.-22     	; 0xb0c <__stack+0x20d>
					  {
						  _delay_ms(5);
					  }
		              teamselect=RED;
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	80 93 b2 07 	sts	0x07B2, r24
					  connection_check_enable=0;
     b28:	10 92 00 01 	sts	0x0100, r1
     b2c:	9f ef       	ldi	r25, 0xFF	; 255
     b2e:	23 ec       	ldi	r18, 0xC3	; 195
     b30:	89 e0       	ldi	r24, 0x09	; 9
     b32:	91 50       	subi	r25, 0x01	; 1
     b34:	20 40       	sbci	r18, 0x00	; 0
     b36:	80 40       	sbci	r24, 0x00	; 0
     b38:	e1 f7       	brne	.-8      	; 0xb32 <__stack+0x233>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <__stack+0x23d>
     b3c:	00 00       	nop
     b3e:	08 95       	ret
     b40:	8f e1       	ldi	r24, 0x1F	; 31
     b42:	9e e4       	ldi	r25, 0x4E	; 78
     b44:	01 97       	sbiw	r24, 0x01	; 1
     b46:	f1 f7       	brne	.-4      	; 0xb44 <__stack+0x245>
     b48:	00 c0       	rjmp	.+0      	; 0xb4a <__stack+0x24b>
     b4a:	00 00       	nop
		              _delay_ms(200);
					  break;
		case BUTTON_6:   //select blue team
					  while(transceivedata('X')!='#')
     b4c:	88 e5       	ldi	r24, 0x58	; 88
     b4e:	0e 94 90 03 	call	0x720	; 0x720 <_Z14transceivedatah>
     b52:	83 32       	cpi	r24, 0x23	; 35
     b54:	a9 f7       	brne	.-22     	; 0xb40 <__stack+0x241>
					  {
						 _delay_ms(5);
					  }
					  teamselect=BLUE;
     b56:	84 e0       	ldi	r24, 0x04	; 4
     b58:	80 93 b2 07 	sts	0x07B2, r24
					  connection_check_enable=0;
     b5c:	10 92 00 01 	sts	0x0100, r1
     b60:	9f ef       	ldi	r25, 0xFF	; 255
     b62:	23 ec       	ldi	r18, 0xC3	; 195
     b64:	89 e0       	ldi	r24, 0x09	; 9
     b66:	91 50       	subi	r25, 0x01	; 1
     b68:	20 40       	sbci	r18, 0x00	; 0
     b6a:	80 40       	sbci	r24, 0x00	; 0
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <__stack+0x267>
     b6e:	00 c0       	rjmp	.+0      	; 0xb70 <__stack+0x271>
     b70:	00 00       	nop
     b72:	08 95       	ret
		   Printf(4,"Calibrate-C   MENU-#");
		displayflag=0;
	}
	if(connection_checkflag && connection_check_enable)
	{
		if(transceivedata('5')!='6')
     b74:	85 e3       	ldi	r24, 0x35	; 53
     b76:	0e 94 90 03 	call	0x720	; 0x720 <_Z14transceivedatah>
     b7a:	86 33       	cpi	r24, 0x36	; 54
     b7c:	09 f0       	breq	.+2      	; 0xb80 <__stack+0x281>
     b7e:	e7 ce       	rjmp	.-562    	; 0x94e <__stack+0x4f>
     b80:	e9 ce       	rjmp	.-558    	; 0x954 <__stack+0x55>
     b82:	08 95       	ret

00000b84 <_Z15calibratescreenv>:
					 _delay_ms(200);
		              break;
	}
}
void calibratescreen()
{	
     b84:	cf 93       	push	r28
	unsigned char displaycalibrating=0;
	switch(get_key())
     b86:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
     b8a:	8c 30       	cpi	r24, 0x0C	; 12
     b8c:	91 05       	cpc	r25, r1
     b8e:	a1 f1       	breq	.+104    	; 0xbf8 <_Z15calibratescreenv+0x74>
     b90:	8d 30       	cpi	r24, 0x0D	; 13
     b92:	91 05       	cpc	r25, r1
     b94:	21 f0       	breq	.+8      	; 0xb9e <_Z15calibratescreenv+0x1a>
     b96:	06 97       	sbiw	r24, 0x06	; 6
     b98:	09 f0       	breq	.+2      	; 0xb9c <_Z15calibratescreenv+0x18>
     b9a:	6a c0       	rjmp	.+212    	; 0xc70 <_Z15calibratescreenv+0xec>
     b9c:	1a c0       	rjmp	.+52     	; 0xbd2 <_Z15calibratescreenv+0x4e>
	{
		case BUTTON_A:
		               present_menu=list_states[--list_index];
     b9e:	80 91 e7 07 	lds	r24, 0x07E7
     ba2:	90 91 e8 07 	lds	r25, 0x07E8
     ba6:	01 97       	sbiw	r24, 0x01	; 1
     ba8:	90 93 e8 07 	sts	0x07E8, r25
     bac:	80 93 e7 07 	sts	0x07E7, r24
     bb0:	fc 01       	movw	r30, r24
     bb2:	e7 51       	subi	r30, 0x17	; 23
     bb4:	f8 4f       	sbci	r31, 0xF8	; 248
     bb6:	80 81       	ld	r24, Z
     bb8:	80 93 fc 07 	sts	0x07FC, r24
     bbc:	2f ef       	ldi	r18, 0xFF	; 255
     bbe:	83 ec       	ldi	r24, 0xC3	; 195
     bc0:	99 e0       	ldi	r25, 0x09	; 9
     bc2:	21 50       	subi	r18, 0x01	; 1
     bc4:	80 40       	sbci	r24, 0x00	; 0
     bc6:	90 40       	sbci	r25, 0x00	; 0
     bc8:	e1 f7       	brne	.-8      	; 0xbc2 <_Z15calibratescreenv+0x3e>
     bca:	00 c0       	rjmp	.+0      	; 0xbcc <_Z15calibratescreenv+0x48>
     bcc:	00 00       	nop
		              break;
	}
}
void calibratescreen()
{	
	unsigned char displaycalibrating=0;
     bce:	c0 e0       	ldi	r28, 0x00	; 0
     bd0:	50 c0       	rjmp	.+160    	; 0xc72 <_Z15calibratescreenv+0xee>
		case BUTTON_A:
		               present_menu=list_states[--list_index];
					  _delay_ms(200);
		              break;
		case BUTTON_5://send calibrate command to hybrid base
		               transmitdata('C');
     bd2:	83 e4       	ldi	r24, 0x43	; 67
     bd4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					   displaycalibrating=1;
					   linereadenable=0;
     bd8:	10 92 b9 07 	sts	0x07B9, r1
					   displayflag=1;
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 b7 07 	sts	0x07B7, r24
     be2:	2f ef       	ldi	r18, 0xFF	; 255
     be4:	83 ec       	ldi	r24, 0xC3	; 195
     be6:	99 e0       	ldi	r25, 0x09	; 9
     be8:	21 50       	subi	r18, 0x01	; 1
     bea:	80 40       	sbci	r24, 0x00	; 0
     bec:	90 40       	sbci	r25, 0x00	; 0
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <_Z15calibratescreenv+0x64>
     bf0:	00 c0       	rjmp	.+0      	; 0xbf2 <_Z15calibratescreenv+0x6e>
     bf2:	00 00       	nop
		               present_menu=list_states[--list_index];
					  _delay_ms(200);
		              break;
		case BUTTON_5://send calibrate command to hybrid base
		               transmitdata('C');
					   displaycalibrating=1;
     bf4:	c1 e0       	ldi	r28, 0x01	; 1
     bf6:	3d c0       	rjmp	.+122    	; 0xc72 <_Z15calibratescreenv+0xee>
					   linereadenable=0;
					   displayflag=1;
					   _delay_ms(200);
		               break;
		case BUTTON_AST://send read command to base circuit to read line position
					   transmitdata('V');
     bf8:	86 e5       	ldi	r24, 0x56	; 86
     bfa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					   displaycalibrating=0;
					    linereadenable=1;
     bfe:	c1 e0       	ldi	r28, 0x01	; 1
     c00:	c0 93 b9 07 	sts	0x07B9, r28
						clearbuffer();
     c04:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
						strcpy(buffer1,getUART_data('A','#'));
     c08:	63 e2       	ldi	r22, 0x23	; 35
     c0a:	81 e4       	ldi	r24, 0x41	; 65
     c0c:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
     c10:	bc 01       	movw	r22, r24
     c12:	8e ec       	ldi	r24, 0xCE	; 206
     c14:	97 e0       	ldi	r25, 0x07	; 7
     c16:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
     c1a:	8f e1       	ldi	r24, 0x1F	; 31
     c1c:	9e e4       	ldi	r25, 0x4E	; 78
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	f1 f7       	brne	.-4      	; 0xc1e <_Z15calibratescreenv+0x9a>
     c22:	00 c0       	rjmp	.+0      	; 0xc24 <_Z15calibratescreenv+0xa0>
     c24:	00 00       	nop
						_delay_ms(5);
						strcpy(buffer2,getUART_data('B','#'));
     c26:	63 e2       	ldi	r22, 0x23	; 35
     c28:	82 e4       	ldi	r24, 0x42	; 66
     c2a:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
     c2e:	bc 01       	movw	r22, r24
     c30:	84 ec       	ldi	r24, 0xC4	; 196
     c32:	97 e0       	ldi	r25, 0x07	; 7
     c34:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
     c38:	8f e1       	ldi	r24, 0x1F	; 31
     c3a:	9e e4       	ldi	r25, 0x4E	; 78
     c3c:	01 97       	sbiw	r24, 0x01	; 1
     c3e:	f1 f7       	brne	.-4      	; 0xc3c <_Z15calibratescreenv+0xb8>
     c40:	00 c0       	rjmp	.+0      	; 0xc42 <_Z15calibratescreenv+0xbe>
     c42:	00 00       	nop
						_delay_ms(5);
						strcpy(buffer3,getUART_data('N','#'));
     c44:	63 e2       	ldi	r22, 0x23	; 35
     c46:	8e e4       	ldi	r24, 0x4E	; 78
     c48:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
     c4c:	bc 01       	movw	r22, r24
     c4e:	8a eb       	ldi	r24, 0xBA	; 186
     c50:	97 e0       	ldi	r25, 0x07	; 7
     c52:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
						displayflag=1;				   
     c56:	c0 93 b7 07 	sts	0x07B7, r28
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	23 ec       	ldi	r18, 0xC3	; 195
     c5e:	89 e0       	ldi	r24, 0x09	; 9
     c60:	91 50       	subi	r25, 0x01	; 1
     c62:	20 40       	sbci	r18, 0x00	; 0
     c64:	80 40       	sbci	r24, 0x00	; 0
     c66:	e1 f7       	brne	.-8      	; 0xc60 <_Z15calibratescreenv+0xdc>
     c68:	00 c0       	rjmp	.+0      	; 0xc6a <_Z15calibratescreenv+0xe6>
     c6a:	00 00       	nop
					   displayflag=1;
					   _delay_ms(200);
		               break;
		case BUTTON_AST://send read command to base circuit to read line position
					   transmitdata('V');
					   displaycalibrating=0;
     c6c:	c0 e0       	ldi	r28, 0x00	; 0
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <_Z15calibratescreenv+0xee>
		              break;
	}
}
void calibratescreen()
{	
	unsigned char displaycalibrating=0;
     c70:	c0 e0       	ldi	r28, 0x00	; 0
						strcpy(buffer3,getUART_data('N','#'));
						displayflag=1;				   
						_delay_ms(200);
		                break;
	}
	if(displayflag)
     c72:	80 91 b7 07 	lds	r24, 0x07B7
     c76:	88 23       	and	r24, r24
     c78:	09 f4       	brne	.+2      	; 0xc7c <_Z15calibratescreenv+0xf8>
     c7a:	55 c0       	rjmp	.+170    	; 0xd26 <_Z15calibratescreenv+0x1a2>
	{
		lcd_clear();
     c7c:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#Calib Mode#  ");
     c80:	8a ef       	ldi	r24, 0xFA	; 250
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	9f 93       	push	r25
     c86:	8f 93       	push	r24
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	8f 93       	push	r24
     c8c:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		if(displaycalibrating)
     c90:	0f 90       	pop	r0
     c92:	0f 90       	pop	r0
     c94:	0f 90       	pop	r0
     c96:	cc 23       	and	r28, r28
     c98:	a9 f0       	breq	.+42     	; 0xcc4 <_Z15calibratescreenv+0x140>
		{
		   Printf(2,"   Calibrating....");
     c9a:	89 e0       	ldi	r24, 0x09	; 9
     c9c:	92 e0       	ldi	r25, 0x02	; 2
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	8f 93       	push	r24
     ca6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     caa:	9f ef       	ldi	r25, 0xFF	; 255
     cac:	27 ea       	ldi	r18, 0xA7	; 167
     cae:	81 e6       	ldi	r24, 0x61	; 97
     cb0:	91 50       	subi	r25, 0x01	; 1
     cb2:	20 40       	sbci	r18, 0x00	; 0
     cb4:	80 40       	sbci	r24, 0x00	; 0
     cb6:	e1 f7       	brne	.-8      	; 0xcb0 <_Z15calibratescreenv+0x12c>
     cb8:	00 c0       	rjmp	.+0      	; 0xcba <_Z15calibratescreenv+0x136>
     cba:	00 00       	nop
     cbc:	0f 90       	pop	r0
     cbe:	0f 90       	pop	r0
     cc0:	0f 90       	pop	r0
     cc2:	0b c0       	rjmp	.+22     	; 0xcda <_Z15calibratescreenv+0x156>
		   _delay_ms(2000);
		}		   
		else
		{
		   Printf(2,"   Calibrate-5    ");
     cc4:	8c e1       	ldi	r24, 0x1C	; 28
     cc6:	92 e0       	ldi	r25, 0x02	; 2
     cc8:	9f 93       	push	r25
     cca:	8f 93       	push	r24
     ccc:	82 e0       	ldi	r24, 0x02	; 2
     cce:	8f 93       	push	r24
     cd0:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
		}		   
		Printf(3,"LS1=%s  LS2=%s",buffer1,buffer2);
     cda:	84 ec       	ldi	r24, 0xC4	; 196
     cdc:	97 e0       	ldi	r25, 0x07	; 7
     cde:	9f 93       	push	r25
     ce0:	8f 93       	push	r24
     ce2:	8e ec       	ldi	r24, 0xCE	; 206
     ce4:	97 e0       	ldi	r25, 0x07	; 7
     ce6:	9f 93       	push	r25
     ce8:	8f 93       	push	r24
     cea:	8f e2       	ldi	r24, 0x2F	; 47
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	9f 93       	push	r25
     cf0:	8f 93       	push	r24
     cf2:	83 e0       	ldi	r24, 0x03	; 3
     cf4:	8f 93       	push	r24
     cf6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"Line=%s    Read-*",buffer3);	
     cfa:	8a eb       	ldi	r24, 0xBA	; 186
     cfc:	97 e0       	ldi	r25, 0x07	; 7
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	8e e3       	ldi	r24, 0x3E	; 62
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	84 e0       	ldi	r24, 0x04	; 4
     d0c:	8f 93       	push	r24
     d0e:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
     d12:	10 92 b7 07 	sts	0x07B7, r1
     d16:	8d b7       	in	r24, 0x3d	; 61
     d18:	9e b7       	in	r25, 0x3e	; 62
     d1a:	0c 96       	adiw	r24, 0x0c	; 12
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	9e bf       	out	0x3e, r25	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	8d bf       	out	0x3d, r24	; 61
	}
}
     d26:	cf 91       	pop	r28
     d28:	08 95       	ret

00000d2a <_Z17choosemode_screenv>:
void choosemode_screen()
{
	unsigned int testdata;
	if(displayflag)
     d2a:	80 91 b7 07 	lds	r24, 0x07B7
     d2e:	88 23       	and	r24, r24
     d30:	61 f1       	breq	.+88     	; 0xd8a <_Z17choosemode_screenv+0x60>
	{
		lcd_clear();
     d32:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#Circuit Mode#  ");
     d36:	80 e5       	ldi	r24, 0x50	; 80
     d38:	92 e0       	ldi	r25, 0x02	; 2
     d3a:	9f 93       	push	r25
     d3c:	8f 93       	push	r24
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	8f 93       	push	r24
     d42:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"1.Hybrid Base  ");
     d46:	81 e6       	ldi	r24, 0x61	; 97
     d48:	92 e0       	ldi	r25, 0x02	; 2
     d4a:	9f 93       	push	r25
     d4c:	8f 93       	push	r24
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	8f 93       	push	r24
     d52:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"2.Hybrid Top");
     d56:	81 e7       	ldi	r24, 0x71	; 113
     d58:	92 e0       	ldi	r25, 0x02	; 2
     d5a:	9f 93       	push	r25
     d5c:	8f 93       	push	r24
     d5e:	83 e0       	ldi	r24, 0x03	; 3
     d60:	8f 93       	push	r24
     d62:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"3.Retry Mode  Back-A");
     d66:	8e e7       	ldi	r24, 0x7E	; 126
     d68:	92 e0       	ldi	r25, 0x02	; 2
     d6a:	9f 93       	push	r25
     d6c:	8f 93       	push	r24
     d6e:	84 e0       	ldi	r24, 0x04	; 4
     d70:	8f 93       	push	r24
     d72:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
     d76:	10 92 b7 07 	sts	0x07B7, r1
     d7a:	8d b7       	in	r24, 0x3d	; 61
     d7c:	9e b7       	in	r25, 0x3e	; 62
     d7e:	0c 96       	adiw	r24, 0x0c	; 12
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	9e bf       	out	0x3e, r25	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	8d bf       	out	0x3d, r24	; 61
	}
	testdata=get_key();
     d8a:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
	switch(testdata)
     d8e:	83 30       	cpi	r24, 0x03	; 3
     d90:	91 05       	cpc	r25, r1
     d92:	91 f1       	breq	.+100    	; 0xdf8 <_Z17choosemode_screenv+0xce>
     d94:	20 f4       	brcc	.+8      	; 0xd9e <_Z17choosemode_screenv+0x74>
     d96:	02 97       	sbiw	r24, 0x02	; 2
     d98:	09 f0       	breq	.+2      	; 0xd9c <_Z17choosemode_screenv+0x72>
     d9a:	9b c0       	rjmp	.+310    	; 0xed2 <_Z17choosemode_screenv+0x1a8>
     d9c:	08 c0       	rjmp	.+16     	; 0xdae <_Z17choosemode_screenv+0x84>
     d9e:	84 30       	cpi	r24, 0x04	; 4
     da0:	91 05       	cpc	r25, r1
     da2:	09 f4       	brne	.+2      	; 0xda6 <_Z17choosemode_screenv+0x7c>
     da4:	5d c0       	rjmp	.+186    	; 0xe60 <_Z17choosemode_screenv+0x136>
     da6:	0d 97       	sbiw	r24, 0x0d	; 13
     da8:	09 f0       	breq	.+2      	; 0xdac <_Z17choosemode_screenv+0x82>
     daa:	93 c0       	rjmp	.+294    	; 0xed2 <_Z17choosemode_screenv+0x1a8>
     dac:	78 c0       	rjmp	.+240    	; 0xe9e <_Z17choosemode_screenv+0x174>
	{
		case BUTTON_1:
		              present_menu=HYBRID_BASE_DISP;
     dae:	84 e0       	ldi	r24, 0x04	; 4
     db0:	80 93 fc 07 	sts	0x07FC, r24
					  transmitdata('3');
     db4:	83 e3       	ldi	r24, 0x33	; 51
     db6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					  list_states[++list_index]=present_menu;
     dba:	80 91 e7 07 	lds	r24, 0x07E7
     dbe:	90 91 e8 07 	lds	r25, 0x07E8
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	90 93 e8 07 	sts	0x07E8, r25
     dc8:	80 93 e7 07 	sts	0x07E7, r24
     dcc:	fc 01       	movw	r30, r24
     dce:	e7 51       	subi	r30, 0x17	; 23
     dd0:	f8 4f       	sbci	r31, 0xF8	; 248
     dd2:	20 91 fc 07 	lds	r18, 0x07FC
     dd6:	20 83       	st	Z, r18
					  present_state=BASE_DISP_LIST1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	90 93 fb 07 	sts	0x07FB, r25
     de0:	80 93 fa 07 	sts	0x07FA, r24
     de4:	9f ef       	ldi	r25, 0xFF	; 255
     de6:	23 ec       	ldi	r18, 0xC3	; 195
     de8:	89 e0       	ldi	r24, 0x09	; 9
     dea:	91 50       	subi	r25, 0x01	; 1
     dec:	20 40       	sbci	r18, 0x00	; 0
     dee:	80 40       	sbci	r24, 0x00	; 0
     df0:	e1 f7       	brne	.-8      	; 0xdea <_Z17choosemode_screenv+0xc0>
     df2:	00 c0       	rjmp	.+0      	; 0xdf4 <_Z17choosemode_screenv+0xca>
     df4:	00 00       	nop
     df6:	08 95       	ret
					  _delay_ms(200);
					  break;
		case BUTTON_2:
		              present_menu=HYBRID_TOP_DISP;
     df8:	85 e0       	ldi	r24, 0x05	; 5
     dfa:	80 93 fc 07 	sts	0x07FC, r24
					  present_state=BASE_DISP_LIST1;
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	90 93 fb 07 	sts	0x07FB, r25
     e06:	80 93 fa 07 	sts	0x07FA, r24
					  transmitdata('4');
     e0a:	84 e3       	ldi	r24, 0x34	; 52
     e0c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
     e10:	8f e3       	ldi	r24, 0x3F	; 63
     e12:	9f e1       	ldi	r25, 0x1F	; 31
     e14:	01 97       	sbiw	r24, 0x01	; 1
     e16:	f1 f7       	brne	.-4      	; 0xe14 <_Z17choosemode_screenv+0xea>
     e18:	00 c0       	rjmp	.+0      	; 0xe1a <_Z17choosemode_screenv+0xf0>
     e1a:	00 00       	nop
					  _delay_ms(2);
					  transmitdata('Z');
     e1c:	8a e5       	ldi	r24, 0x5A	; 90
     e1e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
     e22:	8f e3       	ldi	r24, 0x3F	; 63
     e24:	9f e1       	ldi	r25, 0x1F	; 31
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	f1 f7       	brne	.-4      	; 0xe26 <_Z17choosemode_screenv+0xfc>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <_Z17choosemode_screenv+0x102>
     e2c:	00 00       	nop
					  _delay_ms(2);
					  list_states[++list_index]=present_menu;
     e2e:	80 91 e7 07 	lds	r24, 0x07E7
     e32:	90 91 e8 07 	lds	r25, 0x07E8
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	90 93 e8 07 	sts	0x07E8, r25
     e3c:	80 93 e7 07 	sts	0x07E7, r24
     e40:	fc 01       	movw	r30, r24
     e42:	e7 51       	subi	r30, 0x17	; 23
     e44:	f8 4f       	sbci	r31, 0xF8	; 248
     e46:	20 91 fc 07 	lds	r18, 0x07FC
     e4a:	20 83       	st	Z, r18
     e4c:	9f ef       	ldi	r25, 0xFF	; 255
     e4e:	23 ec       	ldi	r18, 0xC3	; 195
     e50:	89 e0       	ldi	r24, 0x09	; 9
     e52:	91 50       	subi	r25, 0x01	; 1
     e54:	20 40       	sbci	r18, 0x00	; 0
     e56:	80 40       	sbci	r24, 0x00	; 0
     e58:	e1 f7       	brne	.-8      	; 0xe52 <_Z17choosemode_screenv+0x128>
     e5a:	00 c0       	rjmp	.+0      	; 0xe5c <_Z17choosemode_screenv+0x132>
     e5c:	00 00       	nop
     e5e:	08 95       	ret
					  _delay_ms(200);
		              break;
		case BUTTON_3:
		present_menu=RETRY_MODE;
     e60:	86 e0       	ldi	r24, 0x06	; 6
     e62:	80 93 fc 07 	sts	0x07FC, r24
		transmitdata('3');
     e66:	83 e3       	ldi	r24, 0x33	; 51
     e68:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
		list_states[++list_index]=present_menu;
     e6c:	80 91 e7 07 	lds	r24, 0x07E7
     e70:	90 91 e8 07 	lds	r25, 0x07E8
     e74:	01 96       	adiw	r24, 0x01	; 1
     e76:	90 93 e8 07 	sts	0x07E8, r25
     e7a:	80 93 e7 07 	sts	0x07E7, r24
     e7e:	fc 01       	movw	r30, r24
     e80:	e7 51       	subi	r30, 0x17	; 23
     e82:	f8 4f       	sbci	r31, 0xF8	; 248
     e84:	20 91 fc 07 	lds	r18, 0x07FC
     e88:	20 83       	st	Z, r18
     e8a:	9f ef       	ldi	r25, 0xFF	; 255
     e8c:	29 e6       	ldi	r18, 0x69	; 105
     e8e:	88 e1       	ldi	r24, 0x18	; 24
     e90:	91 50       	subi	r25, 0x01	; 1
     e92:	20 40       	sbci	r18, 0x00	; 0
     e94:	80 40       	sbci	r24, 0x00	; 0
     e96:	e1 f7       	brne	.-8      	; 0xe90 <_Z17choosemode_screenv+0x166>
     e98:	00 c0       	rjmp	.+0      	; 0xe9a <_Z17choosemode_screenv+0x170>
     e9a:	00 00       	nop
     e9c:	08 95       	ret
		_delay_ms(500);
		break;
		case BUTTON_A:present_menu=list_states[--list_index];
     e9e:	80 91 e7 07 	lds	r24, 0x07E7
     ea2:	90 91 e8 07 	lds	r25, 0x07E8
     ea6:	01 97       	sbiw	r24, 0x01	; 1
     ea8:	90 93 e8 07 	sts	0x07E8, r25
     eac:	80 93 e7 07 	sts	0x07E7, r24
     eb0:	fc 01       	movw	r30, r24
     eb2:	e7 51       	subi	r30, 0x17	; 23
     eb4:	f8 4f       	sbci	r31, 0xF8	; 248
     eb6:	80 81       	ld	r24, Z
     eb8:	80 93 fc 07 	sts	0x07FC, r24
		              clearbuffer();
     ebc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
     ec0:	9f ef       	ldi	r25, 0xFF	; 255
     ec2:	23 ec       	ldi	r18, 0xC3	; 195
     ec4:	89 e0       	ldi	r24, 0x09	; 9
     ec6:	91 50       	subi	r25, 0x01	; 1
     ec8:	20 40       	sbci	r18, 0x00	; 0
     eca:	80 40       	sbci	r24, 0x00	; 0
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <_Z17choosemode_screenv+0x19c>
     ece:	00 c0       	rjmp	.+0      	; 0xed0 <_Z17choosemode_screenv+0x1a6>
     ed0:	00 00       	nop
     ed2:	08 95       	ret

00000ed4 <_Z17retry_mode_screenv>:
		              break;			  			  
	}
}
void retry_mode_screen()
{
	switch(get_key())
     ed4:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	91 05       	cpc	r25, r1
     edc:	c9 f1       	breq	.+114    	; 0xf50 <_Z17retry_mode_screenv+0x7c>
     ede:	38 f4       	brcc	.+14     	; 0xeee <_Z17retry_mode_screenv+0x1a>
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	91 05       	cpc	r25, r1
     ee4:	61 f0       	breq	.+24     	; 0xefe <_Z17retry_mode_screenv+0x2a>
     ee6:	03 97       	sbiw	r24, 0x03	; 3
     ee8:	09 f0       	breq	.+2      	; 0xeec <_Z17retry_mode_screenv+0x18>
     eea:	99 c0       	rjmp	.+306    	; 0x101e <_Z17retry_mode_screenv+0x14a>
     eec:	15 c0       	rjmp	.+42     	; 0xf18 <_Z17retry_mode_screenv+0x44>
     eee:	8d 30       	cpi	r24, 0x0D	; 13
     ef0:	91 05       	cpc	r25, r1
     ef2:	09 f4       	brne	.+2      	; 0xef6 <_Z17retry_mode_screenv+0x22>
     ef4:	49 c0       	rjmp	.+146    	; 0xf88 <_Z17retry_mode_screenv+0xb4>
     ef6:	40 97       	sbiw	r24, 0x10	; 16
     ef8:	09 f0       	breq	.+2      	; 0xefc <_Z17retry_mode_screenv+0x28>
     efa:	91 c0       	rjmp	.+290    	; 0x101e <_Z17retry_mode_screenv+0x14a>
     efc:	60 c0       	rjmp	.+192    	; 0xfbe <_Z17retry_mode_screenv+0xea>
	{
		case BUTTON_1:
		retry_mode=1;
     efe:	81 e0       	ldi	r24, 0x01	; 1
     f00:	80 93 b3 07 	sts	0x07B3, r24
     f04:	2f ef       	ldi	r18, 0xFF	; 255
     f06:	83 ec       	ldi	r24, 0xC3	; 195
     f08:	99 e0       	ldi	r25, 0x09	; 9
     f0a:	21 50       	subi	r18, 0x01	; 1
     f0c:	80 40       	sbci	r24, 0x00	; 0
     f0e:	90 40       	sbci	r25, 0x00	; 0
     f10:	e1 f7       	brne	.-8      	; 0xf0a <_Z17retry_mode_screenv+0x36>
     f12:	00 c0       	rjmp	.+0      	; 0xf14 <_Z17retry_mode_screenv+0x40>
     f14:	00 00       	nop
     f16:	83 c0       	rjmp	.+262    	; 0x101e <_Z17retry_mode_screenv+0x14a>
		_delay_ms(200);
		
		break;
		case BUTTON_2:
		retry_mode=2;
     f18:	82 e0       	ldi	r24, 0x02	; 2
     f1a:	80 93 b3 07 	sts	0x07B3, r24
		transmitdata('4');
     f1e:	84 e3       	ldi	r24, 0x34	; 52
     f20:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
		transmitdata('4');
     f24:	84 e3       	ldi	r24, 0x34	; 52
     f26:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
     f2a:	8f e3       	ldi	r24, 0x3F	; 63
     f2c:	9f e1       	ldi	r25, 0x1F	; 31
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <_Z17retry_mode_screenv+0x5a>
     f32:	00 c0       	rjmp	.+0      	; 0xf34 <_Z17retry_mode_screenv+0x60>
     f34:	00 00       	nop
		_delay_ms(2);
		transmitdata('X');
     f36:	88 e5       	ldi	r24, 0x58	; 88
     f38:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
     f3c:	9f ef       	ldi	r25, 0xFF	; 255
     f3e:	23 ec       	ldi	r18, 0xC3	; 195
     f40:	89 e0       	ldi	r24, 0x09	; 9
     f42:	91 50       	subi	r25, 0x01	; 1
     f44:	20 40       	sbci	r18, 0x00	; 0
     f46:	80 40       	sbci	r24, 0x00	; 0
     f48:	e1 f7       	brne	.-8      	; 0xf42 <_Z17retry_mode_screenv+0x6e>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <_Z17retry_mode_screenv+0x78>
     f4c:	00 00       	nop
     f4e:	67 c0       	rjmp	.+206    	; 0x101e <_Z17retry_mode_screenv+0x14a>
		_delay_ms(200);
		break;
		
		case BUTTON_3:
		retry_mode=3;
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	80 93 b3 07 	sts	0x07B3, r24
		transmitdata('4');
     f56:	84 e3       	ldi	r24, 0x34	; 52
     f58:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
		transmitdata('4');
     f5c:	84 e3       	ldi	r24, 0x34	; 52
     f5e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
     f62:	8f e3       	ldi	r24, 0x3F	; 63
     f64:	9f e1       	ldi	r25, 0x1F	; 31
     f66:	01 97       	sbiw	r24, 0x01	; 1
     f68:	f1 f7       	brne	.-4      	; 0xf66 <_Z17retry_mode_screenv+0x92>
     f6a:	00 c0       	rjmp	.+0      	; 0xf6c <_Z17retry_mode_screenv+0x98>
     f6c:	00 00       	nop
		_delay_ms(2);
		transmitdata('X');
     f6e:	88 e5       	ldi	r24, 0x58	; 88
     f70:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
     f74:	9f ef       	ldi	r25, 0xFF	; 255
     f76:	23 ec       	ldi	r18, 0xC3	; 195
     f78:	89 e0       	ldi	r24, 0x09	; 9
     f7a:	91 50       	subi	r25, 0x01	; 1
     f7c:	20 40       	sbci	r18, 0x00	; 0
     f7e:	80 40       	sbci	r24, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <_Z17retry_mode_screenv+0xa6>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <_Z17retry_mode_screenv+0xb0>
     f84:	00 00       	nop
     f86:	4b c0       	rjmp	.+150    	; 0x101e <_Z17retry_mode_screenv+0x14a>
		_delay_ms(200);
		break;
		
		case BUTTON_A:present_menu=list_states[--list_index];
     f88:	80 91 e7 07 	lds	r24, 0x07E7
     f8c:	90 91 e8 07 	lds	r25, 0x07E8
     f90:	01 97       	sbiw	r24, 0x01	; 1
     f92:	90 93 e8 07 	sts	0x07E8, r25
     f96:	80 93 e7 07 	sts	0x07E7, r24
     f9a:	fc 01       	movw	r30, r24
     f9c:	e7 51       	subi	r30, 0x17	; 23
     f9e:	f8 4f       	sbci	r31, 0xF8	; 248
     fa0:	80 81       	ld	r24, Z
     fa2:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
     fa6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
     faa:	9f ef       	ldi	r25, 0xFF	; 255
     fac:	23 ec       	ldi	r18, 0xC3	; 195
     fae:	89 e0       	ldi	r24, 0x09	; 9
     fb0:	91 50       	subi	r25, 0x01	; 1
     fb2:	20 40       	sbci	r18, 0x00	; 0
     fb4:	80 40       	sbci	r24, 0x00	; 0
     fb6:	e1 f7       	brne	.-8      	; 0xfb0 <_Z17retry_mode_screenv+0xdc>
     fb8:	00 c0       	rjmp	.+0      	; 0xfba <_Z17retry_mode_screenv+0xe6>
     fba:	00 00       	nop
     fbc:	30 c0       	rjmp	.+96     	; 0x101e <_Z17retry_mode_screenv+0x14a>
		_delay_ms(200);
		break;
		case BUTTON_D:
		             if(retry_mode==1)
     fbe:	80 91 b3 07 	lds	r24, 0x07B3
     fc2:	81 30       	cpi	r24, 0x01	; 1
     fc4:	49 f4       	brne	.+18     	; 0xfd8 <_Z17retry_mode_screenv+0x104>
					 {
					   transmitdata('3');
     fc6:	83 e3       	ldi	r24, 0x33	; 51
     fc8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					   transmitdata('3');
     fcc:	83 e3       	ldi	r24, 0x33	; 51
     fce:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					   transmitdata('p');	 
     fd2:	80 e7       	ldi	r24, 0x70	; 112
     fd4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					 }
					 
					 if(retry_mode==2)
     fd8:	80 91 b3 07 	lds	r24, 0x07B3
     fdc:	82 30       	cpi	r24, 0x02	; 2
     fde:	49 f4       	brne	.+18     	; 0xff2 <_Z17retry_mode_screenv+0x11e>
					 {
						 transmitdata('3');
     fe0:	83 e3       	ldi	r24, 0x33	; 51
     fe2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
						 transmitdata('3');
     fe6:	83 e3       	ldi	r24, 0x33	; 51
     fe8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
						 transmitdata('q');
     fec:	81 e7       	ldi	r24, 0x71	; 113
     fee:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					 }
					 if(retry_mode==3)
     ff2:	80 91 b3 07 	lds	r24, 0x07B3
     ff6:	83 30       	cpi	r24, 0x03	; 3
     ff8:	49 f4       	brne	.+18     	; 0x100c <_Z17retry_mode_screenv+0x138>
					 {
						 transmitdata('3');
     ffa:	83 e3       	ldi	r24, 0x33	; 51
     ffc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
						 transmitdata('3');
    1000:	83 e3       	ldi	r24, 0x33	; 51
    1002:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
						 transmitdata('r'); 
    1006:	82 e7       	ldi	r24, 0x72	; 114
    1008:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    100c:	9f ef       	ldi	r25, 0xFF	; 255
    100e:	29 e6       	ldi	r18, 0x69	; 105
    1010:	88 e1       	ldi	r24, 0x18	; 24
    1012:	91 50       	subi	r25, 0x01	; 1
    1014:	20 40       	sbci	r18, 0x00	; 0
    1016:	80 40       	sbci	r24, 0x00	; 0
    1018:	e1 f7       	brne	.-8      	; 0x1012 <_Z17retry_mode_screenv+0x13e>
    101a:	00 c0       	rjmp	.+0      	; 0x101c <_Z17retry_mode_screenv+0x148>
    101c:	00 00       	nop
					 }
					
					 _delay_ms(500);
	}
	if(displayflag)
    101e:	80 91 b7 07 	lds	r24, 0x07B7
    1022:	88 23       	and	r24, r24
    1024:	09 f4       	brne	.+2      	; 0x1028 <_Z17retry_mode_screenv+0x154>
    1026:	7b c0       	rjmp	.+246    	; 0x111e <_Z17retry_mode_screenv+0x24a>
	{
		lcd_clear();
    1028:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		if(!retry_mode)
    102c:	80 91 b3 07 	lds	r24, 0x07B3
    1030:	81 11       	cpse	r24, r1
    1032:	29 c0       	rjmp	.+82     	; 0x1086 <_Z17retry_mode_screenv+0x1b2>
		{
			Printf(1,"#Circuit Mode#");
    1034:	83 e9       	ldi	r24, 0x93	; 147
    1036:	92 e0       	ldi	r25, 0x02	; 2
    1038:	9f 93       	push	r25
    103a:	8f 93       	push	r24
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	8f 93       	push	r24
    1040:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(2,"1.Retry Mode 1");
    1044:	82 ea       	ldi	r24, 0xA2	; 162
    1046:	92 e0       	ldi	r25, 0x02	; 2
    1048:	9f 93       	push	r25
    104a:	8f 93       	push	r24
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	8f 93       	push	r24
    1050:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"2.Retry Mode 2");
    1054:	81 eb       	ldi	r24, 0xB1	; 177
    1056:	92 e0       	ldi	r25, 0x02	; 2
    1058:	9f 93       	push	r25
    105a:	8f 93       	push	r24
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	8f 93       	push	r24
    1060:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(4,"3.Retry Mode 3");
    1064:	80 ec       	ldi	r24, 0xC0	; 192
    1066:	92 e0       	ldi	r25, 0x02	; 2
    1068:	9f 93       	push	r25
    106a:	8f 93       	push	r24
    106c:	84 e0       	ldi	r24, 0x04	; 4
    106e:	8f 93       	push	r24
    1070:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    1074:	8d b7       	in	r24, 0x3d	; 61
    1076:	9e b7       	in	r25, 0x3e	; 62
    1078:	0c 96       	adiw	r24, 0x0c	; 12
    107a:	0f b6       	in	r0, 0x3f	; 63
    107c:	f8 94       	cli
    107e:	9e bf       	out	0x3e, r25	; 62
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	8d bf       	out	0x3d, r24	; 61
    1084:	4a c0       	rjmp	.+148    	; 0x111a <_Z17retry_mode_screenv+0x246>
		}
		else if(retry_mode==1)
    1086:	81 30       	cpi	r24, 0x01	; 1
    1088:	b9 f4       	brne	.+46     	; 0x10b8 <_Z17retry_mode_screenv+0x1e4>
		{
			Printf(1,"Press D to Start");
    108a:	8f ec       	ldi	r24, 0xCF	; 207
    108c:	92 e0       	ldi	r25, 0x02	; 2
    108e:	9f 93       	push	r25
    1090:	8f 93       	push	r24
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	8f 93       	push	r24
    1096:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"  Retry Mode 1  ");
    109a:	80 ee       	ldi	r24, 0xE0	; 224
    109c:	92 e0       	ldi	r25, 0x02	; 2
    109e:	9f 93       	push	r25
    10a0:	8f 93       	push	r24
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	8f 93       	push	r24
    10a6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	31 c0       	rjmp	.+98     	; 0x111a <_Z17retry_mode_screenv+0x246>
		}
		else if(retry_mode==2)
    10b8:	82 30       	cpi	r24, 0x02	; 2
    10ba:	b9 f4       	brne	.+46     	; 0x10ea <_Z17retry_mode_screenv+0x216>
		{
			Printf(1,"Press D to Start");
    10bc:	8f ec       	ldi	r24, 0xCF	; 207
    10be:	92 e0       	ldi	r25, 0x02	; 2
    10c0:	9f 93       	push	r25
    10c2:	8f 93       	push	r24
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	8f 93       	push	r24
    10c8:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"  Retry Mode 2  ");
    10cc:	81 ef       	ldi	r24, 0xF1	; 241
    10ce:	92 e0       	ldi	r25, 0x02	; 2
    10d0:	9f 93       	push	r25
    10d2:	8f 93       	push	r24
    10d4:	83 e0       	ldi	r24, 0x03	; 3
    10d6:	8f 93       	push	r24
    10d8:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	18 c0       	rjmp	.+48     	; 0x111a <_Z17retry_mode_screenv+0x246>
		}
		else if(retry_mode==3)
    10ea:	83 30       	cpi	r24, 0x03	; 3
    10ec:	b1 f4       	brne	.+44     	; 0x111a <_Z17retry_mode_screenv+0x246>
		{
			Printf(1,"Press D to Start");
    10ee:	8f ec       	ldi	r24, 0xCF	; 207
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	9f 93       	push	r25
    10f4:	8f 93       	push	r24
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	8f 93       	push	r24
    10fa:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"  Retry Mode 3  ");
    10fe:	82 e0       	ldi	r24, 0x02	; 2
    1100:	93 e0       	ldi	r25, 0x03	; 3
    1102:	9f 93       	push	r25
    1104:	8f 93       	push	r24
    1106:	83 e0       	ldi	r24, 0x03	; 3
    1108:	8f 93       	push	r24
    110a:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
		}
		displayflag=0;
    111a:	10 92 b7 07 	sts	0x07B7, r1
    111e:	08 95       	ret

00001120 <_Z18hybrid_base_screenv>:
	}
}
void hybrid_base_screen()
{
	if(displayflag)
    1120:	80 91 b7 07 	lds	r24, 0x07B7
    1124:	88 23       	and	r24, r24
    1126:	09 f4       	brne	.+2      	; 0x112a <_Z18hybrid_base_screenv+0xa>
    1128:	5e c0       	rjmp	.+188    	; 0x11e6 <_Z18hybrid_base_screenv+0xc6>
	{
		lcd_clear();
    112a:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		
		if(present_state==BASE_DISP_LIST1)
    112e:	80 91 fa 07 	lds	r24, 0x07FA
    1132:	90 91 fb 07 	lds	r25, 0x07FB
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	49 f5       	brne	.+82     	; 0x118e <_Z18hybrid_base_screenv+0x6e>
		{
		Printf(1,"#Hybrid Base# Back-A");
    113c:	83 e1       	ldi	r24, 0x13	; 19
    113e:	93 e0       	ldi	r25, 0x03	; 3
    1140:	9f 93       	push	r25
    1142:	8f 93       	push	r24
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	8f 93       	push	r24
    1148:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"1.Hybrid basespeed");
    114c:	88 e2       	ldi	r24, 0x28	; 40
    114e:	93 e0       	ldi	r25, 0x03	; 3
    1150:	9f 93       	push	r25
    1152:	8f 93       	push	r24
    1154:	82 e0       	ldi	r24, 0x02	; 2
    1156:	8f 93       	push	r24
    1158:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"2.Motor PID");
    115c:	8b e3       	ldi	r24, 0x3B	; 59
    115e:	93 e0       	ldi	r25, 0x03	; 3
    1160:	9f 93       	push	r25
    1162:	8f 93       	push	r24
    1164:	83 e0       	ldi	r24, 0x03	; 3
    1166:	8f 93       	push	r24
    1168:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"3.Line PID    Next-#");	
    116c:	87 e4       	ldi	r24, 0x47	; 71
    116e:	93 e0       	ldi	r25, 0x03	; 3
    1170:	9f 93       	push	r25
    1172:	8f 93       	push	r24
    1174:	84 e0       	ldi	r24, 0x04	; 4
    1176:	8f 93       	push	r24
    1178:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    117c:	8d b7       	in	r24, 0x3d	; 61
    117e:	9e b7       	in	r25, 0x3e	; 62
    1180:	0c 96       	adiw	r24, 0x0c	; 12
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	9e bf       	out	0x3e, r25	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	8d bf       	out	0x3d, r24	; 61
    118c:	2a c0       	rjmp	.+84     	; 0x11e2 <_Z18hybrid_base_screenv+0xc2>
		}
		else if(present_state==BASE_DISP_LIST2)
    118e:	02 97       	sbiw	r24, 0x02	; 2
    1190:	41 f5       	brne	.+80     	; 0x11e2 <_Z18hybrid_base_screenv+0xc2>
		{
		Printf(1,"4.Enc Check   BACK-A");
    1192:	8c e5       	ldi	r24, 0x5C	; 92
    1194:	93 e0       	ldi	r25, 0x03	; 3
    1196:	9f 93       	push	r25
    1198:	8f 93       	push	r24
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	8f 93       	push	r24
    119e:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"5.Proximity Check");
    11a2:	81 e7       	ldi	r24, 0x71	; 113
    11a4:	93 e0       	ldi	r25, 0x03	; 3
    11a6:	9f 93       	push	r25
    11a8:	8f 93       	push	r24
    11aa:	82 e0       	ldi	r24, 0x02	; 2
    11ac:	8f 93       	push	r24
    11ae:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"6.Pole Check");	
    11b2:	83 e8       	ldi	r24, 0x83	; 131
    11b4:	93 e0       	ldi	r25, 0x03	; 3
    11b6:	9f 93       	push	r25
    11b8:	8f 93       	push	r24
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	8f 93       	push	r24
    11be:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"7.Junction Check");
    11c2:	80 e9       	ldi	r24, 0x90	; 144
    11c4:	93 e0       	ldi	r25, 0x03	; 3
    11c6:	9f 93       	push	r25
    11c8:	8f 93       	push	r24
    11ca:	84 e0       	ldi	r24, 0x04	; 4
    11cc:	8f 93       	push	r24
    11ce:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    11d2:	8d b7       	in	r24, 0x3d	; 61
    11d4:	9e b7       	in	r25, 0x3e	; 62
    11d6:	0c 96       	adiw	r24, 0x0c	; 12
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	f8 94       	cli
    11dc:	9e bf       	out	0x3e, r25	; 62
    11de:	0f be       	out	0x3f, r0	; 63
    11e0:	8d bf       	out	0x3d, r24	; 61
		}
		displayflag=0;
    11e2:	10 92 b7 07 	sts	0x07B7, r1
	}
	switch(get_key())
    11e6:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    11ea:	86 30       	cpi	r24, 0x06	; 6
    11ec:	91 05       	cpc	r25, r1
    11ee:	09 f4       	brne	.+2      	; 0x11f2 <_Z18hybrid_base_screenv+0xd2>
    11f0:	a7 c0       	rjmp	.+334    	; 0x1340 <_Z18hybrid_base_screenv+0x220>
    11f2:	80 f4       	brcc	.+32     	; 0x1214 <_Z18hybrid_base_screenv+0xf4>
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	e1 f1       	breq	.+120    	; 0x1272 <_Z18hybrid_base_screenv+0x152>
    11fa:	20 f4       	brcc	.+8      	; 0x1204 <_Z18hybrid_base_screenv+0xe4>
    11fc:	02 97       	sbiw	r24, 0x02	; 2
    11fe:	09 f0       	breq	.+2      	; 0x1202 <_Z18hybrid_base_screenv+0xe2>
    1200:	48 c1       	rjmp	.+656    	; 0x1492 <_Z18hybrid_base_screenv+0x372>
    1202:	16 c0       	rjmp	.+44     	; 0x1230 <_Z18hybrid_base_screenv+0x110>
    1204:	84 30       	cpi	r24, 0x04	; 4
    1206:	91 05       	cpc	r25, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <_Z18hybrid_base_screenv+0xec>
    120a:	54 c0       	rjmp	.+168    	; 0x12b4 <_Z18hybrid_base_screenv+0x194>
    120c:	05 97       	sbiw	r24, 0x05	; 5
    120e:	09 f0       	breq	.+2      	; 0x1212 <_Z18hybrid_base_screenv+0xf2>
    1210:	40 c1       	rjmp	.+640    	; 0x1492 <_Z18hybrid_base_screenv+0x372>
    1212:	71 c0       	rjmp	.+226    	; 0x12f6 <_Z18hybrid_base_screenv+0x1d6>
    1214:	88 30       	cpi	r24, 0x08	; 8
    1216:	91 05       	cpc	r25, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <_Z18hybrid_base_screenv+0xfc>
    121a:	d5 c0       	rjmp	.+426    	; 0x13c6 <_Z18hybrid_base_screenv+0x2a6>
    121c:	08 f4       	brcc	.+2      	; 0x1220 <_Z18hybrid_base_screenv+0x100>
    121e:	b5 c0       	rjmp	.+362    	; 0x138a <_Z18hybrid_base_screenv+0x26a>
    1220:	8b 30       	cpi	r24, 0x0B	; 11
    1222:	91 05       	cpc	r25, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <_Z18hybrid_base_screenv+0x108>
    1226:	f4 c0       	rjmp	.+488    	; 0x1410 <_Z18hybrid_base_screenv+0x2f0>
    1228:	0d 97       	sbiw	r24, 0x0d	; 13
    122a:	09 f0       	breq	.+2      	; 0x122e <_Z18hybrid_base_screenv+0x10e>
    122c:	32 c1       	rjmp	.+612    	; 0x1492 <_Z18hybrid_base_screenv+0x372>
    122e:	08 c1       	rjmp	.+528    	; 0x1440 <_Z18hybrid_base_screenv+0x320>
	{
		case BUTTON_1:transmitdata('1');
    1230:	81 e3       	ldi	r24, 0x31	; 49
    1232:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					present_menu=HYBRID_BASE_SPEED;
    1236:	87 e0       	ldi	r24, 0x07	; 7
    1238:	80 93 fc 07 	sts	0x07FC, r24
					clearbuffer();
    123c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
					list_states[++list_index]=present_menu;
    1240:	80 91 e7 07 	lds	r24, 0x07E7
    1244:	90 91 e8 07 	lds	r25, 0x07E8
    1248:	01 96       	adiw	r24, 0x01	; 1
    124a:	90 93 e8 07 	sts	0x07E8, r25
    124e:	80 93 e7 07 	sts	0x07E7, r24
    1252:	fc 01       	movw	r30, r24
    1254:	e7 51       	subi	r30, 0x17	; 23
    1256:	f8 4f       	sbci	r31, 0xF8	; 248
    1258:	20 91 fc 07 	lds	r18, 0x07FC
    125c:	20 83       	st	Z, r18
    125e:	9f ef       	ldi	r25, 0xFF	; 255
    1260:	23 ec       	ldi	r18, 0xC3	; 195
    1262:	89 e0       	ldi	r24, 0x09	; 9
    1264:	91 50       	subi	r25, 0x01	; 1
    1266:	20 40       	sbci	r18, 0x00	; 0
    1268:	80 40       	sbci	r24, 0x00	; 0
    126a:	e1 f7       	brne	.-8      	; 0x1264 <_Z18hybrid_base_screenv+0x144>
    126c:	00 c0       	rjmp	.+0      	; 0x126e <_Z18hybrid_base_screenv+0x14e>
    126e:	00 00       	nop
    1270:	08 95       	ret
					_delay_ms(200);
					break;
		case BUTTON_2:transmitdata('1');
    1272:	81 e3       	ldi	r24, 0x31	; 49
    1274:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
		              present_menu=MOTOR_PID_DISP;
    1278:	8a e0       	ldi	r24, 0x0A	; 10
    127a:	80 93 fc 07 	sts	0x07FC, r24
					  clearbuffer();
    127e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
					  list_states[++list_index]=present_menu;
    1282:	80 91 e7 07 	lds	r24, 0x07E7
    1286:	90 91 e8 07 	lds	r25, 0x07E8
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	90 93 e8 07 	sts	0x07E8, r25
    1290:	80 93 e7 07 	sts	0x07E7, r24
    1294:	fc 01       	movw	r30, r24
    1296:	e7 51       	subi	r30, 0x17	; 23
    1298:	f8 4f       	sbci	r31, 0xF8	; 248
    129a:	20 91 fc 07 	lds	r18, 0x07FC
    129e:	20 83       	st	Z, r18
    12a0:	9f ef       	ldi	r25, 0xFF	; 255
    12a2:	23 ec       	ldi	r18, 0xC3	; 195
    12a4:	89 e0       	ldi	r24, 0x09	; 9
    12a6:	91 50       	subi	r25, 0x01	; 1
    12a8:	20 40       	sbci	r18, 0x00	; 0
    12aa:	80 40       	sbci	r24, 0x00	; 0
    12ac:	e1 f7       	brne	.-8      	; 0x12a6 <_Z18hybrid_base_screenv+0x186>
    12ae:	00 c0       	rjmp	.+0      	; 0x12b0 <_Z18hybrid_base_screenv+0x190>
    12b0:	00 00       	nop
    12b2:	08 95       	ret
					  _delay_ms(200);
		              break;
		case BUTTON_3:transmitdata('1');
    12b4:	81 e3       	ldi	r24, 0x31	; 49
    12b6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
		              present_menu=LINE_PID_DISP;
    12ba:	89 e0       	ldi	r24, 0x09	; 9
    12bc:	80 93 fc 07 	sts	0x07FC, r24
					  clearbuffer();
    12c0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
					  list_states[++list_index]=present_menu;
    12c4:	80 91 e7 07 	lds	r24, 0x07E7
    12c8:	90 91 e8 07 	lds	r25, 0x07E8
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	90 93 e8 07 	sts	0x07E8, r25
    12d2:	80 93 e7 07 	sts	0x07E7, r24
    12d6:	fc 01       	movw	r30, r24
    12d8:	e7 51       	subi	r30, 0x17	; 23
    12da:	f8 4f       	sbci	r31, 0xF8	; 248
    12dc:	20 91 fc 07 	lds	r18, 0x07FC
    12e0:	20 83       	st	Z, r18
    12e2:	9f ef       	ldi	r25, 0xFF	; 255
    12e4:	23 ec       	ldi	r18, 0xC3	; 195
    12e6:	89 e0       	ldi	r24, 0x09	; 9
    12e8:	91 50       	subi	r25, 0x01	; 1
    12ea:	20 40       	sbci	r18, 0x00	; 0
    12ec:	80 40       	sbci	r24, 0x00	; 0
    12ee:	e1 f7       	brne	.-8      	; 0x12e8 <_Z18hybrid_base_screenv+0x1c8>
    12f0:	00 c0       	rjmp	.+0      	; 0x12f2 <_Z18hybrid_base_screenv+0x1d2>
    12f2:	00 00       	nop
    12f4:	08 95       	ret
					  _delay_ms(200);
		              break;
		
		case BUTTON_4:if(present_state==BASE_DISP_LIST2)
    12f6:	80 91 fa 07 	lds	r24, 0x07FA
    12fa:	90 91 fb 07 	lds	r25, 0x07FB
    12fe:	02 97       	sbiw	r24, 0x02	; 2
    1300:	a9 f4       	brne	.+42     	; 0x132c <_Z18hybrid_base_screenv+0x20c>
		                {
		                transmitdata('2');
    1302:	82 e3       	ldi	r24, 0x32	; 50
    1304:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
						clearbuffer();
    1308:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
						present_menu=ENCODER_CHECK_DISP;
    130c:	28 e0       	ldi	r18, 0x08	; 8
    130e:	20 93 fc 07 	sts	0x07FC, r18
						list_states[++list_index]=present_menu;
    1312:	80 91 e7 07 	lds	r24, 0x07E7
    1316:	90 91 e8 07 	lds	r25, 0x07E8
    131a:	01 96       	adiw	r24, 0x01	; 1
    131c:	90 93 e8 07 	sts	0x07E8, r25
    1320:	80 93 e7 07 	sts	0x07E7, r24
    1324:	fc 01       	movw	r30, r24
    1326:	e7 51       	subi	r30, 0x17	; 23
    1328:	f8 4f       	sbci	r31, 0xF8	; 248
    132a:	20 83       	st	Z, r18
    132c:	9f ef       	ldi	r25, 0xFF	; 255
    132e:	23 ec       	ldi	r18, 0xC3	; 195
    1330:	89 e0       	ldi	r24, 0x09	; 9
    1332:	91 50       	subi	r25, 0x01	; 1
    1334:	20 40       	sbci	r18, 0x00	; 0
    1336:	80 40       	sbci	r24, 0x00	; 0
    1338:	e1 f7       	brne	.-8      	; 0x1332 <_Z18hybrid_base_screenv+0x212>
    133a:	00 c0       	rjmp	.+0      	; 0x133c <_Z18hybrid_base_screenv+0x21c>
    133c:	00 00       	nop
    133e:	08 95       	ret
						}
						_delay_ms(200);
						break;
		case BUTTON_5:if(present_state==BASE_DISP_LIST2)
    1340:	80 91 fa 07 	lds	r24, 0x07FA
    1344:	90 91 fb 07 	lds	r25, 0x07FB
    1348:	02 97       	sbiw	r24, 0x02	; 2
    134a:	a9 f4       	brne	.+42     	; 0x1376 <_Z18hybrid_base_screenv+0x256>
						{
							transmitdata('2');
    134c:	82 e3       	ldi	r24, 0x32	; 50
    134e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
							clearbuffer();
    1352:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
							present_menu=PROXIMITY_CHECK;
    1356:	2c e0       	ldi	r18, 0x0C	; 12
    1358:	20 93 fc 07 	sts	0x07FC, r18
							list_states[++list_index]=present_menu;
    135c:	80 91 e7 07 	lds	r24, 0x07E7
    1360:	90 91 e8 07 	lds	r25, 0x07E8
    1364:	01 96       	adiw	r24, 0x01	; 1
    1366:	90 93 e8 07 	sts	0x07E8, r25
    136a:	80 93 e7 07 	sts	0x07E7, r24
    136e:	fc 01       	movw	r30, r24
    1370:	e7 51       	subi	r30, 0x17	; 23
    1372:	f8 4f       	sbci	r31, 0xF8	; 248
    1374:	20 83       	st	Z, r18
    1376:	9f ef       	ldi	r25, 0xFF	; 255
    1378:	23 ec       	ldi	r18, 0xC3	; 195
    137a:	89 e0       	ldi	r24, 0x09	; 9
    137c:	91 50       	subi	r25, 0x01	; 1
    137e:	20 40       	sbci	r18, 0x00	; 0
    1380:	80 40       	sbci	r24, 0x00	; 0
    1382:	e1 f7       	brne	.-8      	; 0x137c <_Z18hybrid_base_screenv+0x25c>
    1384:	00 c0       	rjmp	.+0      	; 0x1386 <_Z18hybrid_base_screenv+0x266>
    1386:	00 00       	nop
    1388:	08 95       	ret
						}
						_delay_ms(200);
						break;
		
		case BUTTON_6:if(present_state==BASE_DISP_LIST2)
    138a:	80 91 fa 07 	lds	r24, 0x07FA
    138e:	90 91 fb 07 	lds	r25, 0x07FB
    1392:	02 97       	sbiw	r24, 0x02	; 2
    1394:	71 f4       	brne	.+28     	; 0x13b2 <_Z18hybrid_base_screenv+0x292>
		              {
					  transmitdata('3');
    1396:	83 e3       	ldi	r24, 0x33	; 51
    1398:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    139c:	8f e1       	ldi	r24, 0x1F	; 31
    139e:	9e e4       	ldi	r25, 0x4E	; 78
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	f1 f7       	brne	.-4      	; 0x13a0 <_Z18hybrid_base_screenv+0x280>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <_Z18hybrid_base_screenv+0x286>
    13a6:	00 00       	nop
					  _delay_ms(5);
					  transmitdata('J');
    13a8:	8a e4       	ldi	r24, 0x4A	; 74
    13aa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
					  clearbuffer();
    13ae:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    13b2:	9f ef       	ldi	r25, 0xFF	; 255
    13b4:	23 ec       	ldi	r18, 0xC3	; 195
    13b6:	89 e0       	ldi	r24, 0x09	; 9
    13b8:	91 50       	subi	r25, 0x01	; 1
    13ba:	20 40       	sbci	r18, 0x00	; 0
    13bc:	80 40       	sbci	r24, 0x00	; 0
    13be:	e1 f7       	brne	.-8      	; 0x13b8 <_Z18hybrid_base_screenv+0x298>
    13c0:	00 c0       	rjmp	.+0      	; 0x13c2 <_Z18hybrid_base_screenv+0x2a2>
    13c2:	00 00       	nop
    13c4:	08 95       	ret
					  //present_menu=POLE_CHECK_DISP;
					  //list_states[++list_index]=present_menu;
					  }
					  _delay_ms(200);
					  break;	
		case BUTTON_7:if(present_state==BASE_DISP_LIST2)
    13c6:	80 91 fa 07 	lds	r24, 0x07FA
    13ca:	90 91 fb 07 	lds	r25, 0x07FB
    13ce:	02 97       	sbiw	r24, 0x02	; 2
    13d0:	a9 f4       	brne	.+42     	; 0x13fc <_Z18hybrid_base_screenv+0x2dc>
						{
							transmitdata('2');
    13d2:	82 e3       	ldi	r24, 0x32	; 50
    13d4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
							clearbuffer();
    13d8:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
							present_menu=JUNCTION_CHECK;
    13dc:	2d e0       	ldi	r18, 0x0D	; 13
    13de:	20 93 fc 07 	sts	0x07FC, r18
							list_states[++list_index]=present_menu;
    13e2:	80 91 e7 07 	lds	r24, 0x07E7
    13e6:	90 91 e8 07 	lds	r25, 0x07E8
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	90 93 e8 07 	sts	0x07E8, r25
    13f0:	80 93 e7 07 	sts	0x07E7, r24
    13f4:	fc 01       	movw	r30, r24
    13f6:	e7 51       	subi	r30, 0x17	; 23
    13f8:	f8 4f       	sbci	r31, 0xF8	; 248
    13fa:	20 83       	st	Z, r18
    13fc:	9f ef       	ldi	r25, 0xFF	; 255
    13fe:	23 ec       	ldi	r18, 0xC3	; 195
    1400:	89 e0       	ldi	r24, 0x09	; 9
    1402:	91 50       	subi	r25, 0x01	; 1
    1404:	20 40       	sbci	r18, 0x00	; 0
    1406:	80 40       	sbci	r24, 0x00	; 0
    1408:	e1 f7       	brne	.-8      	; 0x1402 <_Z18hybrid_base_screenv+0x2e2>
    140a:	00 c0       	rjmp	.+0      	; 0x140c <_Z18hybrid_base_screenv+0x2ec>
    140c:	00 00       	nop
    140e:	08 95       	ret
						}
						_delay_ms(200);
						break;
		  
		case BUTTON_HASH:last_state=present_state;
    1410:	80 91 fa 07 	lds	r24, 0x07FA
    1414:	90 91 fb 07 	lds	r25, 0x07FB
    1418:	90 93 f9 07 	sts	0x07F9, r25
    141c:	80 93 f8 07 	sts	0x07F8, r24
		                 present_state=BASE_DISP_LIST2;
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	90 93 fb 07 	sts	0x07FB, r25
    1428:	80 93 fa 07 	sts	0x07FA, r24
    142c:	9f ef       	ldi	r25, 0xFF	; 255
    142e:	23 ec       	ldi	r18, 0xC3	; 195
    1430:	89 e0       	ldi	r24, 0x09	; 9
    1432:	91 50       	subi	r25, 0x01	; 1
    1434:	20 40       	sbci	r18, 0x00	; 0
    1436:	80 40       	sbci	r24, 0x00	; 0
    1438:	e1 f7       	brne	.-8      	; 0x1432 <_Z18hybrid_base_screenv+0x312>
    143a:	00 c0       	rjmp	.+0      	; 0x143c <_Z18hybrid_base_screenv+0x31c>
    143c:	00 00       	nop
    143e:	08 95       	ret
						 _delay_ms(200);
		                 break;			  
		case BUTTON_A:
		              if(present_state==BASE_DISP_LIST2)
    1440:	80 91 fa 07 	lds	r24, 0x07FA
    1444:	90 91 fb 07 	lds	r25, 0x07FB
    1448:	02 97       	sbiw	r24, 0x02	; 2
    144a:	49 f4       	brne	.+18     	; 0x145e <_Z18hybrid_base_screenv+0x33e>
		              present_state=last_state;
    144c:	80 91 f8 07 	lds	r24, 0x07F8
    1450:	90 91 f9 07 	lds	r25, 0x07F9
    1454:	90 93 fb 07 	sts	0x07FB, r25
    1458:	80 93 fa 07 	sts	0x07FA, r24
    145c:	0f c0       	rjmp	.+30     	; 0x147c <_Z18hybrid_base_screenv+0x35c>
					  else 
		              present_menu=list_states[--list_index];
    145e:	80 91 e7 07 	lds	r24, 0x07E7
    1462:	90 91 e8 07 	lds	r25, 0x07E8
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	90 93 e8 07 	sts	0x07E8, r25
    146c:	80 93 e7 07 	sts	0x07E7, r24
    1470:	fc 01       	movw	r30, r24
    1472:	e7 51       	subi	r30, 0x17	; 23
    1474:	f8 4f       	sbci	r31, 0xF8	; 248
    1476:	80 81       	ld	r24, Z
    1478:	80 93 fc 07 	sts	0x07FC, r24
					  clearbuffer();
    147c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	23 ec       	ldi	r18, 0xC3	; 195
    1484:	89 e0       	ldi	r24, 0x09	; 9
    1486:	91 50       	subi	r25, 0x01	; 1
    1488:	20 40       	sbci	r18, 0x00	; 0
    148a:	80 40       	sbci	r24, 0x00	; 0
    148c:	e1 f7       	brne	.-8      	; 0x1486 <_Z18hybrid_base_screenv+0x366>
    148e:	00 c0       	rjmp	.+0      	; 0x1490 <_Z18hybrid_base_screenv+0x370>
    1490:	00 00       	nop
    1492:	08 95       	ret

00001494 <_Z22hybridbasespeed_screenv>:
		              break;
	}
}
void hybridbasespeed_screen()
{
	unsigned int test=get_key();
    1494:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
		switch(test)
    1498:	88 30       	cpi	r24, 0x08	; 8
    149a:	91 05       	cpc	r25, r1
    149c:	09 f4       	brne	.+2      	; 0x14a0 <_Z22hybridbasespeed_screenv+0xc>
    149e:	40 c0       	rjmp	.+128    	; 0x1520 <_Z22hybridbasespeed_screenv+0x8c>
    14a0:	38 f4       	brcc	.+14     	; 0x14b0 <_Z22hybridbasespeed_screenv+0x1c>
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	91 05       	cpc	r25, r1
    14a6:	31 f1       	breq	.+76     	; 0x14f4 <_Z22hybridbasespeed_screenv+0x60>
    14a8:	04 97       	sbiw	r24, 0x04	; 4
    14aa:	09 f0       	breq	.+2      	; 0x14ae <_Z22hybridbasespeed_screenv+0x1a>
    14ac:	7a c0       	rjmp	.+244    	; 0x15a2 <_Z22hybridbasespeed_screenv+0x10e>
    14ae:	4e c0       	rjmp	.+156    	; 0x154c <_Z22hybridbasespeed_screenv+0xb8>
    14b0:	8a 30       	cpi	r24, 0x0A	; 10
    14b2:	91 05       	cpc	r25, r1
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <_Z22hybridbasespeed_screenv+0x24>
    14b6:	60 c0       	rjmp	.+192    	; 0x1578 <_Z22hybridbasespeed_screenv+0xe4>
    14b8:	0d 97       	sbiw	r24, 0x0d	; 13
    14ba:	09 f0       	breq	.+2      	; 0x14be <_Z22hybridbasespeed_screenv+0x2a>
    14bc:	72 c0       	rjmp	.+228    	; 0x15a2 <_Z22hybridbasespeed_screenv+0x10e>
		{
			case BUTTON_A:present_menu=list_states[--list_index];
    14be:	80 91 e7 07 	lds	r24, 0x07E7
    14c2:	90 91 e8 07 	lds	r25, 0x07E8
    14c6:	01 97       	sbiw	r24, 0x01	; 1
    14c8:	90 93 e8 07 	sts	0x07E8, r25
    14cc:	80 93 e7 07 	sts	0x07E7, r24
    14d0:	fc 01       	movw	r30, r24
    14d2:	e7 51       	subi	r30, 0x17	; 23
    14d4:	f8 4f       	sbci	r31, 0xF8	; 248
    14d6:	80 81       	ld	r24, Z
    14d8:	80 93 fc 07 	sts	0x07FC, r24
			              clearbuffer();
    14dc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    14e0:	2f ef       	ldi	r18, 0xFF	; 255
    14e2:	83 ec       	ldi	r24, 0xC3	; 195
    14e4:	99 e0       	ldi	r25, 0x09	; 9
    14e6:	21 50       	subi	r18, 0x01	; 1
    14e8:	80 40       	sbci	r24, 0x00	; 0
    14ea:	90 40       	sbci	r25, 0x00	; 0
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <_Z22hybridbasespeed_screenv+0x52>
    14ee:	00 c0       	rjmp	.+0      	; 0x14f0 <_Z22hybridbasespeed_screenv+0x5c>
    14f0:	00 00       	nop
    14f2:	57 c0       	rjmp	.+174    	; 0x15a2 <_Z22hybridbasespeed_screenv+0x10e>
			             _delay_ms(200);
			              break;
			case BUTTON_1:
			              strcpy(buffer1,getUART_data('t','#'));
    14f4:	63 e2       	ldi	r22, 0x23	; 35
    14f6:	84 e7       	ldi	r24, 0x74	; 116
    14f8:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    14fc:	bc 01       	movw	r22, r24
    14fe:	8e ec       	ldi	r24, 0xCE	; 206
    1500:	97 e0       	ldi	r25, 0x07	; 7
    1502:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1506:	2f ef       	ldi	r18, 0xFF	; 255
    1508:	83 ec       	ldi	r24, 0xC3	; 195
    150a:	99 e0       	ldi	r25, 0x09	; 9
    150c:	21 50       	subi	r18, 0x01	; 1
    150e:	80 40       	sbci	r24, 0x00	; 0
    1510:	90 40       	sbci	r25, 0x00	; 0
    1512:	e1 f7       	brne	.-8      	; 0x150c <_Z22hybridbasespeed_screenv+0x78>
    1514:	00 c0       	rjmp	.+0      	; 0x1516 <_Z22hybridbasespeed_screenv+0x82>
    1516:	00 00       	nop
						  _delay_ms(200);
			              displayflag=1;
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	80 93 b7 07 	sts	0x07B7, r24
			              break;
    151e:	41 c0       	rjmp	.+130    	; 0x15a2 <_Z22hybridbasespeed_screenv+0x10e>
			case BUTTON_7:
			              strcpy(buffer1,getUART_data('g','#'));
    1520:	63 e2       	ldi	r22, 0x23	; 35
    1522:	87 e6       	ldi	r24, 0x67	; 103
    1524:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1528:	bc 01       	movw	r22, r24
    152a:	8e ec       	ldi	r24, 0xCE	; 206
    152c:	97 e0       	ldi	r25, 0x07	; 7
    152e:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1532:	2f ef       	ldi	r18, 0xFF	; 255
    1534:	83 ec       	ldi	r24, 0xC3	; 195
    1536:	99 e0       	ldi	r25, 0x09	; 9
    1538:	21 50       	subi	r18, 0x01	; 1
    153a:	80 40       	sbci	r24, 0x00	; 0
    153c:	90 40       	sbci	r25, 0x00	; 0
    153e:	e1 f7       	brne	.-8      	; 0x1538 <_Z22hybridbasespeed_screenv+0xa4>
    1540:	00 c0       	rjmp	.+0      	; 0x1542 <_Z22hybridbasespeed_screenv+0xae>
    1542:	00 00       	nop
						  _delay_ms(200);
			              displayflag=1;
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	80 93 b7 07 	sts	0x07B7, r24
			              break;
    154a:	2b c0       	rjmp	.+86     	; 0x15a2 <_Z22hybridbasespeed_screenv+0x10e>
			case BUTTON_3:strcpy(buffer2,getUART_data('u','#'));
    154c:	63 e2       	ldi	r22, 0x23	; 35
    154e:	85 e7       	ldi	r24, 0x75	; 117
    1550:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1554:	bc 01       	movw	r22, r24
    1556:	84 ec       	ldi	r24, 0xC4	; 196
    1558:	97 e0       	ldi	r25, 0x07	; 7
    155a:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    155e:	2f ef       	ldi	r18, 0xFF	; 255
    1560:	83 ec       	ldi	r24, 0xC3	; 195
    1562:	99 e0       	ldi	r25, 0x09	; 9
    1564:	21 50       	subi	r18, 0x01	; 1
    1566:	80 40       	sbci	r24, 0x00	; 0
    1568:	90 40       	sbci	r25, 0x00	; 0
    156a:	e1 f7       	brne	.-8      	; 0x1564 <_Z22hybridbasespeed_screenv+0xd0>
    156c:	00 c0       	rjmp	.+0      	; 0x156e <_Z22hybridbasespeed_screenv+0xda>
    156e:	00 00       	nop
			              _delay_ms(200);
			              displayflag=1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	80 93 b7 07 	sts	0x07B7, r24
			              break;
    1576:	15 c0       	rjmp	.+42     	; 0x15a2 <_Z22hybridbasespeed_screenv+0x10e>
			case BUTTON_9:strcpy(buffer2,getUART_data('j','#'));
    1578:	63 e2       	ldi	r22, 0x23	; 35
    157a:	8a e6       	ldi	r24, 0x6A	; 106
    157c:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1580:	bc 01       	movw	r22, r24
    1582:	84 ec       	ldi	r24, 0xC4	; 196
    1584:	97 e0       	ldi	r25, 0x07	; 7
    1586:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    158a:	2f ef       	ldi	r18, 0xFF	; 255
    158c:	83 ec       	ldi	r24, 0xC3	; 195
    158e:	99 e0       	ldi	r25, 0x09	; 9
    1590:	21 50       	subi	r18, 0x01	; 1
    1592:	80 40       	sbci	r24, 0x00	; 0
    1594:	90 40       	sbci	r25, 0x00	; 0
    1596:	e1 f7       	brne	.-8      	; 0x1590 <_Z22hybridbasespeed_screenv+0xfc>
    1598:	00 c0       	rjmp	.+0      	; 0x159a <_Z22hybridbasespeed_screenv+0x106>
    159a:	00 00       	nop
			              _delay_ms(200);
			              displayflag=1;
    159c:	81 e0       	ldi	r24, 0x01	; 1
    159e:	80 93 b7 07 	sts	0x07B7, r24
			              break;
		}
		
		if(displayflag)
    15a2:	80 91 b7 07 	lds	r24, 0x07B7
    15a6:	88 23       	and	r24, r24
    15a8:	a9 f1       	breq	.+106    	; 0x1614 <_Z22hybridbasespeed_screenv+0x180>
		{
			lcd_clear();
    15aa:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
			Printf(1,"#Motor PID#  Back-A");
    15ae:	81 ea       	ldi	r24, 0xA1	; 161
    15b0:	93 e0       	ldi	r25, 0x03	; 3
    15b2:	9f 93       	push	r25
    15b4:	8f 93       	push	r24
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	8f 93       	push	r24
    15ba:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(2,"Norm = %s",buffer1);
    15be:	8e ec       	ldi	r24, 0xCE	; 206
    15c0:	97 e0       	ldi	r25, 0x07	; 7
    15c2:	9f 93       	push	r25
    15c4:	8f 93       	push	r24
    15c6:	85 eb       	ldi	r24, 0xB5	; 181
    15c8:	93 e0       	ldi	r25, 0x03	; 3
    15ca:	9f 93       	push	r25
    15cc:	8f 93       	push	r24
    15ce:	82 e0       	ldi	r24, 0x02	; 2
    15d0:	8f 93       	push	r24
    15d2:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"Max = %s",buffer2);
    15d6:	84 ec       	ldi	r24, 0xC4	; 196
    15d8:	97 e0       	ldi	r25, 0x07	; 7
    15da:	9f 93       	push	r25
    15dc:	8f 93       	push	r24
    15de:	8f eb       	ldi	r24, 0xBF	; 191
    15e0:	93 e0       	ldi	r25, 0x03	; 3
    15e2:	9f 93       	push	r25
    15e4:	8f 93       	push	r24
    15e6:	83 e0       	ldi	r24, 0x03	; 3
    15e8:	8f 93       	push	r24
    15ea:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    15ee:	2f ef       	ldi	r18, 0xFF	; 255
    15f0:	83 ec       	ldi	r24, 0xC3	; 195
    15f2:	99 e0       	ldi	r25, 0x09	; 9
    15f4:	21 50       	subi	r18, 0x01	; 1
    15f6:	80 40       	sbci	r24, 0x00	; 0
    15f8:	90 40       	sbci	r25, 0x00	; 0
    15fa:	e1 f7       	brne	.-8      	; 0x15f4 <_Z22hybridbasespeed_screenv+0x160>
    15fc:	00 c0       	rjmp	.+0      	; 0x15fe <_Z22hybridbasespeed_screenv+0x16a>
    15fe:	00 00       	nop
			_delay_ms(200);
			displayflag=0;
    1600:	10 92 b7 07 	sts	0x07B7, r1
    1604:	8d b7       	in	r24, 0x3d	; 61
    1606:	9e b7       	in	r25, 0x3e	; 62
    1608:	0d 96       	adiw	r24, 0x0d	; 13
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	9e bf       	out	0x3e, r25	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	8d bf       	out	0x3d, r24	; 61
    1614:	08 95       	ret

00001616 <_Z20encoder_check_screenv>:
		}
}
void encoder_check_screen()
{
    1616:	cf 93       	push	r28
    1618:	df 93       	push	r29
	unsigned char readenable=0;
	
	switch(get_key())
    161a:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    161e:	8c 30       	cpi	r24, 0x0C	; 12
    1620:	91 05       	cpc	r25, r1
    1622:	e1 f0       	breq	.+56     	; 0x165c <_Z20encoder_check_screenv+0x46>
    1624:	0d 97       	sbiw	r24, 0x0d	; 13
    1626:	41 f5       	brne	.+80     	; 0x1678 <_Z20encoder_check_screenv+0x62>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    1628:	80 91 e7 07 	lds	r24, 0x07E7
    162c:	90 91 e8 07 	lds	r25, 0x07E8
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	90 93 e8 07 	sts	0x07E8, r25
    1636:	80 93 e7 07 	sts	0x07E7, r24
    163a:	fc 01       	movw	r30, r24
    163c:	e7 51       	subi	r30, 0x17	; 23
    163e:	f8 4f       	sbci	r31, 0xF8	; 248
    1640:	80 81       	ld	r24, Z
    1642:	80 93 fc 07 	sts	0x07FC, r24
    1646:	2f ef       	ldi	r18, 0xFF	; 255
    1648:	83 ec       	ldi	r24, 0xC3	; 195
    164a:	99 e0       	ldi	r25, 0x09	; 9
    164c:	21 50       	subi	r18, 0x01	; 1
    164e:	80 40       	sbci	r24, 0x00	; 0
    1650:	90 40       	sbci	r25, 0x00	; 0
    1652:	e1 f7       	brne	.-8      	; 0x164c <_Z20encoder_check_screenv+0x36>
    1654:	00 c0       	rjmp	.+0      	; 0x1656 <_Z20encoder_check_screenv+0x40>
    1656:	00 00       	nop
			displayflag=0;
		}
}
void encoder_check_screen()
{
	unsigned char readenable=0;
    1658:	c0 e0       	ldi	r28, 0x00	; 0
    165a:	0f c0       	rjmp	.+30     	; 0x167a <_Z20encoder_check_screenv+0x64>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
		              _delay_ms(200);
	                  break;
		case BUTTON_AST:readenable=1;
		                displayflag=1;
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	80 93 b7 07 	sts	0x07B7, r24
    1662:	2f ef       	ldi	r18, 0xFF	; 255
    1664:	83 ec       	ldi	r24, 0xC3	; 195
    1666:	99 e0       	ldi	r25, 0x09	; 9
    1668:	21 50       	subi	r18, 0x01	; 1
    166a:	80 40       	sbci	r24, 0x00	; 0
    166c:	90 40       	sbci	r25, 0x00	; 0
    166e:	e1 f7       	brne	.-8      	; 0x1668 <_Z20encoder_check_screenv+0x52>
    1670:	00 c0       	rjmp	.+0      	; 0x1672 <_Z20encoder_check_screenv+0x5c>
    1672:	00 00       	nop
	switch(get_key())
	{
		case BUTTON_A:present_menu=list_states[--list_index];
		              _delay_ms(200);
	                  break;
		case BUTTON_AST:readenable=1;
    1674:	c1 e0       	ldi	r28, 0x01	; 1
    1676:	01 c0       	rjmp	.+2      	; 0x167a <_Z20encoder_check_screenv+0x64>
			displayflag=0;
		}
}
void encoder_check_screen()
{
	unsigned char readenable=0;
    1678:	c0 e0       	ldi	r28, 0x00	; 0
		case BUTTON_AST:readenable=1;
		                displayflag=1;
						_delay_ms(200);
			            break;
	}
	if(displayflag)
    167a:	80 91 b7 07 	lds	r24, 0x07B7
    167e:	88 23       	and	r24, r24
    1680:	09 f4       	brne	.+2      	; 0x1684 <_Z20encoder_check_screenv+0x6e>
    1682:	60 c0       	rjmp	.+192    	; 0x1744 <_Z20encoder_check_screenv+0x12e>
	{
		lcd_clear();
    1684:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#Encoder Data#  Back-A");
    1688:	88 ec       	ldi	r24, 0xC8	; 200
    168a:	93 e0       	ldi	r25, 0x03	; 3
    168c:	9f 93       	push	r25
    168e:	8f 93       	push	r24
    1690:	81 e0       	ldi	r24, 0x01	; 1
    1692:	8f 93       	push	r24
    1694:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		if(readenable)
    1698:	0f 90       	pop	r0
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	cc 23       	and	r28, r28
    16a0:	09 f4       	brne	.+2      	; 0x16a4 <_Z20encoder_check_screenv+0x8e>
    16a2:	43 c0       	rjmp	.+134    	; 0x172a <_Z20encoder_check_screenv+0x114>
		{
			Printf(2,"DLt=%s   DRt=%s",getUART_data('D','#'),getUART_data('E','#'));
    16a4:	63 e2       	ldi	r22, 0x23	; 35
    16a6:	85 e4       	ldi	r24, 0x45	; 69
    16a8:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    16ac:	c8 2f       	mov	r28, r24
    16ae:	d9 2f       	mov	r29, r25
    16b0:	63 e2       	ldi	r22, 0x23	; 35
    16b2:	84 e4       	ldi	r24, 0x44	; 68
    16b4:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    16b8:	df 93       	push	r29
    16ba:	cf 93       	push	r28
    16bc:	9f 93       	push	r25
    16be:	8f 93       	push	r24
    16c0:	8f ed       	ldi	r24, 0xDF	; 223
    16c2:	93 e0       	ldi	r25, 0x03	; 3
    16c4:	9f 93       	push	r25
    16c6:	8f 93       	push	r24
    16c8:	82 e0       	ldi	r24, 0x02	; 2
    16ca:	8f 93       	push	r24
    16cc:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    16d0:	8f e3       	ldi	r24, 0x3F	; 63
    16d2:	9c e9       	ldi	r25, 0x9C	; 156
    16d4:	01 97       	sbiw	r24, 0x01	; 1
    16d6:	f1 f7       	brne	.-4      	; 0x16d4 <_Z20encoder_check_screenv+0xbe>
    16d8:	00 c0       	rjmp	.+0      	; 0x16da <_Z20encoder_check_screenv+0xc4>
    16da:	00 00       	nop
			_delay_ms(10);
			Printf(3,"VLt=%s   VRt=%s",getUART_data('F','#'),getUART_data('G','#'));
    16dc:	63 e2       	ldi	r22, 0x23	; 35
    16de:	87 e4       	ldi	r24, 0x47	; 71
    16e0:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    16e4:	c8 2f       	mov	r28, r24
    16e6:	d9 2f       	mov	r29, r25
    16e8:	63 e2       	ldi	r22, 0x23	; 35
    16ea:	86 e4       	ldi	r24, 0x46	; 70
    16ec:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	9f 93       	push	r25
    16f6:	8f 93       	push	r24
    16f8:	8f ee       	ldi	r24, 0xEF	; 239
    16fa:	93 e0       	ldi	r25, 0x03	; 3
    16fc:	9f 93       	push	r25
    16fe:	8f 93       	push	r24
    1700:	83 e0       	ldi	r24, 0x03	; 3
    1702:	8f 93       	push	r24
    1704:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    1708:	9f ef       	ldi	r25, 0xFF	; 255
    170a:	25 ea       	ldi	r18, 0xA5	; 165
    170c:	8e e0       	ldi	r24, 0x0E	; 14
    170e:	91 50       	subi	r25, 0x01	; 1
    1710:	20 40       	sbci	r18, 0x00	; 0
    1712:	80 40       	sbci	r24, 0x00	; 0
    1714:	e1 f7       	brne	.-8      	; 0x170e <_Z20encoder_check_screenv+0xf8>
    1716:	00 c0       	rjmp	.+0      	; 0x1718 <_Z20encoder_check_screenv+0x102>
    1718:	00 00       	nop
    171a:	8d b7       	in	r24, 0x3d	; 61
    171c:	9e b7       	in	r25, 0x3e	; 62
    171e:	0e 96       	adiw	r24, 0x0e	; 14
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	9e bf       	out	0x3e, r25	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	8d bf       	out	0x3d, r24	; 61
			_delay_ms(300);
			readenable=0;
		}
		Printf(4,"Read-*  ");
    172a:	8f ef       	ldi	r24, 0xFF	; 255
    172c:	93 e0       	ldi	r25, 0x03	; 3
    172e:	9f 93       	push	r25
    1730:	8f 93       	push	r24
    1732:	84 e0       	ldi	r24, 0x04	; 4
    1734:	8f 93       	push	r24
    1736:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    173a:	10 92 b7 07 	sts	0x07B7, r1
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
	}
}
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <_Z14linepid_screenv>:

void linepid_screen()
{
	switch(get_key())
    174a:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    174e:	88 30       	cpi	r24, 0x08	; 8
    1750:	91 05       	cpc	r25, r1
    1752:	09 f4       	brne	.+2      	; 0x1756 <_Z14linepid_screenv+0xc>
    1754:	47 c0       	rjmp	.+142    	; 0x17e4 <_Z14linepid_screenv+0x9a>
    1756:	60 f4       	brcc	.+24     	; 0x1770 <_Z14linepid_screenv+0x26>
    1758:	83 30       	cpi	r24, 0x03	; 3
    175a:	91 05       	cpc	r25, r1
    175c:	09 f4       	brne	.+2      	; 0x1760 <_Z14linepid_screenv+0x16>
    175e:	58 c0       	rjmp	.+176    	; 0x1810 <_Z14linepid_screenv+0xc6>
    1760:	84 30       	cpi	r24, 0x04	; 4
    1762:	91 05       	cpc	r25, r1
    1764:	09 f4       	brne	.+2      	; 0x1768 <_Z14linepid_screenv+0x1e>
    1766:	80 c0       	rjmp	.+256    	; 0x1868 <_Z14linepid_screenv+0x11e>
    1768:	02 97       	sbiw	r24, 0x02	; 2
    176a:	09 f0       	breq	.+2      	; 0x176e <_Z14linepid_screenv+0x24>
    176c:	a8 c0       	rjmp	.+336    	; 0x18be <_Z14linepid_screenv+0x174>
    176e:	24 c0       	rjmp	.+72     	; 0x17b8 <_Z14linepid_screenv+0x6e>
    1770:	8a 30       	cpi	r24, 0x0A	; 10
    1772:	91 05       	cpc	r25, r1
    1774:	09 f4       	brne	.+2      	; 0x1778 <_Z14linepid_screenv+0x2e>
    1776:	8e c0       	rjmp	.+284    	; 0x1894 <_Z14linepid_screenv+0x14a>
    1778:	08 f4       	brcc	.+2      	; 0x177c <_Z14linepid_screenv+0x32>
    177a:	60 c0       	rjmp	.+192    	; 0x183c <_Z14linepid_screenv+0xf2>
    177c:	0d 97       	sbiw	r24, 0x0d	; 13
    177e:	09 f0       	breq	.+2      	; 0x1782 <_Z14linepid_screenv+0x38>
    1780:	9e c0       	rjmp	.+316    	; 0x18be <_Z14linepid_screenv+0x174>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    1782:	80 91 e7 07 	lds	r24, 0x07E7
    1786:	90 91 e8 07 	lds	r25, 0x07E8
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	90 93 e8 07 	sts	0x07E8, r25
    1790:	80 93 e7 07 	sts	0x07E7, r24
    1794:	fc 01       	movw	r30, r24
    1796:	e7 51       	subi	r30, 0x17	; 23
    1798:	f8 4f       	sbci	r31, 0xF8	; 248
    179a:	80 81       	ld	r24, Z
    179c:	80 93 fc 07 	sts	0x07FC, r24
		              clearbuffer();
    17a0:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    17a4:	2f ef       	ldi	r18, 0xFF	; 255
    17a6:	83 ec       	ldi	r24, 0xC3	; 195
    17a8:	99 e0       	ldi	r25, 0x09	; 9
    17aa:	21 50       	subi	r18, 0x01	; 1
    17ac:	80 40       	sbci	r24, 0x00	; 0
    17ae:	90 40       	sbci	r25, 0x00	; 0
    17b0:	e1 f7       	brne	.-8      	; 0x17aa <_Z14linepid_screenv+0x60>
    17b2:	00 c0       	rjmp	.+0      	; 0x17b4 <_Z14linepid_screenv+0x6a>
    17b4:	00 00       	nop
    17b6:	83 c0       	rjmp	.+262    	; 0x18be <_Z14linepid_screenv+0x174>
		              _delay_ms(200);
		break;
		case BUTTON_1:strcpy(buffer1,getUART_data('q','#'));
    17b8:	63 e2       	ldi	r22, 0x23	; 35
    17ba:	81 e7       	ldi	r24, 0x71	; 113
    17bc:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    17c0:	bc 01       	movw	r22, r24
    17c2:	8e ec       	ldi	r24, 0xCE	; 206
    17c4:	97 e0       	ldi	r25, 0x07	; 7
    17c6:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    17ca:	2f ef       	ldi	r18, 0xFF	; 255
    17cc:	83 ec       	ldi	r24, 0xC3	; 195
    17ce:	99 e0       	ldi	r25, 0x09	; 9
    17d0:	21 50       	subi	r18, 0x01	; 1
    17d2:	80 40       	sbci	r24, 0x00	; 0
    17d4:	90 40       	sbci	r25, 0x00	; 0
    17d6:	e1 f7       	brne	.-8      	; 0x17d0 <_Z14linepid_screenv+0x86>
    17d8:	00 c0       	rjmp	.+0      	; 0x17da <_Z14linepid_screenv+0x90>
    17da:	00 00       	nop
		              _delay_ms(200);
		              displayflag=1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	80 93 b7 07 	sts	0x07B7, r24
		              break;
    17e2:	6d c0       	rjmp	.+218    	; 0x18be <_Z14linepid_screenv+0x174>
		case BUTTON_7:strcpy(buffer1,getUART_data('a','#'));
    17e4:	63 e2       	ldi	r22, 0x23	; 35
    17e6:	81 e6       	ldi	r24, 0x61	; 97
    17e8:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    17ec:	bc 01       	movw	r22, r24
    17ee:	8e ec       	ldi	r24, 0xCE	; 206
    17f0:	97 e0       	ldi	r25, 0x07	; 7
    17f2:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    17f6:	2f ef       	ldi	r18, 0xFF	; 255
    17f8:	83 ec       	ldi	r24, 0xC3	; 195
    17fa:	99 e0       	ldi	r25, 0x09	; 9
    17fc:	21 50       	subi	r18, 0x01	; 1
    17fe:	80 40       	sbci	r24, 0x00	; 0
    1800:	90 40       	sbci	r25, 0x00	; 0
    1802:	e1 f7       	brne	.-8      	; 0x17fc <_Z14linepid_screenv+0xb2>
    1804:	00 c0       	rjmp	.+0      	; 0x1806 <_Z14linepid_screenv+0xbc>
    1806:	00 00       	nop
		              _delay_ms(200);
		              displayflag=1;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	80 93 b7 07 	sts	0x07B7, r24
		              break;
    180e:	57 c0       	rjmp	.+174    	; 0x18be <_Z14linepid_screenv+0x174>
		case BUTTON_2:strcpy(buffer2,getUART_data('y','#'));
    1810:	63 e2       	ldi	r22, 0x23	; 35
    1812:	89 e7       	ldi	r24, 0x79	; 121
    1814:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1818:	bc 01       	movw	r22, r24
    181a:	84 ec       	ldi	r24, 0xC4	; 196
    181c:	97 e0       	ldi	r25, 0x07	; 7
    181e:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1822:	2f ef       	ldi	r18, 0xFF	; 255
    1824:	83 ec       	ldi	r24, 0xC3	; 195
    1826:	99 e0       	ldi	r25, 0x09	; 9
    1828:	21 50       	subi	r18, 0x01	; 1
    182a:	80 40       	sbci	r24, 0x00	; 0
    182c:	90 40       	sbci	r25, 0x00	; 0
    182e:	e1 f7       	brne	.-8      	; 0x1828 <_Z14linepid_screenv+0xde>
    1830:	00 c0       	rjmp	.+0      	; 0x1832 <_Z14linepid_screenv+0xe8>
    1832:	00 00       	nop
		              _delay_ms(200);
		              displayflag=1;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	80 93 b7 07 	sts	0x07B7, r24
		              break;
    183a:	41 c0       	rjmp	.+130    	; 0x18be <_Z14linepid_screenv+0x174>
		case BUTTON_8:strcpy(buffer2,getUART_data('h','#'));
    183c:	63 e2       	ldi	r22, 0x23	; 35
    183e:	88 e6       	ldi	r24, 0x68	; 104
    1840:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1844:	bc 01       	movw	r22, r24
    1846:	84 ec       	ldi	r24, 0xC4	; 196
    1848:	97 e0       	ldi	r25, 0x07	; 7
    184a:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    184e:	2f ef       	ldi	r18, 0xFF	; 255
    1850:	83 ec       	ldi	r24, 0xC3	; 195
    1852:	99 e0       	ldi	r25, 0x09	; 9
    1854:	21 50       	subi	r18, 0x01	; 1
    1856:	80 40       	sbci	r24, 0x00	; 0
    1858:	90 40       	sbci	r25, 0x00	; 0
    185a:	e1 f7       	brne	.-8      	; 0x1854 <_Z14linepid_screenv+0x10a>
    185c:	00 c0       	rjmp	.+0      	; 0x185e <_Z14linepid_screenv+0x114>
    185e:	00 00       	nop
		              _delay_ms(200);
		              displayflag=1;
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	80 93 b7 07 	sts	0x07B7, r24
		              break;
    1866:	2b c0       	rjmp	.+86     	; 0x18be <_Z14linepid_screenv+0x174>
		case BUTTON_3:strcpy(buffer3,getUART_data('p','#'));
    1868:	63 e2       	ldi	r22, 0x23	; 35
    186a:	80 e7       	ldi	r24, 0x70	; 112
    186c:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1870:	bc 01       	movw	r22, r24
    1872:	8a eb       	ldi	r24, 0xBA	; 186
    1874:	97 e0       	ldi	r25, 0x07	; 7
    1876:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    187a:	2f ef       	ldi	r18, 0xFF	; 255
    187c:	83 ec       	ldi	r24, 0xC3	; 195
    187e:	99 e0       	ldi	r25, 0x09	; 9
    1880:	21 50       	subi	r18, 0x01	; 1
    1882:	80 40       	sbci	r24, 0x00	; 0
    1884:	90 40       	sbci	r25, 0x00	; 0
    1886:	e1 f7       	brne	.-8      	; 0x1880 <_Z14linepid_screenv+0x136>
    1888:	00 c0       	rjmp	.+0      	; 0x188a <_Z14linepid_screenv+0x140>
    188a:	00 00       	nop
		              _delay_ms(200);
					  displayflag=1;
    188c:	81 e0       	ldi	r24, 0x01	; 1
    188e:	80 93 b7 07 	sts	0x07B7, r24
					  break;
    1892:	15 c0       	rjmp	.+42     	; 0x18be <_Z14linepid_screenv+0x174>
		case BUTTON_9:strcpy(buffer3,getUART_data('l','#'));
    1894:	63 e2       	ldi	r22, 0x23	; 35
    1896:	8c e6       	ldi	r24, 0x6C	; 108
    1898:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    189c:	bc 01       	movw	r22, r24
    189e:	8a eb       	ldi	r24, 0xBA	; 186
    18a0:	97 e0       	ldi	r25, 0x07	; 7
    18a2:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    18a6:	2f ef       	ldi	r18, 0xFF	; 255
    18a8:	83 ec       	ldi	r24, 0xC3	; 195
    18aa:	99 e0       	ldi	r25, 0x09	; 9
    18ac:	21 50       	subi	r18, 0x01	; 1
    18ae:	80 40       	sbci	r24, 0x00	; 0
    18b0:	90 40       	sbci	r25, 0x00	; 0
    18b2:	e1 f7       	brne	.-8      	; 0x18ac <_Z14linepid_screenv+0x162>
    18b4:	00 c0       	rjmp	.+0      	; 0x18b6 <_Z14linepid_screenv+0x16c>
    18b6:	00 00       	nop
		              _delay_ms(200);
		              displayflag=1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	80 93 b7 07 	sts	0x07B7, r24
		              break;
	}
	
	if(displayflag)
    18be:	80 91 b7 07 	lds	r24, 0x07B7
    18c2:	88 23       	and	r24, r24
    18c4:	c1 f1       	breq	.+112    	; 0x1936 <_Z14linepid_screenv+0x1ec>
	{
		lcd_clear();
    18c6:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#Line PID#  Back-A");
    18ca:	88 e0       	ldi	r24, 0x08	; 8
    18cc:	94 e0       	ldi	r25, 0x04	; 4
    18ce:	9f 93       	push	r25
    18d0:	8f 93       	push	r24
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	8f 93       	push	r24
    18d6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"Kp = %s",buffer1);
    18da:	8e ec       	ldi	r24, 0xCE	; 206
    18dc:	97 e0       	ldi	r25, 0x07	; 7
    18de:	9f 93       	push	r25
    18e0:	8f 93       	push	r24
    18e2:	8b e1       	ldi	r24, 0x1B	; 27
    18e4:	94 e0       	ldi	r25, 0x04	; 4
    18e6:	9f 93       	push	r25
    18e8:	8f 93       	push	r24
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	8f 93       	push	r24
    18ee:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"Ki = %s",buffer2);
    18f2:	84 ec       	ldi	r24, 0xC4	; 196
    18f4:	97 e0       	ldi	r25, 0x07	; 7
    18f6:	9f 93       	push	r25
    18f8:	8f 93       	push	r24
    18fa:	83 e2       	ldi	r24, 0x23	; 35
    18fc:	94 e0       	ldi	r25, 0x04	; 4
    18fe:	9f 93       	push	r25
    1900:	8f 93       	push	r24
    1902:	83 e0       	ldi	r24, 0x03	; 3
    1904:	8f 93       	push	r24
    1906:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"Kd = %s",buffer3);
    190a:	8a eb       	ldi	r24, 0xBA	; 186
    190c:	97 e0       	ldi	r25, 0x07	; 7
    190e:	9f 93       	push	r25
    1910:	8f 93       	push	r24
    1912:	8b e2       	ldi	r24, 0x2B	; 43
    1914:	94 e0       	ldi	r25, 0x04	; 4
    1916:	9f 93       	push	r25
    1918:	8f 93       	push	r24
    191a:	84 e0       	ldi	r24, 0x04	; 4
    191c:	8f 93       	push	r24
    191e:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    1922:	10 92 b7 07 	sts	0x07B7, r1
    1926:	8d b7       	in	r24, 0x3d	; 61
    1928:	9e b7       	in	r25, 0x3e	; 62
    192a:	42 96       	adiw	r24, 0x12	; 18
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	9e bf       	out	0x3e, r25	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	8d bf       	out	0x3d, r24	; 61
    1936:	08 95       	ret

00001938 <_Z15motorpid_screenv>:
	}
}
void motorpid_screen()
{
	switch(get_key())
    1938:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    193c:	88 30       	cpi	r24, 0x08	; 8
    193e:	91 05       	cpc	r25, r1
    1940:	09 f4       	brne	.+2      	; 0x1944 <_Z15motorpid_screenv+0xc>
    1942:	40 c0       	rjmp	.+128    	; 0x19c4 <_Z15motorpid_screenv+0x8c>
    1944:	38 f4       	brcc	.+14     	; 0x1954 <_Z15motorpid_screenv+0x1c>
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	91 05       	cpc	r25, r1
    194a:	31 f1       	breq	.+76     	; 0x1998 <_Z15motorpid_screenv+0x60>
    194c:	04 97       	sbiw	r24, 0x04	; 4
    194e:	09 f0       	breq	.+2      	; 0x1952 <_Z15motorpid_screenv+0x1a>
    1950:	7a c0       	rjmp	.+244    	; 0x1a46 <_Z15motorpid_screenv+0x10e>
    1952:	4e c0       	rjmp	.+156    	; 0x19f0 <_Z15motorpid_screenv+0xb8>
    1954:	8a 30       	cpi	r24, 0x0A	; 10
    1956:	91 05       	cpc	r25, r1
    1958:	09 f4       	brne	.+2      	; 0x195c <_Z15motorpid_screenv+0x24>
    195a:	60 c0       	rjmp	.+192    	; 0x1a1c <_Z15motorpid_screenv+0xe4>
    195c:	0d 97       	sbiw	r24, 0x0d	; 13
    195e:	09 f0       	breq	.+2      	; 0x1962 <_Z15motorpid_screenv+0x2a>
    1960:	72 c0       	rjmp	.+228    	; 0x1a46 <_Z15motorpid_screenv+0x10e>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    1962:	80 91 e7 07 	lds	r24, 0x07E7
    1966:	90 91 e8 07 	lds	r25, 0x07E8
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	90 93 e8 07 	sts	0x07E8, r25
    1970:	80 93 e7 07 	sts	0x07E7, r24
    1974:	fc 01       	movw	r30, r24
    1976:	e7 51       	subi	r30, 0x17	; 23
    1978:	f8 4f       	sbci	r31, 0xF8	; 248
    197a:	80 81       	ld	r24, Z
    197c:	80 93 fc 07 	sts	0x07FC, r24
		              clearbuffer();
    1980:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    1984:	2f ef       	ldi	r18, 0xFF	; 255
    1986:	83 ec       	ldi	r24, 0xC3	; 195
    1988:	99 e0       	ldi	r25, 0x09	; 9
    198a:	21 50       	subi	r18, 0x01	; 1
    198c:	80 40       	sbci	r24, 0x00	; 0
    198e:	90 40       	sbci	r25, 0x00	; 0
    1990:	e1 f7       	brne	.-8      	; 0x198a <_Z15motorpid_screenv+0x52>
    1992:	00 c0       	rjmp	.+0      	; 0x1994 <_Z15motorpid_screenv+0x5c>
    1994:	00 00       	nop
    1996:	57 c0       	rjmp	.+174    	; 0x1a46 <_Z15motorpid_screenv+0x10e>
					  _delay_ms(200);
		break;
		case BUTTON_1:strcpy(buffer1,getUART_data('Q','#'));
    1998:	63 e2       	ldi	r22, 0x23	; 35
    199a:	81 e5       	ldi	r24, 0x51	; 81
    199c:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    19a0:	bc 01       	movw	r22, r24
    19a2:	8e ec       	ldi	r24, 0xCE	; 206
    19a4:	97 e0       	ldi	r25, 0x07	; 7
    19a6:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    19aa:	2f ef       	ldi	r18, 0xFF	; 255
    19ac:	83 ec       	ldi	r24, 0xC3	; 195
    19ae:	99 e0       	ldi	r25, 0x09	; 9
    19b0:	21 50       	subi	r18, 0x01	; 1
    19b2:	80 40       	sbci	r24, 0x00	; 0
    19b4:	90 40       	sbci	r25, 0x00	; 0
    19b6:	e1 f7       	brne	.-8      	; 0x19b0 <_Z15motorpid_screenv+0x78>
    19b8:	00 c0       	rjmp	.+0      	; 0x19ba <_Z15motorpid_screenv+0x82>
    19ba:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	80 93 b7 07 	sts	0x07B7, r24
		break;
    19c2:	41 c0       	rjmp	.+130    	; 0x1a46 <_Z15motorpid_screenv+0x10e>
		case BUTTON_7:strcpy(buffer1,getUART_data('A','#'));
    19c4:	63 e2       	ldi	r22, 0x23	; 35
    19c6:	81 e4       	ldi	r24, 0x41	; 65
    19c8:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    19cc:	bc 01       	movw	r22, r24
    19ce:	8e ec       	ldi	r24, 0xCE	; 206
    19d0:	97 e0       	ldi	r25, 0x07	; 7
    19d2:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    19d6:	2f ef       	ldi	r18, 0xFF	; 255
    19d8:	83 ec       	ldi	r24, 0xC3	; 195
    19da:	99 e0       	ldi	r25, 0x09	; 9
    19dc:	21 50       	subi	r18, 0x01	; 1
    19de:	80 40       	sbci	r24, 0x00	; 0
    19e0:	90 40       	sbci	r25, 0x00	; 0
    19e2:	e1 f7       	brne	.-8      	; 0x19dc <_Z15motorpid_screenv+0xa4>
    19e4:	00 c0       	rjmp	.+0      	; 0x19e6 <_Z15motorpid_screenv+0xae>
    19e6:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	80 93 b7 07 	sts	0x07B7, r24
		break;
    19ee:	2b c0       	rjmp	.+86     	; 0x1a46 <_Z15motorpid_screenv+0x10e>
	
		case BUTTON_3:strcpy(buffer3,getUART_data('P','#'));
    19f0:	63 e2       	ldi	r22, 0x23	; 35
    19f2:	80 e5       	ldi	r24, 0x50	; 80
    19f4:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    19f8:	bc 01       	movw	r22, r24
    19fa:	8a eb       	ldi	r24, 0xBA	; 186
    19fc:	97 e0       	ldi	r25, 0x07	; 7
    19fe:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1a02:	2f ef       	ldi	r18, 0xFF	; 255
    1a04:	83 ec       	ldi	r24, 0xC3	; 195
    1a06:	99 e0       	ldi	r25, 0x09	; 9
    1a08:	21 50       	subi	r18, 0x01	; 1
    1a0a:	80 40       	sbci	r24, 0x00	; 0
    1a0c:	90 40       	sbci	r25, 0x00	; 0
    1a0e:	e1 f7       	brne	.-8      	; 0x1a08 <_Z15motorpid_screenv+0xd0>
    1a10:	00 c0       	rjmp	.+0      	; 0x1a12 <_Z15motorpid_screenv+0xda>
    1a12:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	80 93 b7 07 	sts	0x07B7, r24
		break;
    1a1a:	15 c0       	rjmp	.+42     	; 0x1a46 <_Z15motorpid_screenv+0x10e>
		case BUTTON_9:strcpy(buffer3,getUART_data('L','#'));
    1a1c:	63 e2       	ldi	r22, 0x23	; 35
    1a1e:	8c e4       	ldi	r24, 0x4C	; 76
    1a20:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1a24:	bc 01       	movw	r22, r24
    1a26:	8a eb       	ldi	r24, 0xBA	; 186
    1a28:	97 e0       	ldi	r25, 0x07	; 7
    1a2a:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1a2e:	2f ef       	ldi	r18, 0xFF	; 255
    1a30:	83 ec       	ldi	r24, 0xC3	; 195
    1a32:	99 e0       	ldi	r25, 0x09	; 9
    1a34:	21 50       	subi	r18, 0x01	; 1
    1a36:	80 40       	sbci	r24, 0x00	; 0
    1a38:	90 40       	sbci	r25, 0x00	; 0
    1a3a:	e1 f7       	brne	.-8      	; 0x1a34 <_Z15motorpid_screenv+0xfc>
    1a3c:	00 c0       	rjmp	.+0      	; 0x1a3e <_Z15motorpid_screenv+0x106>
    1a3e:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	if(displayflag)
    1a46:	80 91 b7 07 	lds	r24, 0x07B7
    1a4a:	88 23       	and	r24, r24
    1a4c:	61 f1       	breq	.+88     	; 0x1aa6 <_Z15motorpid_screenv+0x16e>
	{
		lcd_clear();
    1a4e:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#Line PID#  Back-A");
    1a52:	88 e0       	ldi	r24, 0x08	; 8
    1a54:	94 e0       	ldi	r25, 0x04	; 4
    1a56:	9f 93       	push	r25
    1a58:	8f 93       	push	r24
    1a5a:	81 e0       	ldi	r24, 0x01	; 1
    1a5c:	8f 93       	push	r24
    1a5e:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"Kp = %s",buffer1);
    1a62:	8e ec       	ldi	r24, 0xCE	; 206
    1a64:	97 e0       	ldi	r25, 0x07	; 7
    1a66:	9f 93       	push	r25
    1a68:	8f 93       	push	r24
    1a6a:	8b e1       	ldi	r24, 0x1B	; 27
    1a6c:	94 e0       	ldi	r25, 0x04	; 4
    1a6e:	9f 93       	push	r25
    1a70:	8f 93       	push	r24
    1a72:	82 e0       	ldi	r24, 0x02	; 2
    1a74:	8f 93       	push	r24
    1a76:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"Kd = %s",buffer3);
    1a7a:	8a eb       	ldi	r24, 0xBA	; 186
    1a7c:	97 e0       	ldi	r25, 0x07	; 7
    1a7e:	9f 93       	push	r25
    1a80:	8f 93       	push	r24
    1a82:	8b e2       	ldi	r24, 0x2B	; 43
    1a84:	94 e0       	ldi	r25, 0x04	; 4
    1a86:	9f 93       	push	r25
    1a88:	8f 93       	push	r24
    1a8a:	83 e0       	ldi	r24, 0x03	; 3
    1a8c:	8f 93       	push	r24
    1a8e:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    1a92:	10 92 b7 07 	sts	0x07B7, r1
    1a96:	8d b7       	in	r24, 0x3d	; 61
    1a98:	9e b7       	in	r25, 0x3e	; 62
    1a9a:	0d 96       	adiw	r24, 0x0d	; 13
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	9e bf       	out	0x3e, r25	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	8d bf       	out	0x3d, r24	; 61
    1aa6:	08 95       	ret

00001aa8 <_Z22basemotor_check_screenv>:
	}
}
void basemotor_check_screen()
{
	if(displayflag)
    1aa8:	80 91 b7 07 	lds	r24, 0x07B7
    1aac:	88 23       	and	r24, r24
    1aae:	21 f1       	breq	.+72     	; 0x1af8 <_Z22basemotor_check_screenv+0x50>
	{
		lcd_clear();
    1ab0:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#Base Motor#  Back-A");
    1ab4:	83 e3       	ldi	r24, 0x33	; 51
    1ab6:	94 e0       	ldi	r25, 0x04	; 4
    1ab8:	9f 93       	push	r25
    1aba:	8f 93       	push	r24
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	8f 93       	push	r24
    1ac0:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"Front-2   Back-8");
    1ac4:	88 e4       	ldi	r24, 0x48	; 72
    1ac6:	94 e0       	ldi	r25, 0x04	; 4
    1ac8:	9f 93       	push	r25
    1aca:	8f 93       	push	r24
    1acc:	82 e0       	ldi	r24, 0x02	; 2
    1ace:	8f 93       	push	r24
    1ad0:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"Stop-*");
    1ad4:	89 e5       	ldi	r24, 0x59	; 89
    1ad6:	94 e0       	ldi	r25, 0x04	; 4
    1ad8:	9f 93       	push	r25
    1ada:	8f 93       	push	r24
    1adc:	84 e0       	ldi	r24, 0x04	; 4
    1ade:	8f 93       	push	r24
    1ae0:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    1ae4:	10 92 b7 07 	sts	0x07B7, r1
    1ae8:	8d b7       	in	r24, 0x3d	; 61
    1aea:	9e b7       	in	r25, 0x3e	; 62
    1aec:	09 96       	adiw	r24, 0x09	; 9
    1aee:	0f b6       	in	r0, 0x3f	; 63
    1af0:	f8 94       	cli
    1af2:	9e bf       	out	0x3e, r25	; 62
    1af4:	0f be       	out	0x3f, r0	; 63
    1af6:	8d bf       	out	0x3d, r24	; 61
	}
	switch(get_key())
    1af8:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    1afc:	89 30       	cpi	r24, 0x09	; 9
    1afe:	91 05       	cpc	r25, r1
    1b00:	99 f1       	breq	.+102    	; 0x1b68 <_Z22basemotor_check_screenv+0xc0>
    1b02:	20 f4       	brcc	.+8      	; 0x1b0c <_Z22basemotor_check_screenv+0x64>
    1b04:	03 97       	sbiw	r24, 0x03	; 3
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <_Z22basemotor_check_screenv+0x62>
    1b08:	48 c0       	rjmp	.+144    	; 0x1b9a <_Z22basemotor_check_screenv+0xf2>
    1b0a:	21 c0       	rjmp	.+66     	; 0x1b4e <_Z22basemotor_check_screenv+0xa6>
    1b0c:	8c 30       	cpi	r24, 0x0C	; 12
    1b0e:	91 05       	cpc	r25, r1
    1b10:	c1 f1       	breq	.+112    	; 0x1b82 <_Z22basemotor_check_screenv+0xda>
    1b12:	0d 97       	sbiw	r24, 0x0d	; 13
    1b14:	09 f0       	breq	.+2      	; 0x1b18 <_Z22basemotor_check_screenv+0x70>
    1b16:	41 c0       	rjmp	.+130    	; 0x1b9a <_Z22basemotor_check_screenv+0xf2>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    1b18:	80 91 e7 07 	lds	r24, 0x07E7
    1b1c:	90 91 e8 07 	lds	r25, 0x07E8
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	90 93 e8 07 	sts	0x07E8, r25
    1b26:	80 93 e7 07 	sts	0x07E7, r24
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	e7 51       	subi	r30, 0x17	; 23
    1b2e:	f8 4f       	sbci	r31, 0xF8	; 248
    1b30:	80 81       	ld	r24, Z
    1b32:	80 93 fc 07 	sts	0x07FC, r24
		              clearbuffer();
    1b36:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	23 ec       	ldi	r18, 0xC3	; 195
    1b3e:	89 e0       	ldi	r24, 0x09	; 9
    1b40:	91 50       	subi	r25, 0x01	; 1
    1b42:	20 40       	sbci	r18, 0x00	; 0
    1b44:	80 40       	sbci	r24, 0x00	; 0
    1b46:	e1 f7       	brne	.-8      	; 0x1b40 <_Z22basemotor_check_screenv+0x98>
    1b48:	00 c0       	rjmp	.+0      	; 0x1b4a <_Z22basemotor_check_screenv+0xa2>
    1b4a:	00 00       	nop
    1b4c:	08 95       	ret
					  _delay_ms(200);
		              break;
		case BUTTON_2:transmitdata('4');
    1b4e:	84 e3       	ldi	r24, 0x34	; 52
    1b50:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    1b54:	9f ef       	ldi	r25, 0xFF	; 255
    1b56:	23 ec       	ldi	r18, 0xC3	; 195
    1b58:	89 e0       	ldi	r24, 0x09	; 9
    1b5a:	91 50       	subi	r25, 0x01	; 1
    1b5c:	20 40       	sbci	r18, 0x00	; 0
    1b5e:	80 40       	sbci	r24, 0x00	; 0
    1b60:	e1 f7       	brne	.-8      	; 0x1b5a <_Z22basemotor_check_screenv+0xb2>
    1b62:	00 c0       	rjmp	.+0      	; 0x1b64 <_Z22basemotor_check_screenv+0xbc>
    1b64:	00 00       	nop
    1b66:	08 95       	ret
		              _delay_ms(200);
		               break;
		case BUTTON_8:transmitdata('5');
    1b68:	85 e3       	ldi	r24, 0x35	; 53
    1b6a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    1b6e:	9f ef       	ldi	r25, 0xFF	; 255
    1b70:	23 ec       	ldi	r18, 0xC3	; 195
    1b72:	89 e0       	ldi	r24, 0x09	; 9
    1b74:	91 50       	subi	r25, 0x01	; 1
    1b76:	20 40       	sbci	r18, 0x00	; 0
    1b78:	80 40       	sbci	r24, 0x00	; 0
    1b7a:	e1 f7       	brne	.-8      	; 0x1b74 <_Z22basemotor_check_screenv+0xcc>
    1b7c:	00 c0       	rjmp	.+0      	; 0x1b7e <_Z22basemotor_check_screenv+0xd6>
    1b7e:	00 00       	nop
    1b80:	08 95       	ret
		              _delay_ms(200);
		               break;
	    case BUTTON_AST:transmitdata('6');
    1b82:	86 e3       	ldi	r24, 0x36	; 54
    1b84:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    1b88:	9f ef       	ldi	r25, 0xFF	; 255
    1b8a:	23 ec       	ldi	r18, 0xC3	; 195
    1b8c:	89 e0       	ldi	r24, 0x09	; 9
    1b8e:	91 50       	subi	r25, 0x01	; 1
    1b90:	20 40       	sbci	r18, 0x00	; 0
    1b92:	80 40       	sbci	r24, 0x00	; 0
    1b94:	e1 f7       	brne	.-8      	; 0x1b8e <_Z22basemotor_check_screenv+0xe6>
    1b96:	00 c0       	rjmp	.+0      	; 0x1b98 <_Z22basemotor_check_screenv+0xf0>
    1b98:	00 00       	nop
    1b9a:	08 95       	ret

00001b9c <_Z22proximity_check_screenv>:
						break;
	}
}
void proximity_check_screen()
{
	if(displayflag)
    1b9c:	80 91 b7 07 	lds	r24, 0x07B7
    1ba0:	88 23       	and	r24, r24
    1ba2:	81 f1       	breq	.+96     	; 0x1c04 <_Z22proximity_check_screenv+0x68>
	{
		lcd_clear();
    1ba4:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#PROXIMITY#   BACK-A");
    1ba8:	80 e6       	ldi	r24, 0x60	; 96
    1baa:	94 e0       	ldi	r25, 0x04	; 4
    1bac:	9f 93       	push	r25
    1bae:	8f 93       	push	r24
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	8f 93       	push	r24
    1bb4:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"2.Px Down = %s",getUART_data('K','#'));
    1bb8:	63 e2       	ldi	r22, 0x23	; 35
    1bba:	8b e4       	ldi	r24, 0x4B	; 75
    1bbc:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1bc0:	9f 93       	push	r25
    1bc2:	8f 93       	push	r24
    1bc4:	85 e7       	ldi	r24, 0x75	; 117
    1bc6:	94 e0       	ldi	r25, 0x04	; 4
    1bc8:	9f 93       	push	r25
    1bca:	8f 93       	push	r24
    1bcc:	82 e0       	ldi	r24, 0x02	; 2
    1bce:	8f 93       	push	r24
    1bd0:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"3.Px Climb = %s",getUART_data('J','#'));
    1bd4:	63 e2       	ldi	r22, 0x23	; 35
    1bd6:	8a e4       	ldi	r24, 0x4A	; 74
    1bd8:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1bdc:	9f 93       	push	r25
    1bde:	8f 93       	push	r24
    1be0:	84 e8       	ldi	r24, 0x84	; 132
    1be2:	94 e0       	ldi	r25, 0x04	; 4
    1be4:	9f 93       	push	r25
    1be6:	8f 93       	push	r24
    1be8:	83 e0       	ldi	r24, 0x03	; 3
    1bea:	8f 93       	push	r24
    1bec:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    1bf0:	10 92 b7 07 	sts	0x07B7, r1
    1bf4:	8d b7       	in	r24, 0x3d	; 61
    1bf6:	9e b7       	in	r25, 0x3e	; 62
    1bf8:	0d 96       	adiw	r24, 0x0d	; 13
    1bfa:	0f b6       	in	r0, 0x3f	; 63
    1bfc:	f8 94       	cli
    1bfe:	9e bf       	out	0x3e, r25	; 62
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	8d bf       	out	0x3d, r24	; 61
	}
	switch(get_key())
    1c04:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    1c08:	0d 97       	sbiw	r24, 0x0d	; 13
    1c0a:	d1 f4       	brne	.+52     	; 0x1c40 <_Z22proximity_check_screenv+0xa4>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    1c0c:	80 91 e7 07 	lds	r24, 0x07E7
    1c10:	90 91 e8 07 	lds	r25, 0x07E8
    1c14:	01 97       	sbiw	r24, 0x01	; 1
    1c16:	90 93 e8 07 	sts	0x07E8, r25
    1c1a:	80 93 e7 07 	sts	0x07E7, r24
    1c1e:	fc 01       	movw	r30, r24
    1c20:	e7 51       	subi	r30, 0x17	; 23
    1c22:	f8 4f       	sbci	r31, 0xF8	; 248
    1c24:	80 81       	ld	r24, Z
    1c26:	80 93 fc 07 	sts	0x07FC, r24
		              clearbuffer();
    1c2a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	23 ec       	ldi	r18, 0xC3	; 195
    1c32:	89 e0       	ldi	r24, 0x09	; 9
    1c34:	91 50       	subi	r25, 0x01	; 1
    1c36:	20 40       	sbci	r18, 0x00	; 0
    1c38:	80 40       	sbci	r24, 0x00	; 0
    1c3a:	e1 f7       	brne	.-8      	; 0x1c34 <_Z22proximity_check_screenv+0x98>
    1c3c:	00 c0       	rjmp	.+0      	; 0x1c3e <_Z22proximity_check_screenv+0xa2>
    1c3e:	00 00       	nop
    1c40:	08 95       	ret

00001c42 <_Z21junction_check_screenv>:
		               break;
	}
}
void junction_check_screen()
{
	if(displayflag)
    1c42:	80 91 b7 07 	lds	r24, 0x07B7
    1c46:	88 23       	and	r24, r24
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <_Z21junction_check_screenv+0xa>
    1c4a:	44 c0       	rjmp	.+136    	; 0x1cd4 <_Z21junction_check_screenv+0x92>
	{
		lcd_clear();
    1c4c:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"1.J LEFT = %s",getUART_data('H','#'));
    1c50:	63 e2       	ldi	r22, 0x23	; 35
    1c52:	88 e4       	ldi	r24, 0x48	; 72
    1c54:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1c58:	9f 93       	push	r25
    1c5a:	8f 93       	push	r24
    1c5c:	84 e9       	ldi	r24, 0x94	; 148
    1c5e:	94 e0       	ldi	r25, 0x04	; 4
    1c60:	9f 93       	push	r25
    1c62:	8f 93       	push	r24
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	8f 93       	push	r24
    1c68:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"2.J RIGHT = %s",getUART_data('I','#'));
    1c6c:	63 e2       	ldi	r22, 0x23	; 35
    1c6e:	89 e4       	ldi	r24, 0x49	; 73
    1c70:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1c74:	9f 93       	push	r25
    1c76:	8f 93       	push	r24
    1c78:	82 ea       	ldi	r24, 0xA2	; 162
    1c7a:	94 e0       	ldi	r25, 0x04	; 4
    1c7c:	9f 93       	push	r25
    1c7e:	8f 93       	push	r24
    1c80:	82 e0       	ldi	r24, 0x02	; 2
    1c82:	8f 93       	push	r24
    1c84:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"3.JPULSELEFT = %s",getUART_data('L','#'));
    1c88:	63 e2       	ldi	r22, 0x23	; 35
    1c8a:	8c e4       	ldi	r24, 0x4C	; 76
    1c8c:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1c90:	9f 93       	push	r25
    1c92:	8f 93       	push	r24
    1c94:	81 eb       	ldi	r24, 0xB1	; 177
    1c96:	94 e0       	ldi	r25, 0x04	; 4
    1c98:	9f 93       	push	r25
    1c9a:	8f 93       	push	r24
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	8f 93       	push	r24
    1ca0:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"4.JPULSERIGHT = %s=",getUART_data('M','#'));
    1ca4:	63 e2       	ldi	r22, 0x23	; 35
    1ca6:	8d e4       	ldi	r24, 0x4D	; 77
    1ca8:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1cac:	9f 93       	push	r25
    1cae:	8f 93       	push	r24
    1cb0:	83 ec       	ldi	r24, 0xC3	; 195
    1cb2:	94 e0       	ldi	r25, 0x04	; 4
    1cb4:	9f 93       	push	r25
    1cb6:	8f 93       	push	r24
    1cb8:	84 e0       	ldi	r24, 0x04	; 4
    1cba:	8f 93       	push	r24
    1cbc:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    1cc0:	10 92 b7 07 	sts	0x07B7, r1
    1cc4:	8d b7       	in	r24, 0x3d	; 61
    1cc6:	9e b7       	in	r25, 0x3e	; 62
    1cc8:	44 96       	adiw	r24, 0x14	; 20
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	9e bf       	out	0x3e, r25	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	8d bf       	out	0x3d, r24	; 61
	}
	switch(get_key())
    1cd4:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    1cd8:	0d 97       	sbiw	r24, 0x0d	; 13
    1cda:	d1 f4       	brne	.+52     	; 0x1d10 <_Z21junction_check_screenv+0xce>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    1cdc:	80 91 e7 07 	lds	r24, 0x07E7
    1ce0:	90 91 e8 07 	lds	r25, 0x07E8
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	90 93 e8 07 	sts	0x07E8, r25
    1cea:	80 93 e7 07 	sts	0x07E7, r24
    1cee:	fc 01       	movw	r30, r24
    1cf0:	e7 51       	subi	r30, 0x17	; 23
    1cf2:	f8 4f       	sbci	r31, 0xF8	; 248
    1cf4:	80 81       	ld	r24, Z
    1cf6:	80 93 fc 07 	sts	0x07FC, r24
		              clearbuffer();
    1cfa:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    1cfe:	9f ef       	ldi	r25, 0xFF	; 255
    1d00:	23 ec       	ldi	r18, 0xC3	; 195
    1d02:	89 e0       	ldi	r24, 0x09	; 9
    1d04:	91 50       	subi	r25, 0x01	; 1
    1d06:	20 40       	sbci	r18, 0x00	; 0
    1d08:	80 40       	sbci	r24, 0x00	; 0
    1d0a:	e1 f7       	brne	.-8      	; 0x1d04 <_Z21junction_check_screenv+0xc2>
    1d0c:	00 c0       	rjmp	.+0      	; 0x1d0e <_Z21junction_check_screenv+0xcc>
    1d0e:	00 00       	nop
    1d10:	08 95       	ret

00001d12 <_Z12lidar_screenv>:
}


void lidar_screen()
{
	switch(get_key())
    1d12:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    1d16:	83 30       	cpi	r24, 0x03	; 3
    1d18:	91 05       	cpc	r25, r1
    1d1a:	c1 f1       	breq	.+112    	; 0x1d8c <_Z12lidar_screenv+0x7a>
    1d1c:	8d 30       	cpi	r24, 0x0D	; 13
    1d1e:	91 05       	cpc	r25, r1
    1d20:	21 f0       	breq	.+8      	; 0x1d2a <_Z12lidar_screenv+0x18>
    1d22:	02 97       	sbiw	r24, 0x02	; 2
    1d24:	09 f0       	breq	.+2      	; 0x1d28 <_Z12lidar_screenv+0x16>
    1d26:	47 c0       	rjmp	.+142    	; 0x1db6 <_Z12lidar_screenv+0xa4>
    1d28:	1b c0       	rjmp	.+54     	; 0x1d60 <_Z12lidar_screenv+0x4e>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    1d2a:	80 91 e7 07 	lds	r24, 0x07E7
    1d2e:	90 91 e8 07 	lds	r25, 0x07E8
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	90 93 e8 07 	sts	0x07E8, r25
    1d38:	80 93 e7 07 	sts	0x07E7, r24
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	e7 51       	subi	r30, 0x17	; 23
    1d40:	f8 4f       	sbci	r31, 0xF8	; 248
    1d42:	80 81       	ld	r24, Z
    1d44:	80 93 fc 07 	sts	0x07FC, r24
		              clearbuffer();
    1d48:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    1d4c:	2f ef       	ldi	r18, 0xFF	; 255
    1d4e:	83 ec       	ldi	r24, 0xC3	; 195
    1d50:	99 e0       	ldi	r25, 0x09	; 9
    1d52:	21 50       	subi	r18, 0x01	; 1
    1d54:	80 40       	sbci	r24, 0x00	; 0
    1d56:	90 40       	sbci	r25, 0x00	; 0
    1d58:	e1 f7       	brne	.-8      	; 0x1d52 <_Z12lidar_screenv+0x40>
    1d5a:	00 c0       	rjmp	.+0      	; 0x1d5c <_Z12lidar_screenv+0x4a>
    1d5c:	00 00       	nop
    1d5e:	2b c0       	rjmp	.+86     	; 0x1db6 <_Z12lidar_screenv+0xa4>
		             _delay_ms(200);
		              break;
		
		case BUTTON_1:strcpy(buffer1,getUART_data('m','#'));
    1d60:	63 e2       	ldi	r22, 0x23	; 35
    1d62:	8d e6       	ldi	r24, 0x6D	; 109
    1d64:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1d68:	bc 01       	movw	r22, r24
    1d6a:	8e ec       	ldi	r24, 0xCE	; 206
    1d6c:	97 e0       	ldi	r25, 0x07	; 7
    1d6e:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1d72:	2f ef       	ldi	r18, 0xFF	; 255
    1d74:	83 ec       	ldi	r24, 0xC3	; 195
    1d76:	99 e0       	ldi	r25, 0x09	; 9
    1d78:	21 50       	subi	r18, 0x01	; 1
    1d7a:	80 40       	sbci	r24, 0x00	; 0
    1d7c:	90 40       	sbci	r25, 0x00	; 0
    1d7e:	e1 f7       	brne	.-8      	; 0x1d78 <_Z12lidar_screenv+0x66>
    1d80:	00 c0       	rjmp	.+0      	; 0x1d82 <_Z12lidar_screenv+0x70>
    1d82:	00 00       	nop
						_delay_ms(200);
						displayflag=1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	80 93 b7 07 	sts	0x07B7, r24
						break;
    1d8a:	15 c0       	rjmp	.+42     	; 0x1db6 <_Z12lidar_screenv+0xa4>
			
		case BUTTON_2:strcpy(buffer2,getUART_data('n','#'));
    1d8c:	63 e2       	ldi	r22, 0x23	; 35
    1d8e:	8e e6       	ldi	r24, 0x6E	; 110
    1d90:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1d94:	bc 01       	movw	r22, r24
    1d96:	84 ec       	ldi	r24, 0xC4	; 196
    1d98:	97 e0       	ldi	r25, 0x07	; 7
    1d9a:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1d9e:	2f ef       	ldi	r18, 0xFF	; 255
    1da0:	83 ec       	ldi	r24, 0xC3	; 195
    1da2:	99 e0       	ldi	r25, 0x09	; 9
    1da4:	21 50       	subi	r18, 0x01	; 1
    1da6:	80 40       	sbci	r24, 0x00	; 0
    1da8:	90 40       	sbci	r25, 0x00	; 0
    1daa:	e1 f7       	brne	.-8      	; 0x1da4 <_Z12lidar_screenv+0x92>
    1dac:	00 c0       	rjmp	.+0      	; 0x1dae <_Z12lidar_screenv+0x9c>
    1dae:	00 00       	nop
			_delay_ms(200);
			displayflag=1;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	80 93 b7 07 	sts	0x07B7, r24
			break;
	}
	if(displayflag)
    1db6:	80 91 b7 07 	lds	r24, 0x07B7
    1dba:	88 23       	and	r24, r24
    1dbc:	61 f1       	breq	.+88     	; 0x1e16 <_Z12lidar_screenv+0x104>
	{
		lcd_clear();
    1dbe:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#LIDAR DATA#  BACK-A");
    1dc2:	87 ed       	ldi	r24, 0xD7	; 215
    1dc4:	94 e0       	ldi	r25, 0x04	; 4
    1dc6:	9f 93       	push	r25
    1dc8:	8f 93       	push	r24
    1dca:	81 e0       	ldi	r24, 0x01	; 1
    1dcc:	8f 93       	push	r24
    1dce:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"1.Lidar up = %s",buffer1);
    1dd2:	8e ec       	ldi	r24, 0xCE	; 206
    1dd4:	97 e0       	ldi	r25, 0x07	; 7
    1dd6:	9f 93       	push	r25
    1dd8:	8f 93       	push	r24
    1dda:	8c ee       	ldi	r24, 0xEC	; 236
    1ddc:	94 e0       	ldi	r25, 0x04	; 4
    1dde:	9f 93       	push	r25
    1de0:	8f 93       	push	r24
    1de2:	82 e0       	ldi	r24, 0x02	; 2
    1de4:	8f 93       	push	r24
    1de6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"2.Lidar Down = %s",buffer2);
    1dea:	84 ec       	ldi	r24, 0xC4	; 196
    1dec:	97 e0       	ldi	r25, 0x07	; 7
    1dee:	9f 93       	push	r25
    1df0:	8f 93       	push	r24
    1df2:	8c ef       	ldi	r24, 0xFC	; 252
    1df4:	94 e0       	ldi	r25, 0x04	; 4
    1df6:	9f 93       	push	r25
    1df8:	8f 93       	push	r24
    1dfa:	83 e0       	ldi	r24, 0x03	; 3
    1dfc:	8f 93       	push	r24
    1dfe:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    1e02:	10 92 b7 07 	sts	0x07B7, r1
    1e06:	8d b7       	in	r24, 0x3d	; 61
    1e08:	9e b7       	in	r25, 0x3e	; 62
    1e0a:	0d 96       	adiw	r24, 0x0d	; 13
    1e0c:	0f b6       	in	r0, 0x3f	; 63
    1e0e:	f8 94       	cli
    1e10:	9e bf       	out	0x3e, r25	; 62
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	8d bf       	out	0x3d, r24	; 61
    1e16:	08 95       	ret

00001e18 <_Z21wipermotor_pid_screenv>:
	}
	
}
void wipermotor_pid_screen()
{
	switch(get_key())
    1e18:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    1e1c:	88 30       	cpi	r24, 0x08	; 8
    1e1e:	91 05       	cpc	r25, r1
    1e20:	09 f4       	brne	.+2      	; 0x1e24 <_Z21wipermotor_pid_screenv+0xc>
    1e22:	47 c0       	rjmp	.+142    	; 0x1eb2 <_Z21wipermotor_pid_screenv+0x9a>
    1e24:	60 f4       	brcc	.+24     	; 0x1e3e <_Z21wipermotor_pid_screenv+0x26>
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	91 05       	cpc	r25, r1
    1e2a:	09 f4       	brne	.+2      	; 0x1e2e <_Z21wipermotor_pid_screenv+0x16>
    1e2c:	58 c0       	rjmp	.+176    	; 0x1ede <_Z21wipermotor_pid_screenv+0xc6>
    1e2e:	84 30       	cpi	r24, 0x04	; 4
    1e30:	91 05       	cpc	r25, r1
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <_Z21wipermotor_pid_screenv+0x1e>
    1e34:	80 c0       	rjmp	.+256    	; 0x1f36 <_Z21wipermotor_pid_screenv+0x11e>
    1e36:	02 97       	sbiw	r24, 0x02	; 2
    1e38:	09 f0       	breq	.+2      	; 0x1e3c <_Z21wipermotor_pid_screenv+0x24>
    1e3a:	a8 c0       	rjmp	.+336    	; 0x1f8c <_Z21wipermotor_pid_screenv+0x174>
    1e3c:	24 c0       	rjmp	.+72     	; 0x1e86 <_Z21wipermotor_pid_screenv+0x6e>
    1e3e:	8a 30       	cpi	r24, 0x0A	; 10
    1e40:	91 05       	cpc	r25, r1
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <_Z21wipermotor_pid_screenv+0x2e>
    1e44:	8e c0       	rjmp	.+284    	; 0x1f62 <_Z21wipermotor_pid_screenv+0x14a>
    1e46:	08 f4       	brcc	.+2      	; 0x1e4a <_Z21wipermotor_pid_screenv+0x32>
    1e48:	60 c0       	rjmp	.+192    	; 0x1f0a <_Z21wipermotor_pid_screenv+0xf2>
    1e4a:	0d 97       	sbiw	r24, 0x0d	; 13
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <_Z21wipermotor_pid_screenv+0x38>
    1e4e:	9e c0       	rjmp	.+316    	; 0x1f8c <_Z21wipermotor_pid_screenv+0x174>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    1e50:	80 91 e7 07 	lds	r24, 0x07E7
    1e54:	90 91 e8 07 	lds	r25, 0x07E8
    1e58:	01 97       	sbiw	r24, 0x01	; 1
    1e5a:	90 93 e8 07 	sts	0x07E8, r25
    1e5e:	80 93 e7 07 	sts	0x07E7, r24
    1e62:	fc 01       	movw	r30, r24
    1e64:	e7 51       	subi	r30, 0x17	; 23
    1e66:	f8 4f       	sbci	r31, 0xF8	; 248
    1e68:	80 81       	ld	r24, Z
    1e6a:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    1e6e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    1e72:	2f ef       	ldi	r18, 0xFF	; 255
    1e74:	83 ec       	ldi	r24, 0xC3	; 195
    1e76:	99 e0       	ldi	r25, 0x09	; 9
    1e78:	21 50       	subi	r18, 0x01	; 1
    1e7a:	80 40       	sbci	r24, 0x00	; 0
    1e7c:	90 40       	sbci	r25, 0x00	; 0
    1e7e:	e1 f7       	brne	.-8      	; 0x1e78 <_Z21wipermotor_pid_screenv+0x60>
    1e80:	00 c0       	rjmp	.+0      	; 0x1e82 <_Z21wipermotor_pid_screenv+0x6a>
    1e82:	00 00       	nop
    1e84:	83 c0       	rjmp	.+262    	; 0x1f8c <_Z21wipermotor_pid_screenv+0x174>
		_delay_ms(200);
		break;
		case BUTTON_1:strcpy(buffer1,getUART_data('u','#'));
    1e86:	63 e2       	ldi	r22, 0x23	; 35
    1e88:	85 e7       	ldi	r24, 0x75	; 117
    1e8a:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1e8e:	bc 01       	movw	r22, r24
    1e90:	8e ec       	ldi	r24, 0xCE	; 206
    1e92:	97 e0       	ldi	r25, 0x07	; 7
    1e94:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1e98:	2f ef       	ldi	r18, 0xFF	; 255
    1e9a:	83 ec       	ldi	r24, 0xC3	; 195
    1e9c:	99 e0       	ldi	r25, 0x09	; 9
    1e9e:	21 50       	subi	r18, 0x01	; 1
    1ea0:	80 40       	sbci	r24, 0x00	; 0
    1ea2:	90 40       	sbci	r25, 0x00	; 0
    1ea4:	e1 f7       	brne	.-8      	; 0x1e9e <_Z21wipermotor_pid_screenv+0x86>
    1ea6:	00 c0       	rjmp	.+0      	; 0x1ea8 <_Z21wipermotor_pid_screenv+0x90>
    1ea8:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    1eaa:	81 e0       	ldi	r24, 0x01	; 1
    1eac:	80 93 b7 07 	sts	0x07B7, r24
		break;
    1eb0:	6d c0       	rjmp	.+218    	; 0x1f8c <_Z21wipermotor_pid_screenv+0x174>
		case BUTTON_7:strcpy(buffer1,getUART_data('v','#'));
    1eb2:	63 e2       	ldi	r22, 0x23	; 35
    1eb4:	86 e7       	ldi	r24, 0x76	; 118
    1eb6:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1eba:	bc 01       	movw	r22, r24
    1ebc:	8e ec       	ldi	r24, 0xCE	; 206
    1ebe:	97 e0       	ldi	r25, 0x07	; 7
    1ec0:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1ec4:	2f ef       	ldi	r18, 0xFF	; 255
    1ec6:	83 ec       	ldi	r24, 0xC3	; 195
    1ec8:	99 e0       	ldi	r25, 0x09	; 9
    1eca:	21 50       	subi	r18, 0x01	; 1
    1ecc:	80 40       	sbci	r24, 0x00	; 0
    1ece:	90 40       	sbci	r25, 0x00	; 0
    1ed0:	e1 f7       	brne	.-8      	; 0x1eca <_Z21wipermotor_pid_screenv+0xb2>
    1ed2:	00 c0       	rjmp	.+0      	; 0x1ed4 <_Z21wipermotor_pid_screenv+0xbc>
    1ed4:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	80 93 b7 07 	sts	0x07B7, r24
		break;
    1edc:	57 c0       	rjmp	.+174    	; 0x1f8c <_Z21wipermotor_pid_screenv+0x174>
		case BUTTON_2:strcpy(buffer2,getUART_data('w','#'));
    1ede:	63 e2       	ldi	r22, 0x23	; 35
    1ee0:	87 e7       	ldi	r24, 0x77	; 119
    1ee2:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	84 ec       	ldi	r24, 0xC4	; 196
    1eea:	97 e0       	ldi	r25, 0x07	; 7
    1eec:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1ef0:	2f ef       	ldi	r18, 0xFF	; 255
    1ef2:	83 ec       	ldi	r24, 0xC3	; 195
    1ef4:	99 e0       	ldi	r25, 0x09	; 9
    1ef6:	21 50       	subi	r18, 0x01	; 1
    1ef8:	80 40       	sbci	r24, 0x00	; 0
    1efa:	90 40       	sbci	r25, 0x00	; 0
    1efc:	e1 f7       	brne	.-8      	; 0x1ef6 <_Z21wipermotor_pid_screenv+0xde>
    1efe:	00 c0       	rjmp	.+0      	; 0x1f00 <_Z21wipermotor_pid_screenv+0xe8>
    1f00:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 b7 07 	sts	0x07B7, r24
		break;
    1f08:	41 c0       	rjmp	.+130    	; 0x1f8c <_Z21wipermotor_pid_screenv+0x174>
		case BUTTON_8:strcpy(buffer2,getUART_data('x','#'));
    1f0a:	63 e2       	ldi	r22, 0x23	; 35
    1f0c:	88 e7       	ldi	r24, 0x78	; 120
    1f0e:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1f12:	bc 01       	movw	r22, r24
    1f14:	84 ec       	ldi	r24, 0xC4	; 196
    1f16:	97 e0       	ldi	r25, 0x07	; 7
    1f18:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1f1c:	2f ef       	ldi	r18, 0xFF	; 255
    1f1e:	83 ec       	ldi	r24, 0xC3	; 195
    1f20:	99 e0       	ldi	r25, 0x09	; 9
    1f22:	21 50       	subi	r18, 0x01	; 1
    1f24:	80 40       	sbci	r24, 0x00	; 0
    1f26:	90 40       	sbci	r25, 0x00	; 0
    1f28:	e1 f7       	brne	.-8      	; 0x1f22 <_Z21wipermotor_pid_screenv+0x10a>
    1f2a:	00 c0       	rjmp	.+0      	; 0x1f2c <_Z21wipermotor_pid_screenv+0x114>
    1f2c:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	80 93 b7 07 	sts	0x07B7, r24
		break;
    1f34:	2b c0       	rjmp	.+86     	; 0x1f8c <_Z21wipermotor_pid_screenv+0x174>
		case BUTTON_3:strcpy(buffer3,getUART_data('y','#'));
    1f36:	63 e2       	ldi	r22, 0x23	; 35
    1f38:	89 e7       	ldi	r24, 0x79	; 121
    1f3a:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1f3e:	bc 01       	movw	r22, r24
    1f40:	8a eb       	ldi	r24, 0xBA	; 186
    1f42:	97 e0       	ldi	r25, 0x07	; 7
    1f44:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1f48:	2f ef       	ldi	r18, 0xFF	; 255
    1f4a:	83 ec       	ldi	r24, 0xC3	; 195
    1f4c:	99 e0       	ldi	r25, 0x09	; 9
    1f4e:	21 50       	subi	r18, 0x01	; 1
    1f50:	80 40       	sbci	r24, 0x00	; 0
    1f52:	90 40       	sbci	r25, 0x00	; 0
    1f54:	e1 f7       	brne	.-8      	; 0x1f4e <_Z21wipermotor_pid_screenv+0x136>
    1f56:	00 c0       	rjmp	.+0      	; 0x1f58 <_Z21wipermotor_pid_screenv+0x140>
    1f58:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	80 93 b7 07 	sts	0x07B7, r24
		break;
    1f60:	15 c0       	rjmp	.+42     	; 0x1f8c <_Z21wipermotor_pid_screenv+0x174>
		case BUTTON_9:strcpy(buffer3,getUART_data('z','#'));
    1f62:	63 e2       	ldi	r22, 0x23	; 35
    1f64:	8a e7       	ldi	r24, 0x7A	; 122
    1f66:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    1f6a:	bc 01       	movw	r22, r24
    1f6c:	8a eb       	ldi	r24, 0xBA	; 186
    1f6e:	97 e0       	ldi	r25, 0x07	; 7
    1f70:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    1f74:	2f ef       	ldi	r18, 0xFF	; 255
    1f76:	83 ec       	ldi	r24, 0xC3	; 195
    1f78:	99 e0       	ldi	r25, 0x09	; 9
    1f7a:	21 50       	subi	r18, 0x01	; 1
    1f7c:	80 40       	sbci	r24, 0x00	; 0
    1f7e:	90 40       	sbci	r25, 0x00	; 0
    1f80:	e1 f7       	brne	.-8      	; 0x1f7a <_Z21wipermotor_pid_screenv+0x162>
    1f82:	00 c0       	rjmp	.+0      	; 0x1f84 <_Z21wipermotor_pid_screenv+0x16c>
    1f84:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	
	if(displayflag)
    1f8c:	80 91 b7 07 	lds	r24, 0x07B7
    1f90:	88 23       	and	r24, r24
    1f92:	c1 f1       	breq	.+112    	; 0x2004 <_Z21wipermotor_pid_screenv+0x1ec>
	{
		lcd_clear();
    1f94:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#Wiper PID#  Back-A");
    1f98:	8e e0       	ldi	r24, 0x0E	; 14
    1f9a:	95 e0       	ldi	r25, 0x05	; 5
    1f9c:	9f 93       	push	r25
    1f9e:	8f 93       	push	r24
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	8f 93       	push	r24
    1fa4:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"Kp = %s",buffer1);
    1fa8:	8e ec       	ldi	r24, 0xCE	; 206
    1faa:	97 e0       	ldi	r25, 0x07	; 7
    1fac:	9f 93       	push	r25
    1fae:	8f 93       	push	r24
    1fb0:	8b e1       	ldi	r24, 0x1B	; 27
    1fb2:	94 e0       	ldi	r25, 0x04	; 4
    1fb4:	9f 93       	push	r25
    1fb6:	8f 93       	push	r24
    1fb8:	82 e0       	ldi	r24, 0x02	; 2
    1fba:	8f 93       	push	r24
    1fbc:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"Ki = %s",buffer2);
    1fc0:	84 ec       	ldi	r24, 0xC4	; 196
    1fc2:	97 e0       	ldi	r25, 0x07	; 7
    1fc4:	9f 93       	push	r25
    1fc6:	8f 93       	push	r24
    1fc8:	83 e2       	ldi	r24, 0x23	; 35
    1fca:	94 e0       	ldi	r25, 0x04	; 4
    1fcc:	9f 93       	push	r25
    1fce:	8f 93       	push	r24
    1fd0:	83 e0       	ldi	r24, 0x03	; 3
    1fd2:	8f 93       	push	r24
    1fd4:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"Kd = %s",buffer3);
    1fd8:	8a eb       	ldi	r24, 0xBA	; 186
    1fda:	97 e0       	ldi	r25, 0x07	; 7
    1fdc:	9f 93       	push	r25
    1fde:	8f 93       	push	r24
    1fe0:	8b e2       	ldi	r24, 0x2B	; 43
    1fe2:	94 e0       	ldi	r25, 0x04	; 4
    1fe4:	9f 93       	push	r25
    1fe6:	8f 93       	push	r24
    1fe8:	84 e0       	ldi	r24, 0x04	; 4
    1fea:	8f 93       	push	r24
    1fec:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    1ff0:	10 92 b7 07 	sts	0x07B7, r1
    1ff4:	8d b7       	in	r24, 0x3d	; 61
    1ff6:	9e b7       	in	r25, 0x3e	; 62
    1ff8:	42 96       	adiw	r24, 0x12	; 18
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	9e bf       	out	0x3e, r25	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	8d bf       	out	0x3d, r24	; 61
    2004:	08 95       	ret

00002006 <_Z17pololu_arm_screenv>:
	}
}
void pololu_arm_screen()
{
	switch(get_key())
    2006:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    200a:	83 30       	cpi	r24, 0x03	; 3
    200c:	91 05       	cpc	r25, r1
    200e:	c1 f1       	breq	.+112    	; 0x2080 <_Z17pololu_arm_screenv+0x7a>
    2010:	8d 30       	cpi	r24, 0x0D	; 13
    2012:	91 05       	cpc	r25, r1
    2014:	21 f0       	breq	.+8      	; 0x201e <_Z17pololu_arm_screenv+0x18>
    2016:	02 97       	sbiw	r24, 0x02	; 2
    2018:	09 f0       	breq	.+2      	; 0x201c <_Z17pololu_arm_screenv+0x16>
    201a:	47 c0       	rjmp	.+142    	; 0x20aa <_Z17pololu_arm_screenv+0xa4>
    201c:	1b c0       	rjmp	.+54     	; 0x2054 <_Z17pololu_arm_screenv+0x4e>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    201e:	80 91 e7 07 	lds	r24, 0x07E7
    2022:	90 91 e8 07 	lds	r25, 0x07E8
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	90 93 e8 07 	sts	0x07E8, r25
    202c:	80 93 e7 07 	sts	0x07E7, r24
    2030:	fc 01       	movw	r30, r24
    2032:	e7 51       	subi	r30, 0x17	; 23
    2034:	f8 4f       	sbci	r31, 0xF8	; 248
    2036:	80 81       	ld	r24, Z
    2038:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    203c:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    2040:	2f ef       	ldi	r18, 0xFF	; 255
    2042:	83 ec       	ldi	r24, 0xC3	; 195
    2044:	99 e0       	ldi	r25, 0x09	; 9
    2046:	21 50       	subi	r18, 0x01	; 1
    2048:	80 40       	sbci	r24, 0x00	; 0
    204a:	90 40       	sbci	r25, 0x00	; 0
    204c:	e1 f7       	brne	.-8      	; 0x2046 <_Z17pololu_arm_screenv+0x40>
    204e:	00 c0       	rjmp	.+0      	; 0x2050 <_Z17pololu_arm_screenv+0x4a>
    2050:	00 00       	nop
    2052:	2b c0       	rjmp	.+86     	; 0x20aa <_Z17pololu_arm_screenv+0xa4>
		_delay_ms(200);
		break;
		
		case BUTTON_1:strcpy(buffer1,getUART_data('k','#'));
    2054:	63 e2       	ldi	r22, 0x23	; 35
    2056:	8b e6       	ldi	r24, 0x6B	; 107
    2058:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    205c:	bc 01       	movw	r22, r24
    205e:	8e ec       	ldi	r24, 0xCE	; 206
    2060:	97 e0       	ldi	r25, 0x07	; 7
    2062:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    2066:	2f ef       	ldi	r18, 0xFF	; 255
    2068:	83 ec       	ldi	r24, 0xC3	; 195
    206a:	99 e0       	ldi	r25, 0x09	; 9
    206c:	21 50       	subi	r18, 0x01	; 1
    206e:	80 40       	sbci	r24, 0x00	; 0
    2070:	90 40       	sbci	r25, 0x00	; 0
    2072:	e1 f7       	brne	.-8      	; 0x206c <_Z17pololu_arm_screenv+0x66>
    2074:	00 c0       	rjmp	.+0      	; 0x2076 <_Z17pololu_arm_screenv+0x70>
    2076:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	80 93 b7 07 	sts	0x07B7, r24
		break;
    207e:	15 c0       	rjmp	.+42     	; 0x20aa <_Z17pololu_arm_screenv+0xa4>
		
		case BUTTON_2:strcpy(buffer2,getUART_data('k','#'));
    2080:	63 e2       	ldi	r22, 0x23	; 35
    2082:	8b e6       	ldi	r24, 0x6B	; 107
    2084:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    2088:	bc 01       	movw	r22, r24
    208a:	84 ec       	ldi	r24, 0xC4	; 196
    208c:	97 e0       	ldi	r25, 0x07	; 7
    208e:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    2092:	2f ef       	ldi	r18, 0xFF	; 255
    2094:	83 ec       	ldi	r24, 0xC3	; 195
    2096:	99 e0       	ldi	r25, 0x09	; 9
    2098:	21 50       	subi	r18, 0x01	; 1
    209a:	80 40       	sbci	r24, 0x00	; 0
    209c:	90 40       	sbci	r25, 0x00	; 0
    209e:	e1 f7       	brne	.-8      	; 0x2098 <_Z17pololu_arm_screenv+0x92>
    20a0:	00 c0       	rjmp	.+0      	; 0x20a2 <_Z17pololu_arm_screenv+0x9c>
    20a2:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	if(displayflag)
    20aa:	80 91 b7 07 	lds	r24, 0x07B7
    20ae:	88 23       	and	r24, r24
    20b0:	61 f1       	breq	.+88     	; 0x210a <_Z17pololu_arm_screenv+0x104>
	{
		lcd_clear();
    20b2:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#POLOLU ARM#  BACK-A");
    20b6:	82 e2       	ldi	r24, 0x22	; 34
    20b8:	95 e0       	ldi	r25, 0x05	; 5
    20ba:	9f 93       	push	r25
    20bc:	8f 93       	push	r24
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	8f 93       	push	r24
    20c2:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"1.Sensor data  = %s",buffer1);
    20c6:	8e ec       	ldi	r24, 0xCE	; 206
    20c8:	97 e0       	ldi	r25, 0x07	; 7
    20ca:	9f 93       	push	r25
    20cc:	8f 93       	push	r24
    20ce:	87 e3       	ldi	r24, 0x37	; 55
    20d0:	95 e0       	ldi	r25, 0x05	; 5
    20d2:	9f 93       	push	r25
    20d4:	8f 93       	push	r24
    20d6:	82 e0       	ldi	r24, 0x02	; 2
    20d8:	8f 93       	push	r24
    20da:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"2.Threshold =  %s",buffer2);
    20de:	84 ec       	ldi	r24, 0xC4	; 196
    20e0:	97 e0       	ldi	r25, 0x07	; 7
    20e2:	9f 93       	push	r25
    20e4:	8f 93       	push	r24
    20e6:	8b e4       	ldi	r24, 0x4B	; 75
    20e8:	95 e0       	ldi	r25, 0x05	; 5
    20ea:	9f 93       	push	r25
    20ec:	8f 93       	push	r24
    20ee:	83 e0       	ldi	r24, 0x03	; 3
    20f0:	8f 93       	push	r24
    20f2:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    20f6:	10 92 b7 07 	sts	0x07B7, r1
    20fa:	8d b7       	in	r24, 0x3d	; 61
    20fc:	9e b7       	in	r25, 0x3e	; 62
    20fe:	0d 96       	adiw	r24, 0x0d	; 13
    2100:	0f b6       	in	r0, 0x3f	; 63
    2102:	f8 94       	cli
    2104:	9e bf       	out	0x3e, r25	; 62
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	8d bf       	out	0x3d, r24	; 61
    210a:	08 95       	ret

0000210c <_Z21pololu_gripper_screenv>:
	}
		
}
void pololu_gripper_screen()
{
	switch(get_key())
    210c:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    2110:	83 30       	cpi	r24, 0x03	; 3
    2112:	91 05       	cpc	r25, r1
    2114:	c1 f1       	breq	.+112    	; 0x2186 <_Z21pololu_gripper_screenv+0x7a>
    2116:	8d 30       	cpi	r24, 0x0D	; 13
    2118:	91 05       	cpc	r25, r1
    211a:	21 f0       	breq	.+8      	; 0x2124 <_Z21pololu_gripper_screenv+0x18>
    211c:	02 97       	sbiw	r24, 0x02	; 2
    211e:	09 f0       	breq	.+2      	; 0x2122 <_Z21pololu_gripper_screenv+0x16>
    2120:	47 c0       	rjmp	.+142    	; 0x21b0 <_Z21pololu_gripper_screenv+0xa4>
    2122:	1b c0       	rjmp	.+54     	; 0x215a <_Z21pololu_gripper_screenv+0x4e>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    2124:	80 91 e7 07 	lds	r24, 0x07E7
    2128:	90 91 e8 07 	lds	r25, 0x07E8
    212c:	01 97       	sbiw	r24, 0x01	; 1
    212e:	90 93 e8 07 	sts	0x07E8, r25
    2132:	80 93 e7 07 	sts	0x07E7, r24
    2136:	fc 01       	movw	r30, r24
    2138:	e7 51       	subi	r30, 0x17	; 23
    213a:	f8 4f       	sbci	r31, 0xF8	; 248
    213c:	80 81       	ld	r24, Z
    213e:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    2142:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    2146:	2f ef       	ldi	r18, 0xFF	; 255
    2148:	83 ec       	ldi	r24, 0xC3	; 195
    214a:	99 e0       	ldi	r25, 0x09	; 9
    214c:	21 50       	subi	r18, 0x01	; 1
    214e:	80 40       	sbci	r24, 0x00	; 0
    2150:	90 40       	sbci	r25, 0x00	; 0
    2152:	e1 f7       	brne	.-8      	; 0x214c <_Z21pololu_gripper_screenv+0x40>
    2154:	00 c0       	rjmp	.+0      	; 0x2156 <_Z21pololu_gripper_screenv+0x4a>
    2156:	00 00       	nop
    2158:	2b c0       	rjmp	.+86     	; 0x21b0 <_Z21pololu_gripper_screenv+0xa4>
		_delay_ms(200);
		break;
		
		case BUTTON_1:strcpy(buffer1,getUART_data('j','#'));
    215a:	63 e2       	ldi	r22, 0x23	; 35
    215c:	8a e6       	ldi	r24, 0x6A	; 106
    215e:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    2162:	bc 01       	movw	r22, r24
    2164:	8e ec       	ldi	r24, 0xCE	; 206
    2166:	97 e0       	ldi	r25, 0x07	; 7
    2168:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    216c:	2f ef       	ldi	r18, 0xFF	; 255
    216e:	83 ec       	ldi	r24, 0xC3	; 195
    2170:	99 e0       	ldi	r25, 0x09	; 9
    2172:	21 50       	subi	r18, 0x01	; 1
    2174:	80 40       	sbci	r24, 0x00	; 0
    2176:	90 40       	sbci	r25, 0x00	; 0
    2178:	e1 f7       	brne	.-8      	; 0x2172 <_Z21pololu_gripper_screenv+0x66>
    217a:	00 c0       	rjmp	.+0      	; 0x217c <_Z21pololu_gripper_screenv+0x70>
    217c:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    217e:	81 e0       	ldi	r24, 0x01	; 1
    2180:	80 93 b7 07 	sts	0x07B7, r24
		break;
    2184:	15 c0       	rjmp	.+42     	; 0x21b0 <_Z21pololu_gripper_screenv+0xa4>
		
		case BUTTON_2:strcpy(buffer2,getUART_data('j','#'));
    2186:	63 e2       	ldi	r22, 0x23	; 35
    2188:	8a e6       	ldi	r24, 0x6A	; 106
    218a:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    218e:	bc 01       	movw	r22, r24
    2190:	84 ec       	ldi	r24, 0xC4	; 196
    2192:	97 e0       	ldi	r25, 0x07	; 7
    2194:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    2198:	2f ef       	ldi	r18, 0xFF	; 255
    219a:	83 ec       	ldi	r24, 0xC3	; 195
    219c:	99 e0       	ldi	r25, 0x09	; 9
    219e:	21 50       	subi	r18, 0x01	; 1
    21a0:	80 40       	sbci	r24, 0x00	; 0
    21a2:	90 40       	sbci	r25, 0x00	; 0
    21a4:	e1 f7       	brne	.-8      	; 0x219e <_Z21pololu_gripper_screenv+0x92>
    21a6:	00 c0       	rjmp	.+0      	; 0x21a8 <_Z21pololu_gripper_screenv+0x9c>
    21a8:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	if(displayflag)
    21b0:	80 91 b7 07 	lds	r24, 0x07B7
    21b4:	88 23       	and	r24, r24
    21b6:	61 f1       	breq	.+88     	; 0x2210 <_Z21pololu_gripper_screenv+0x104>
	{
		lcd_clear();
    21b8:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#POLOLU GRIP# BACK-A");
    21bc:	8d e5       	ldi	r24, 0x5D	; 93
    21be:	95 e0       	ldi	r25, 0x05	; 5
    21c0:	9f 93       	push	r25
    21c2:	8f 93       	push	r24
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	8f 93       	push	r24
    21c8:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"1.Sensor data  = %s",buffer1);
    21cc:	8e ec       	ldi	r24, 0xCE	; 206
    21ce:	97 e0       	ldi	r25, 0x07	; 7
    21d0:	9f 93       	push	r25
    21d2:	8f 93       	push	r24
    21d4:	87 e3       	ldi	r24, 0x37	; 55
    21d6:	95 e0       	ldi	r25, 0x05	; 5
    21d8:	9f 93       	push	r25
    21da:	8f 93       	push	r24
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	8f 93       	push	r24
    21e0:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"2.Threshold =  %s",buffer2);
    21e4:	84 ec       	ldi	r24, 0xC4	; 196
    21e6:	97 e0       	ldi	r25, 0x07	; 7
    21e8:	9f 93       	push	r25
    21ea:	8f 93       	push	r24
    21ec:	8b e4       	ldi	r24, 0x4B	; 75
    21ee:	95 e0       	ldi	r25, 0x05	; 5
    21f0:	9f 93       	push	r25
    21f2:	8f 93       	push	r24
    21f4:	83 e0       	ldi	r24, 0x03	; 3
    21f6:	8f 93       	push	r24
    21f8:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    21fc:	10 92 b7 07 	sts	0x07B7, r1
    2200:	8d b7       	in	r24, 0x3d	; 61
    2202:	9e b7       	in	r25, 0x3e	; 62
    2204:	0d 96       	adiw	r24, 0x0d	; 13
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	9e bf       	out	0x3e, r25	; 62
    220c:	0f be       	out	0x3f, r0	; 63
    220e:	8d bf       	out	0x3d, r24	; 61
    2210:	08 95       	ret

00002212 <_Z19pololu_wiper_screenv>:
	}
	
}
void pololu_wiper_screen()
{
	switch(get_key())
    2212:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    2216:	83 30       	cpi	r24, 0x03	; 3
    2218:	91 05       	cpc	r25, r1
    221a:	c1 f1       	breq	.+112    	; 0x228c <_Z19pololu_wiper_screenv+0x7a>
    221c:	8d 30       	cpi	r24, 0x0D	; 13
    221e:	91 05       	cpc	r25, r1
    2220:	21 f0       	breq	.+8      	; 0x222a <_Z19pololu_wiper_screenv+0x18>
    2222:	02 97       	sbiw	r24, 0x02	; 2
    2224:	09 f0       	breq	.+2      	; 0x2228 <_Z19pololu_wiper_screenv+0x16>
    2226:	47 c0       	rjmp	.+142    	; 0x22b6 <_Z19pololu_wiper_screenv+0xa4>
    2228:	1b c0       	rjmp	.+54     	; 0x2260 <_Z19pololu_wiper_screenv+0x4e>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    222a:	80 91 e7 07 	lds	r24, 0x07E7
    222e:	90 91 e8 07 	lds	r25, 0x07E8
    2232:	01 97       	sbiw	r24, 0x01	; 1
    2234:	90 93 e8 07 	sts	0x07E8, r25
    2238:	80 93 e7 07 	sts	0x07E7, r24
    223c:	fc 01       	movw	r30, r24
    223e:	e7 51       	subi	r30, 0x17	; 23
    2240:	f8 4f       	sbci	r31, 0xF8	; 248
    2242:	80 81       	ld	r24, Z
    2244:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    2248:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    224c:	2f ef       	ldi	r18, 0xFF	; 255
    224e:	83 ec       	ldi	r24, 0xC3	; 195
    2250:	99 e0       	ldi	r25, 0x09	; 9
    2252:	21 50       	subi	r18, 0x01	; 1
    2254:	80 40       	sbci	r24, 0x00	; 0
    2256:	90 40       	sbci	r25, 0x00	; 0
    2258:	e1 f7       	brne	.-8      	; 0x2252 <_Z19pololu_wiper_screenv+0x40>
    225a:	00 c0       	rjmp	.+0      	; 0x225c <_Z19pololu_wiper_screenv+0x4a>
    225c:	00 00       	nop
    225e:	2b c0       	rjmp	.+86     	; 0x22b6 <_Z19pololu_wiper_screenv+0xa4>
		_delay_ms(200);
		break;
		
		case BUTTON_1:strcpy(buffer1,getUART_data('l','#'));
    2260:	63 e2       	ldi	r22, 0x23	; 35
    2262:	8c e6       	ldi	r24, 0x6C	; 108
    2264:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    2268:	bc 01       	movw	r22, r24
    226a:	8e ec       	ldi	r24, 0xCE	; 206
    226c:	97 e0       	ldi	r25, 0x07	; 7
    226e:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    2272:	2f ef       	ldi	r18, 0xFF	; 255
    2274:	83 ec       	ldi	r24, 0xC3	; 195
    2276:	99 e0       	ldi	r25, 0x09	; 9
    2278:	21 50       	subi	r18, 0x01	; 1
    227a:	80 40       	sbci	r24, 0x00	; 0
    227c:	90 40       	sbci	r25, 0x00	; 0
    227e:	e1 f7       	brne	.-8      	; 0x2278 <_Z19pololu_wiper_screenv+0x66>
    2280:	00 c0       	rjmp	.+0      	; 0x2282 <_Z19pololu_wiper_screenv+0x70>
    2282:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	80 93 b7 07 	sts	0x07B7, r24
		break;
    228a:	15 c0       	rjmp	.+42     	; 0x22b6 <_Z19pololu_wiper_screenv+0xa4>
		
		case BUTTON_2:strcpy(buffer2,getUART_data('l','#'));
    228c:	63 e2       	ldi	r22, 0x23	; 35
    228e:	8c e6       	ldi	r24, 0x6C	; 108
    2290:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    2294:	bc 01       	movw	r22, r24
    2296:	84 ec       	ldi	r24, 0xC4	; 196
    2298:	97 e0       	ldi	r25, 0x07	; 7
    229a:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    229e:	2f ef       	ldi	r18, 0xFF	; 255
    22a0:	83 ec       	ldi	r24, 0xC3	; 195
    22a2:	99 e0       	ldi	r25, 0x09	; 9
    22a4:	21 50       	subi	r18, 0x01	; 1
    22a6:	80 40       	sbci	r24, 0x00	; 0
    22a8:	90 40       	sbci	r25, 0x00	; 0
    22aa:	e1 f7       	brne	.-8      	; 0x22a4 <_Z19pololu_wiper_screenv+0x92>
    22ac:	00 c0       	rjmp	.+0      	; 0x22ae <_Z19pololu_wiper_screenv+0x9c>
    22ae:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    22b0:	81 e0       	ldi	r24, 0x01	; 1
    22b2:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	if(displayflag)
    22b6:	80 91 b7 07 	lds	r24, 0x07B7
    22ba:	88 23       	and	r24, r24
    22bc:	61 f1       	breq	.+88     	; 0x2316 <_Z19pololu_wiper_screenv+0x104>
	{
		lcd_clear();
    22be:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#POLOLU WIPER#  BACK-A");
    22c2:	82 e7       	ldi	r24, 0x72	; 114
    22c4:	95 e0       	ldi	r25, 0x05	; 5
    22c6:	9f 93       	push	r25
    22c8:	8f 93       	push	r24
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	8f 93       	push	r24
    22ce:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"1.Sensor data  = %s",buffer1);
    22d2:	8e ec       	ldi	r24, 0xCE	; 206
    22d4:	97 e0       	ldi	r25, 0x07	; 7
    22d6:	9f 93       	push	r25
    22d8:	8f 93       	push	r24
    22da:	87 e3       	ldi	r24, 0x37	; 55
    22dc:	95 e0       	ldi	r25, 0x05	; 5
    22de:	9f 93       	push	r25
    22e0:	8f 93       	push	r24
    22e2:	82 e0       	ldi	r24, 0x02	; 2
    22e4:	8f 93       	push	r24
    22e6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"2.Threshold =  %s",buffer2);
    22ea:	84 ec       	ldi	r24, 0xC4	; 196
    22ec:	97 e0       	ldi	r25, 0x07	; 7
    22ee:	9f 93       	push	r25
    22f0:	8f 93       	push	r24
    22f2:	8b e4       	ldi	r24, 0x4B	; 75
    22f4:	95 e0       	ldi	r25, 0x05	; 5
    22f6:	9f 93       	push	r25
    22f8:	8f 93       	push	r24
    22fa:	83 e0       	ldi	r24, 0x03	; 3
    22fc:	8f 93       	push	r24
    22fe:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    2302:	10 92 b7 07 	sts	0x07B7, r1
    2306:	8d b7       	in	r24, 0x3d	; 61
    2308:	9e b7       	in	r25, 0x3e	; 62
    230a:	0d 96       	adiw	r24, 0x0d	; 13
    230c:	0f b6       	in	r0, 0x3f	; 63
    230e:	f8 94       	cli
    2310:	9e bf       	out	0x3e, r25	; 62
    2312:	0f be       	out	0x3f, r0	; 63
    2314:	8d bf       	out	0x3d, r24	; 61
    2316:	08 95       	ret

00002318 <_Z14ductfan_screenv>:
	}
	
}
void ductfan_screen()
{
	switch(get_key())
    2318:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    231c:	83 30       	cpi	r24, 0x03	; 3
    231e:	91 05       	cpc	r25, r1
    2320:	c1 f1       	breq	.+112    	; 0x2392 <_Z14ductfan_screenv+0x7a>
    2322:	8d 30       	cpi	r24, 0x0D	; 13
    2324:	91 05       	cpc	r25, r1
    2326:	21 f0       	breq	.+8      	; 0x2330 <_Z14ductfan_screenv+0x18>
    2328:	02 97       	sbiw	r24, 0x02	; 2
    232a:	09 f0       	breq	.+2      	; 0x232e <_Z14ductfan_screenv+0x16>
    232c:	47 c0       	rjmp	.+142    	; 0x23bc <_Z14ductfan_screenv+0xa4>
    232e:	1b c0       	rjmp	.+54     	; 0x2366 <_Z14ductfan_screenv+0x4e>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    2330:	80 91 e7 07 	lds	r24, 0x07E7
    2334:	90 91 e8 07 	lds	r25, 0x07E8
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	90 93 e8 07 	sts	0x07E8, r25
    233e:	80 93 e7 07 	sts	0x07E7, r24
    2342:	fc 01       	movw	r30, r24
    2344:	e7 51       	subi	r30, 0x17	; 23
    2346:	f8 4f       	sbci	r31, 0xF8	; 248
    2348:	80 81       	ld	r24, Z
    234a:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    234e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    2352:	2f ef       	ldi	r18, 0xFF	; 255
    2354:	83 ec       	ldi	r24, 0xC3	; 195
    2356:	99 e0       	ldi	r25, 0x09	; 9
    2358:	21 50       	subi	r18, 0x01	; 1
    235a:	80 40       	sbci	r24, 0x00	; 0
    235c:	90 40       	sbci	r25, 0x00	; 0
    235e:	e1 f7       	brne	.-8      	; 0x2358 <_Z14ductfan_screenv+0x40>
    2360:	00 c0       	rjmp	.+0      	; 0x2362 <_Z14ductfan_screenv+0x4a>
    2362:	00 00       	nop
    2364:	2b c0       	rjmp	.+86     	; 0x23bc <_Z14ductfan_screenv+0xa4>
		_delay_ms(200);
		break;
		
		case BUTTON_1:strcpy(buffer1,getUART_data('h','#'));
    2366:	63 e2       	ldi	r22, 0x23	; 35
    2368:	88 e6       	ldi	r24, 0x68	; 104
    236a:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    236e:	bc 01       	movw	r22, r24
    2370:	8e ec       	ldi	r24, 0xCE	; 206
    2372:	97 e0       	ldi	r25, 0x07	; 7
    2374:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    2378:	2f ef       	ldi	r18, 0xFF	; 255
    237a:	83 ec       	ldi	r24, 0xC3	; 195
    237c:	99 e0       	ldi	r25, 0x09	; 9
    237e:	21 50       	subi	r18, 0x01	; 1
    2380:	80 40       	sbci	r24, 0x00	; 0
    2382:	90 40       	sbci	r25, 0x00	; 0
    2384:	e1 f7       	brne	.-8      	; 0x237e <_Z14ductfan_screenv+0x66>
    2386:	00 c0       	rjmp	.+0      	; 0x2388 <_Z14ductfan_screenv+0x70>
    2388:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	80 93 b7 07 	sts	0x07B7, r24
		break;
    2390:	15 c0       	rjmp	.+42     	; 0x23bc <_Z14ductfan_screenv+0xa4>
		
		case BUTTON_2:strcpy(buffer2,getUART_data('i','#'));
    2392:	63 e2       	ldi	r22, 0x23	; 35
    2394:	89 e6       	ldi	r24, 0x69	; 105
    2396:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    239a:	bc 01       	movw	r22, r24
    239c:	84 ec       	ldi	r24, 0xC4	; 196
    239e:	97 e0       	ldi	r25, 0x07	; 7
    23a0:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    23a4:	2f ef       	ldi	r18, 0xFF	; 255
    23a6:	83 ec       	ldi	r24, 0xC3	; 195
    23a8:	99 e0       	ldi	r25, 0x09	; 9
    23aa:	21 50       	subi	r18, 0x01	; 1
    23ac:	80 40       	sbci	r24, 0x00	; 0
    23ae:	90 40       	sbci	r25, 0x00	; 0
    23b0:	e1 f7       	brne	.-8      	; 0x23aa <_Z14ductfan_screenv+0x92>
    23b2:	00 c0       	rjmp	.+0      	; 0x23b4 <_Z14ductfan_screenv+0x9c>
    23b4:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	if(displayflag)
    23bc:	80 91 b7 07 	lds	r24, 0x07B7
    23c0:	88 23       	and	r24, r24
    23c2:	a1 f1       	breq	.+104    	; 0x242c <_Z14ductfan_screenv+0x114>
	{
		lcd_clear();
    23c4:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#DUCT FAN#  BACK-A");
    23c8:	89 e8       	ldi	r24, 0x89	; 137
    23ca:	95 e0       	ldi	r25, 0x05	; 5
    23cc:	9f 93       	push	r25
    23ce:	8f 93       	push	r24
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	8f 93       	push	r24
    23d4:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"  Calibrate-C");
    23d8:	8c e9       	ldi	r24, 0x9C	; 156
    23da:	95 e0       	ldi	r25, 0x05	; 5
    23dc:	9f 93       	push	r25
    23de:	8f 93       	push	r24
    23e0:	82 e0       	ldi	r24, 0x02	; 2
    23e2:	8f 93       	push	r24
    23e4:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"2.Increase Speed=%s",buffer1);
    23e8:	8e ec       	ldi	r24, 0xCE	; 206
    23ea:	97 e0       	ldi	r25, 0x07	; 7
    23ec:	9f 93       	push	r25
    23ee:	8f 93       	push	r24
    23f0:	8a ea       	ldi	r24, 0xAA	; 170
    23f2:	95 e0       	ldi	r25, 0x05	; 5
    23f4:	9f 93       	push	r25
    23f6:	8f 93       	push	r24
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	8f 93       	push	r24
    23fc:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"8.Decrease Speed=%s",buffer2);
    2400:	84 ec       	ldi	r24, 0xC4	; 196
    2402:	97 e0       	ldi	r25, 0x07	; 7
    2404:	9f 93       	push	r25
    2406:	8f 93       	push	r24
    2408:	8e eb       	ldi	r24, 0xBE	; 190
    240a:	95 e0       	ldi	r25, 0x05	; 5
    240c:	9f 93       	push	r25
    240e:	8f 93       	push	r24
    2410:	84 e0       	ldi	r24, 0x04	; 4
    2412:	8f 93       	push	r24
    2414:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    2418:	10 92 b7 07 	sts	0x07B7, r1
    241c:	8d b7       	in	r24, 0x3d	; 61
    241e:	9e b7       	in	r25, 0x3e	; 62
    2420:	40 96       	adiw	r24, 0x10	; 16
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	9e bf       	out	0x3e, r25	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	8d bf       	out	0x3d, r24	; 61
    242c:	08 95       	ret

0000242e <_Z16ductservo_screenv>:
	}
	
}
void ductservo_screen()
{
	switch(get_key())
    242e:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    2432:	89 30       	cpi	r24, 0x09	; 9
    2434:	91 05       	cpc	r25, r1
    2436:	c1 f1       	breq	.+112    	; 0x24a8 <_Z16ductservo_screenv+0x7a>
    2438:	8d 30       	cpi	r24, 0x0D	; 13
    243a:	91 05       	cpc	r25, r1
    243c:	21 f0       	breq	.+8      	; 0x2446 <_Z16ductservo_screenv+0x18>
    243e:	03 97       	sbiw	r24, 0x03	; 3
    2440:	09 f0       	breq	.+2      	; 0x2444 <_Z16ductservo_screenv+0x16>
    2442:	47 c0       	rjmp	.+142    	; 0x24d2 <_Z16ductservo_screenv+0xa4>
    2444:	1b c0       	rjmp	.+54     	; 0x247c <_Z16ductservo_screenv+0x4e>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    2446:	80 91 e7 07 	lds	r24, 0x07E7
    244a:	90 91 e8 07 	lds	r25, 0x07E8
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	90 93 e8 07 	sts	0x07E8, r25
    2454:	80 93 e7 07 	sts	0x07E7, r24
    2458:	fc 01       	movw	r30, r24
    245a:	e7 51       	subi	r30, 0x17	; 23
    245c:	f8 4f       	sbci	r31, 0xF8	; 248
    245e:	80 81       	ld	r24, Z
    2460:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    2464:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    2468:	2f ef       	ldi	r18, 0xFF	; 255
    246a:	83 ec       	ldi	r24, 0xC3	; 195
    246c:	99 e0       	ldi	r25, 0x09	; 9
    246e:	21 50       	subi	r18, 0x01	; 1
    2470:	80 40       	sbci	r24, 0x00	; 0
    2472:	90 40       	sbci	r25, 0x00	; 0
    2474:	e1 f7       	brne	.-8      	; 0x246e <_Z16ductservo_screenv+0x40>
    2476:	00 c0       	rjmp	.+0      	; 0x2478 <_Z16ductservo_screenv+0x4a>
    2478:	00 00       	nop
    247a:	2b c0       	rjmp	.+86     	; 0x24d2 <_Z16ductservo_screenv+0xa4>
		_delay_ms(200);
		break;
		
		case BUTTON_2:strcpy(buffer1,getUART_data('o','#'));
    247c:	63 e2       	ldi	r22, 0x23	; 35
    247e:	8f e6       	ldi	r24, 0x6F	; 111
    2480:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    2484:	bc 01       	movw	r22, r24
    2486:	8e ec       	ldi	r24, 0xCE	; 206
    2488:	97 e0       	ldi	r25, 0x07	; 7
    248a:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    248e:	2f ef       	ldi	r18, 0xFF	; 255
    2490:	83 ec       	ldi	r24, 0xC3	; 195
    2492:	99 e0       	ldi	r25, 0x09	; 9
    2494:	21 50       	subi	r18, 0x01	; 1
    2496:	80 40       	sbci	r24, 0x00	; 0
    2498:	90 40       	sbci	r25, 0x00	; 0
    249a:	e1 f7       	brne	.-8      	; 0x2494 <_Z16ductservo_screenv+0x66>
    249c:	00 c0       	rjmp	.+0      	; 0x249e <_Z16ductservo_screenv+0x70>
    249e:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	80 93 b7 07 	sts	0x07B7, r24
		break;
    24a6:	15 c0       	rjmp	.+42     	; 0x24d2 <_Z16ductservo_screenv+0xa4>
		
		case BUTTON_8:strcpy(buffer2,getUART_data('p','#'));
    24a8:	63 e2       	ldi	r22, 0x23	; 35
    24aa:	80 e7       	ldi	r24, 0x70	; 112
    24ac:	0e 94 ad 03 	call	0x75a	; 0x75a <_Z12getUART_datahc>
    24b0:	bc 01       	movw	r22, r24
    24b2:	84 ec       	ldi	r24, 0xC4	; 196
    24b4:	97 e0       	ldi	r25, 0x07	; 7
    24b6:	0e 94 bc 19 	call	0x3378	; 0x3378 <strcpy>
    24ba:	2f ef       	ldi	r18, 0xFF	; 255
    24bc:	83 ec       	ldi	r24, 0xC3	; 195
    24be:	99 e0       	ldi	r25, 0x09	; 9
    24c0:	21 50       	subi	r18, 0x01	; 1
    24c2:	80 40       	sbci	r24, 0x00	; 0
    24c4:	90 40       	sbci	r25, 0x00	; 0
    24c6:	e1 f7       	brne	.-8      	; 0x24c0 <_Z16ductservo_screenv+0x92>
    24c8:	00 c0       	rjmp	.+0      	; 0x24ca <_Z16ductservo_screenv+0x9c>
    24ca:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	if(displayflag)
    24d2:	80 91 b7 07 	lds	r24, 0x07B7
    24d6:	88 23       	and	r24, r24
    24d8:	61 f1       	breq	.+88     	; 0x2532 <_Z16ductservo_screenv+0x104>
	{
		lcd_clear();
    24da:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#DUCT SERVO#  BACK-A");
    24de:	82 ed       	ldi	r24, 0xD2	; 210
    24e0:	95 e0       	ldi	r25, 0x05	; 5
    24e2:	9f 93       	push	r25
    24e4:	8f 93       	push	r24
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	8f 93       	push	r24
    24ea:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"2.Increase Speed=%s",buffer1);
    24ee:	8e ec       	ldi	r24, 0xCE	; 206
    24f0:	97 e0       	ldi	r25, 0x07	; 7
    24f2:	9f 93       	push	r25
    24f4:	8f 93       	push	r24
    24f6:	8a ea       	ldi	r24, 0xAA	; 170
    24f8:	95 e0       	ldi	r25, 0x05	; 5
    24fa:	9f 93       	push	r25
    24fc:	8f 93       	push	r24
    24fe:	82 e0       	ldi	r24, 0x02	; 2
    2500:	8f 93       	push	r24
    2502:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"8.Decrease Speed=%s",buffer2);
    2506:	84 ec       	ldi	r24, 0xC4	; 196
    2508:	97 e0       	ldi	r25, 0x07	; 7
    250a:	9f 93       	push	r25
    250c:	8f 93       	push	r24
    250e:	8e eb       	ldi	r24, 0xBE	; 190
    2510:	95 e0       	ldi	r25, 0x05	; 5
    2512:	9f 93       	push	r25
    2514:	8f 93       	push	r24
    2516:	83 e0       	ldi	r24, 0x03	; 3
    2518:	8f 93       	push	r24
    251a:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    251e:	10 92 b7 07 	sts	0x07B7, r1
    2522:	8d b7       	in	r24, 0x3d	; 61
    2524:	9e b7       	in	r25, 0x3e	; 62
    2526:	0d 96       	adiw	r24, 0x0d	; 13
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	9e bf       	out	0x3e, r25	; 62
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	8d bf       	out	0x3d, r24	; 61
    2532:	08 95       	ret

00002534 <_Z14gripper_screenv>:
	}
	
}
void gripper_screen()
{
	switch(get_key())
    2534:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    2538:	89 30       	cpi	r24, 0x09	; 9
    253a:	91 05       	cpc	r25, r1
    253c:	89 f1       	breq	.+98     	; 0x25a0 <_Z14gripper_screenv+0x6c>
    253e:	8d 30       	cpi	r24, 0x0D	; 13
    2540:	91 05       	cpc	r25, r1
    2542:	19 f0       	breq	.+6      	; 0x254a <_Z14gripper_screenv+0x16>
    2544:	03 97       	sbiw	r24, 0x03	; 3
    2546:	d9 f5       	brne	.+118    	; 0x25be <_Z14gripper_screenv+0x8a>
    2548:	1b c0       	rjmp	.+54     	; 0x2580 <_Z14gripper_screenv+0x4c>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    254a:	80 91 e7 07 	lds	r24, 0x07E7
    254e:	90 91 e8 07 	lds	r25, 0x07E8
    2552:	01 97       	sbiw	r24, 0x01	; 1
    2554:	90 93 e8 07 	sts	0x07E8, r25
    2558:	80 93 e7 07 	sts	0x07E7, r24
    255c:	fc 01       	movw	r30, r24
    255e:	e7 51       	subi	r30, 0x17	; 23
    2560:	f8 4f       	sbci	r31, 0xF8	; 248
    2562:	80 81       	ld	r24, Z
    2564:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    2568:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    256c:	2f ef       	ldi	r18, 0xFF	; 255
    256e:	83 ec       	ldi	r24, 0xC3	; 195
    2570:	99 e0       	ldi	r25, 0x09	; 9
    2572:	21 50       	subi	r18, 0x01	; 1
    2574:	80 40       	sbci	r24, 0x00	; 0
    2576:	90 40       	sbci	r25, 0x00	; 0
    2578:	e1 f7       	brne	.-8      	; 0x2572 <_Z14gripper_screenv+0x3e>
    257a:	00 c0       	rjmp	.+0      	; 0x257c <_Z14gripper_screenv+0x48>
    257c:	00 00       	nop
    257e:	1f c0       	rjmp	.+62     	; 0x25be <_Z14gripper_screenv+0x8a>
		_delay_ms(200);
		break;
		
		case BUTTON_2:transmitdata('q');
    2580:	81 e7       	ldi	r24, 0x71	; 113
    2582:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2586:	2f ef       	ldi	r18, 0xFF	; 255
    2588:	83 ec       	ldi	r24, 0xC3	; 195
    258a:	99 e0       	ldi	r25, 0x09	; 9
    258c:	21 50       	subi	r18, 0x01	; 1
    258e:	80 40       	sbci	r24, 0x00	; 0
    2590:	90 40       	sbci	r25, 0x00	; 0
    2592:	e1 f7       	brne	.-8      	; 0x258c <_Z14gripper_screenv+0x58>
    2594:	00 c0       	rjmp	.+0      	; 0x2596 <_Z14gripper_screenv+0x62>
    2596:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	80 93 b7 07 	sts	0x07B7, r24
		break;
    259e:	0f c0       	rjmp	.+30     	; 0x25be <_Z14gripper_screenv+0x8a>
		
		case BUTTON_8:transmitdata('r');
    25a0:	82 e7       	ldi	r24, 0x72	; 114
    25a2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    25a6:	2f ef       	ldi	r18, 0xFF	; 255
    25a8:	83 ec       	ldi	r24, 0xC3	; 195
    25aa:	99 e0       	ldi	r25, 0x09	; 9
    25ac:	21 50       	subi	r18, 0x01	; 1
    25ae:	80 40       	sbci	r24, 0x00	; 0
    25b0:	90 40       	sbci	r25, 0x00	; 0
    25b2:	e1 f7       	brne	.-8      	; 0x25ac <_Z14gripper_screenv+0x78>
    25b4:	00 c0       	rjmp	.+0      	; 0x25b6 <_Z14gripper_screenv+0x82>
    25b6:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	if(displayflag)
    25be:	80 91 b7 07 	lds	r24, 0x07B7
    25c2:	88 23       	and	r24, r24
    25c4:	61 f1       	breq	.+88     	; 0x261e <_Z14gripper_screenv+0xea>
	{
		lcd_clear();
    25c6:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#GRIP ANGLE#  BACK-A");
    25ca:	87 ee       	ldi	r24, 0xE7	; 231
    25cc:	95 e0       	ldi	r25, 0x05	; 5
    25ce:	9f 93       	push	r25
    25d0:	8f 93       	push	r24
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	8f 93       	push	r24
    25d6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"2.Increase angle=%s",buffer1);
    25da:	8e ec       	ldi	r24, 0xCE	; 206
    25dc:	97 e0       	ldi	r25, 0x07	; 7
    25de:	9f 93       	push	r25
    25e0:	8f 93       	push	r24
    25e2:	8c ef       	ldi	r24, 0xFC	; 252
    25e4:	95 e0       	ldi	r25, 0x05	; 5
    25e6:	9f 93       	push	r25
    25e8:	8f 93       	push	r24
    25ea:	82 e0       	ldi	r24, 0x02	; 2
    25ec:	8f 93       	push	r24
    25ee:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"8.Decrease angle=%s",buffer2);
    25f2:	84 ec       	ldi	r24, 0xC4	; 196
    25f4:	97 e0       	ldi	r25, 0x07	; 7
    25f6:	9f 93       	push	r25
    25f8:	8f 93       	push	r24
    25fa:	80 e1       	ldi	r24, 0x10	; 16
    25fc:	96 e0       	ldi	r25, 0x06	; 6
    25fe:	9f 93       	push	r25
    2600:	8f 93       	push	r24
    2602:	83 e0       	ldi	r24, 0x03	; 3
    2604:	8f 93       	push	r24
    2606:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    260a:	10 92 b7 07 	sts	0x07B7, r1
    260e:	8d b7       	in	r24, 0x3d	; 61
    2610:	9e b7       	in	r25, 0x3e	; 62
    2612:	0d 96       	adiw	r24, 0x0d	; 13
    2614:	0f b6       	in	r0, 0x3f	; 63
    2616:	f8 94       	cli
    2618:	9e bf       	out	0x3e, r25	; 62
    261a:	0f be       	out	0x3f, r0	; 63
    261c:	8d bf       	out	0x3d, r24	; 61
    261e:	08 95       	ret

00002620 <_Z26hybrid_top_sequence_screenv>:
}

void hybrid_top_sequence_screen()
{
	
	switch(get_key())
    2620:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    2624:	8c 30       	cpi	r24, 0x0C	; 12
    2626:	91 05       	cpc	r25, r1
    2628:	09 f4       	brne	.+2      	; 0x262c <_Z26hybrid_top_sequence_screenv+0xc>
    262a:	57 c0       	rjmp	.+174    	; 0x26da <_Z26hybrid_top_sequence_screenv+0xba>
    262c:	8d 30       	cpi	r24, 0x0D	; 13
    262e:	91 05       	cpc	r25, r1
    2630:	21 f0       	breq	.+8      	; 0x263a <_Z26hybrid_top_sequence_screenv+0x1a>
    2632:	0b 97       	sbiw	r24, 0x0b	; 11
    2634:	09 f0       	breq	.+2      	; 0x2638 <_Z26hybrid_top_sequence_screenv+0x18>
    2636:	b7 c0       	rjmp	.+366    	; 0x27a6 <_Z26hybrid_top_sequence_screenv+0x186>
    2638:	26 c0       	rjmp	.+76     	; 0x2686 <_Z26hybrid_top_sequence_screenv+0x66>
	{
		case BUTTON_A:
		              if(present_state!=ACT_A)
    263a:	80 91 fa 07 	lds	r24, 0x07FA
    263e:	90 91 fb 07 	lds	r25, 0x07FB
    2642:	84 30       	cpi	r24, 0x04	; 4
    2644:	91 05       	cpc	r25, r1
    2646:	31 f0       	breq	.+12     	; 0x2654 <_Z26hybrid_top_sequence_screenv+0x34>
					  {
						  present_state--;
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	90 93 fb 07 	sts	0x07FB, r25
    264e:	80 93 fa 07 	sts	0x07FA, r24
    2652:	0f c0       	rjmp	.+30     	; 0x2672 <_Z26hybrid_top_sequence_screenv+0x52>
					  }
					  else
					  present_menu=list_states[--list_index]; 
    2654:	80 91 e7 07 	lds	r24, 0x07E7
    2658:	90 91 e8 07 	lds	r25, 0x07E8
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	90 93 e8 07 	sts	0x07E8, r25
    2662:	80 93 e7 07 	sts	0x07E7, r24
    2666:	fc 01       	movw	r30, r24
    2668:	e7 51       	subi	r30, 0x17	; 23
    266a:	f8 4f       	sbci	r31, 0xF8	; 248
    266c:	80 81       	ld	r24, Z
    266e:	80 93 fc 07 	sts	0x07FC, r24
    2672:	2f ef       	ldi	r18, 0xFF	; 255
    2674:	85 ea       	ldi	r24, 0xA5	; 165
    2676:	9e e0       	ldi	r25, 0x0E	; 14
    2678:	21 50       	subi	r18, 0x01	; 1
    267a:	80 40       	sbci	r24, 0x00	; 0
    267c:	90 40       	sbci	r25, 0x00	; 0
    267e:	e1 f7       	brne	.-8      	; 0x2678 <_Z26hybrid_top_sequence_screenv+0x58>
    2680:	00 c0       	rjmp	.+0      	; 0x2682 <_Z26hybrid_top_sequence_screenv+0x62>
    2682:	00 00       	nop
    2684:	90 c0       	rjmp	.+288    	; 0x27a6 <_Z26hybrid_top_sequence_screenv+0x186>
		             _delay_ms(300);
		              break;
		
		case BUTTON_HASH:present_state++;
    2686:	80 91 fa 07 	lds	r24, 0x07FA
    268a:	90 91 fb 07 	lds	r25, 0x07FB
    268e:	01 96       	adiw	r24, 0x01	; 1
		                 if(present_state>ACT_M)
    2690:	81 31       	cpi	r24, 0x11	; 17
    2692:	91 05       	cpc	r25, r1
    2694:	38 f0       	brcs	.+14     	; 0x26a4 <_Z26hybrid_top_sequence_screenv+0x84>
						 present_state=ACT_M;
    2696:	80 e1       	ldi	r24, 0x10	; 16
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	90 93 fb 07 	sts	0x07FB, r25
    269e:	80 93 fa 07 	sts	0x07FA, r24
    26a2:	0e c0       	rjmp	.+28     	; 0x26c0 <_Z26hybrid_top_sequence_screenv+0xa0>
						 else if(present_state<ACT_A)
    26a4:	84 30       	cpi	r24, 0x04	; 4
    26a6:	91 05       	cpc	r25, r1
    26a8:	28 f0       	brcs	.+10     	; 0x26b4 <_Z26hybrid_top_sequence_screenv+0x94>
					  else
					  present_menu=list_states[--list_index]; 
		             _delay_ms(300);
		              break;
		
		case BUTTON_HASH:present_state++;
    26aa:	90 93 fb 07 	sts	0x07FB, r25
    26ae:	80 93 fa 07 	sts	0x07FA, r24
    26b2:	06 c0       	rjmp	.+12     	; 0x26c0 <_Z26hybrid_top_sequence_screenv+0xa0>
		                 if(present_state>ACT_M)
						 present_state=ACT_M;
						 else if(present_state<ACT_A)
						 present_state=ACT_A;
    26b4:	84 e0       	ldi	r24, 0x04	; 4
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	90 93 fb 07 	sts	0x07FB, r25
    26bc:	80 93 fa 07 	sts	0x07FA, r24
    26c0:	2f ef       	ldi	r18, 0xFF	; 255
    26c2:	85 ea       	ldi	r24, 0xA5	; 165
    26c4:	9e e0       	ldi	r25, 0x0E	; 14
    26c6:	21 50       	subi	r18, 0x01	; 1
    26c8:	80 40       	sbci	r24, 0x00	; 0
    26ca:	90 40       	sbci	r25, 0x00	; 0
    26cc:	e1 f7       	brne	.-8      	; 0x26c6 <_Z26hybrid_top_sequence_screenv+0xa6>
    26ce:	00 c0       	rjmp	.+0      	; 0x26d0 <_Z26hybrid_top_sequence_screenv+0xb0>
    26d0:	00 00       	nop
						_delay_ms(300);
						displayflag=1;
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	80 93 b7 07 	sts	0x07B7, r24
						break;
    26d8:	66 c0       	rjmp	.+204    	; 0x27a6 <_Z26hybrid_top_sequence_screenv+0x186>
		
		case BUTTON_AST:
		                if(present_state==ACT_A)
    26da:	80 91 fa 07 	lds	r24, 0x07FA
    26de:	90 91 fb 07 	lds	r25, 0x07FB
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	91 05       	cpc	r25, r1
    26e6:	21 f4       	brne	.+8      	; 0x26f0 <_Z26hybrid_top_sequence_screenv+0xd0>
		                {
						transmitdata('a');	
    26e8:	81 e6       	ldi	r24, 0x61	; 97
    26ea:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    26ee:	52 c0       	rjmp	.+164    	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_B)
    26f0:	85 30       	cpi	r24, 0x05	; 5
    26f2:	91 05       	cpc	r25, r1
    26f4:	21 f4       	brne	.+8      	; 0x26fe <_Z26hybrid_top_sequence_screenv+0xde>
						{
						transmitdata('B');	
    26f6:	82 e4       	ldi	r24, 0x42	; 66
    26f8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    26fc:	4b c0       	rjmp	.+150    	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_C)
    26fe:	86 30       	cpi	r24, 0x06	; 6
    2700:	91 05       	cpc	r25, r1
    2702:	21 f4       	brne	.+8      	; 0x270c <_Z26hybrid_top_sequence_screenv+0xec>
						{
						transmitdata('C');	
    2704:	83 e4       	ldi	r24, 0x43	; 67
    2706:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    270a:	44 c0       	rjmp	.+136    	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_D)
    270c:	87 30       	cpi	r24, 0x07	; 7
    270e:	91 05       	cpc	r25, r1
    2710:	21 f4       	brne	.+8      	; 0x271a <_Z26hybrid_top_sequence_screenv+0xfa>
						{
							transmitdata('D');
    2712:	84 e4       	ldi	r24, 0x44	; 68
    2714:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2718:	3d c0       	rjmp	.+122    	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_E)
    271a:	88 30       	cpi	r24, 0x08	; 8
    271c:	91 05       	cpc	r25, r1
    271e:	21 f4       	brne	.+8      	; 0x2728 <_Z26hybrid_top_sequence_screenv+0x108>
						{
						transmitdata('E');	
    2720:	85 e4       	ldi	r24, 0x45	; 69
    2722:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2726:	36 c0       	rjmp	.+108    	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
					    else if(present_state==ACT_F)
    2728:	89 30       	cpi	r24, 0x09	; 9
    272a:	91 05       	cpc	r25, r1
    272c:	21 f4       	brne	.+8      	; 0x2736 <_Z26hybrid_top_sequence_screenv+0x116>
						{
						transmitdata('F');	
    272e:	86 e4       	ldi	r24, 0x46	; 70
    2730:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2734:	2f c0       	rjmp	.+94     	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_G)
    2736:	8a 30       	cpi	r24, 0x0A	; 10
    2738:	91 05       	cpc	r25, r1
    273a:	21 f4       	brne	.+8      	; 0x2744 <_Z26hybrid_top_sequence_screenv+0x124>
					    {
							transmitdata('G');
    273c:	87 e4       	ldi	r24, 0x47	; 71
    273e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2742:	28 c0       	rjmp	.+80     	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_H)
    2744:	8b 30       	cpi	r24, 0x0B	; 11
    2746:	91 05       	cpc	r25, r1
    2748:	21 f4       	brne	.+8      	; 0x2752 <_Z26hybrid_top_sequence_screenv+0x132>
						{
						transmitdata('H');
    274a:	88 e4       	ldi	r24, 0x48	; 72
    274c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2750:	21 c0       	rjmp	.+66     	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
				
						}
						else if(present_state==ACT_I)
    2752:	8c 30       	cpi	r24, 0x0C	; 12
    2754:	91 05       	cpc	r25, r1
    2756:	21 f4       	brne	.+8      	; 0x2760 <_Z26hybrid_top_sequence_screenv+0x140>
						{
						transmitdata('I');	
    2758:	89 e4       	ldi	r24, 0x49	; 73
    275a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    275e:	1a c0       	rjmp	.+52     	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_J)
    2760:	8d 30       	cpi	r24, 0x0D	; 13
    2762:	91 05       	cpc	r25, r1
    2764:	21 f4       	brne	.+8      	; 0x276e <_Z26hybrid_top_sequence_screenv+0x14e>
						{
						transmitdata('J');
    2766:	8a e4       	ldi	r24, 0x4A	; 74
    2768:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    276c:	13 c0       	rjmp	.+38     	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						
						else if(present_state==ACT_K)
    276e:	8e 30       	cpi	r24, 0x0E	; 14
    2770:	91 05       	cpc	r25, r1
    2772:	21 f4       	brne	.+8      	; 0x277c <_Z26hybrid_top_sequence_screenv+0x15c>
						{
						transmitdata('K');
    2774:	8b e4       	ldi	r24, 0x4B	; 75
    2776:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    277a:	0c c0       	rjmp	.+24     	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_L)
    277c:	8f 30       	cpi	r24, 0x0F	; 15
    277e:	91 05       	cpc	r25, r1
    2780:	21 f4       	brne	.+8      	; 0x278a <_Z26hybrid_top_sequence_screenv+0x16a>
						{
						transmitdata('L');	
    2782:	8c e4       	ldi	r24, 0x4C	; 76
    2784:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2788:	05 c0       	rjmp	.+10     	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						}
						else if(present_state==ACT_M)
    278a:	40 97       	sbiw	r24, 0x10	; 16
    278c:	19 f4       	brne	.+6      	; 0x2794 <_Z26hybrid_top_sequence_screenv+0x174>
						{
						transmitdata('M');
    278e:	8d e4       	ldi	r24, 0x4D	; 77
    2790:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2794:	2f ef       	ldi	r18, 0xFF	; 255
    2796:	83 ec       	ldi	r24, 0xC3	; 195
    2798:	99 e0       	ldi	r25, 0x09	; 9
    279a:	21 50       	subi	r18, 0x01	; 1
    279c:	80 40       	sbci	r24, 0x00	; 0
    279e:	90 40       	sbci	r25, 0x00	; 0
    27a0:	e1 f7       	brne	.-8      	; 0x279a <_Z26hybrid_top_sequence_screenv+0x17a>
    27a2:	00 c0       	rjmp	.+0      	; 0x27a4 <_Z26hybrid_top_sequence_screenv+0x184>
    27a4:	00 00       	nop
						}
		                _delay_ms(200);
		                break;
	}
	switch(present_state)
    27a6:	80 91 fa 07 	lds	r24, 0x07FA
    27aa:	90 91 fb 07 	lds	r25, 0x07FB
    27ae:	8a 30       	cpi	r24, 0x0A	; 10
    27b0:	91 05       	cpc	r25, r1
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <_Z26hybrid_top_sequence_screenv+0x196>
    27b4:	66 c0       	rjmp	.+204    	; 0x2882 <_Z26hybrid_top_sequence_screenv+0x262>
    27b6:	90 f4       	brcc	.+36     	; 0x27dc <_Z26hybrid_top_sequence_screenv+0x1bc>
    27b8:	86 30       	cpi	r24, 0x06	; 6
    27ba:	91 05       	cpc	r25, r1
    27bc:	d1 f1       	breq	.+116    	; 0x2832 <_Z26hybrid_top_sequence_screenv+0x212>
    27be:	38 f4       	brcc	.+14     	; 0x27ce <_Z26hybrid_top_sequence_screenv+0x1ae>
    27c0:	84 30       	cpi	r24, 0x04	; 4
    27c2:	91 05       	cpc	r25, r1
    27c4:	11 f1       	breq	.+68     	; 0x280a <_Z26hybrid_top_sequence_screenv+0x1ea>
    27c6:	05 97       	sbiw	r24, 0x05	; 5
    27c8:	09 f0       	breq	.+2      	; 0x27cc <_Z26hybrid_top_sequence_screenv+0x1ac>
    27ca:	a0 c0       	rjmp	.+320    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
    27cc:	28 c0       	rjmp	.+80     	; 0x281e <_Z26hybrid_top_sequence_screenv+0x1fe>
    27ce:	88 30       	cpi	r24, 0x08	; 8
    27d0:	91 05       	cpc	r25, r1
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <_Z26hybrid_top_sequence_screenv+0x1b6>
    27d4:	42 c0       	rjmp	.+132    	; 0x285a <_Z26hybrid_top_sequence_screenv+0x23a>
    27d6:	08 f0       	brcs	.+2      	; 0x27da <_Z26hybrid_top_sequence_screenv+0x1ba>
    27d8:	4a c0       	rjmp	.+148    	; 0x286e <_Z26hybrid_top_sequence_screenv+0x24e>
    27da:	35 c0       	rjmp	.+106    	; 0x2846 <_Z26hybrid_top_sequence_screenv+0x226>
    27dc:	8d 30       	cpi	r24, 0x0D	; 13
    27de:	91 05       	cpc	r25, r1
    27e0:	09 f4       	brne	.+2      	; 0x27e4 <_Z26hybrid_top_sequence_screenv+0x1c4>
    27e2:	6d c0       	rjmp	.+218    	; 0x28be <_Z26hybrid_top_sequence_screenv+0x29e>
    27e4:	40 f4       	brcc	.+16     	; 0x27f6 <_Z26hybrid_top_sequence_screenv+0x1d6>
    27e6:	8b 30       	cpi	r24, 0x0B	; 11
    27e8:	91 05       	cpc	r25, r1
    27ea:	09 f4       	brne	.+2      	; 0x27ee <_Z26hybrid_top_sequence_screenv+0x1ce>
    27ec:	54 c0       	rjmp	.+168    	; 0x2896 <_Z26hybrid_top_sequence_screenv+0x276>
    27ee:	0c 97       	sbiw	r24, 0x0c	; 12
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <_Z26hybrid_top_sequence_screenv+0x1d4>
    27f2:	8c c0       	rjmp	.+280    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
    27f4:	5a c0       	rjmp	.+180    	; 0x28aa <_Z26hybrid_top_sequence_screenv+0x28a>
    27f6:	8f 30       	cpi	r24, 0x0F	; 15
    27f8:	91 05       	cpc	r25, r1
    27fa:	09 f4       	brne	.+2      	; 0x27fe <_Z26hybrid_top_sequence_screenv+0x1de>
    27fc:	74 c0       	rjmp	.+232    	; 0x28e6 <_Z26hybrid_top_sequence_screenv+0x2c6>
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <_Z26hybrid_top_sequence_screenv+0x1e2>
    2800:	68 c0       	rjmp	.+208    	; 0x28d2 <_Z26hybrid_top_sequence_screenv+0x2b2>
    2802:	40 97       	sbiw	r24, 0x10	; 16
    2804:	09 f0       	breq	.+2      	; 0x2808 <_Z26hybrid_top_sequence_screenv+0x1e8>
    2806:	82 c0       	rjmp	.+260    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
    2808:	78 c0       	rjmp	.+240    	; 0x28fa <_Z26hybrid_top_sequence_screenv+0x2da>
	{
		case ACT_A:strcpy(buffer1,"TASK A");
    280a:	87 e0       	ldi	r24, 0x07	; 7
    280c:	e4 e2       	ldi	r30, 0x24	; 36
    280e:	f6 e0       	ldi	r31, 0x06	; 6
    2810:	ae ec       	ldi	r26, 0xCE	; 206
    2812:	b7 e0       	ldi	r27, 0x07	; 7
    2814:	01 90       	ld	r0, Z+
    2816:	0d 92       	st	X+, r0
    2818:	8a 95       	dec	r24
    281a:	e1 f7       	brne	.-8      	; 0x2814 <_Z26hybrid_top_sequence_screenv+0x1f4>
		           break;
    281c:	77 c0       	rjmp	.+238    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
	    case ACT_B:strcpy(buffer1,"TASK B");
    281e:	87 e0       	ldi	r24, 0x07	; 7
    2820:	eb e2       	ldi	r30, 0x2B	; 43
    2822:	f6 e0       	ldi	r31, 0x06	; 6
    2824:	ae ec       	ldi	r26, 0xCE	; 206
    2826:	b7 e0       	ldi	r27, 0x07	; 7
    2828:	01 90       	ld	r0, Z+
    282a:	0d 92       	st	X+, r0
    282c:	8a 95       	dec	r24
    282e:	e1 f7       	brne	.-8      	; 0x2828 <_Z26hybrid_top_sequence_screenv+0x208>
	    break;
    2830:	6d c0       	rjmp	.+218    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_C:strcpy(buffer1,"TASK C");
    2832:	87 e0       	ldi	r24, 0x07	; 7
    2834:	e2 e3       	ldi	r30, 0x32	; 50
    2836:	f6 e0       	ldi	r31, 0x06	; 6
    2838:	ae ec       	ldi	r26, 0xCE	; 206
    283a:	b7 e0       	ldi	r27, 0x07	; 7
    283c:	01 90       	ld	r0, Z+
    283e:	0d 92       	st	X+, r0
    2840:	8a 95       	dec	r24
    2842:	e1 f7       	brne	.-8      	; 0x283c <_Z26hybrid_top_sequence_screenv+0x21c>
		break;
    2844:	63 c0       	rjmp	.+198    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_D:strcpy(buffer1,"TASK D");
    2846:	87 e0       	ldi	r24, 0x07	; 7
    2848:	e9 e3       	ldi	r30, 0x39	; 57
    284a:	f6 e0       	ldi	r31, 0x06	; 6
    284c:	ae ec       	ldi	r26, 0xCE	; 206
    284e:	b7 e0       	ldi	r27, 0x07	; 7
    2850:	01 90       	ld	r0, Z+
    2852:	0d 92       	st	X+, r0
    2854:	8a 95       	dec	r24
    2856:	e1 f7       	brne	.-8      	; 0x2850 <_Z26hybrid_top_sequence_screenv+0x230>
		break;
    2858:	59 c0       	rjmp	.+178    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_E:strcpy(buffer1,"TASK E");
    285a:	87 e0       	ldi	r24, 0x07	; 7
    285c:	e0 e4       	ldi	r30, 0x40	; 64
    285e:	f6 e0       	ldi	r31, 0x06	; 6
    2860:	ae ec       	ldi	r26, 0xCE	; 206
    2862:	b7 e0       	ldi	r27, 0x07	; 7
    2864:	01 90       	ld	r0, Z+
    2866:	0d 92       	st	X+, r0
    2868:	8a 95       	dec	r24
    286a:	e1 f7       	brne	.-8      	; 0x2864 <_Z26hybrid_top_sequence_screenv+0x244>
		break;
    286c:	4f c0       	rjmp	.+158    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_F:strcpy(buffer1,"TASK F");
    286e:	87 e0       	ldi	r24, 0x07	; 7
    2870:	e7 e4       	ldi	r30, 0x47	; 71
    2872:	f6 e0       	ldi	r31, 0x06	; 6
    2874:	ae ec       	ldi	r26, 0xCE	; 206
    2876:	b7 e0       	ldi	r27, 0x07	; 7
    2878:	01 90       	ld	r0, Z+
    287a:	0d 92       	st	X+, r0
    287c:	8a 95       	dec	r24
    287e:	e1 f7       	brne	.-8      	; 0x2878 <_Z26hybrid_top_sequence_screenv+0x258>
		break;
    2880:	45 c0       	rjmp	.+138    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_G:strcpy(buffer1,"TASK G");
    2882:	87 e0       	ldi	r24, 0x07	; 7
    2884:	ee e4       	ldi	r30, 0x4E	; 78
    2886:	f6 e0       	ldi	r31, 0x06	; 6
    2888:	ae ec       	ldi	r26, 0xCE	; 206
    288a:	b7 e0       	ldi	r27, 0x07	; 7
    288c:	01 90       	ld	r0, Z+
    288e:	0d 92       	st	X+, r0
    2890:	8a 95       	dec	r24
    2892:	e1 f7       	brne	.-8      	; 0x288c <_Z26hybrid_top_sequence_screenv+0x26c>
		break;
    2894:	3b c0       	rjmp	.+118    	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_H:strcpy(buffer1,"TASK H");
    2896:	87 e0       	ldi	r24, 0x07	; 7
    2898:	e5 e5       	ldi	r30, 0x55	; 85
    289a:	f6 e0       	ldi	r31, 0x06	; 6
    289c:	ae ec       	ldi	r26, 0xCE	; 206
    289e:	b7 e0       	ldi	r27, 0x07	; 7
    28a0:	01 90       	ld	r0, Z+
    28a2:	0d 92       	st	X+, r0
    28a4:	8a 95       	dec	r24
    28a6:	e1 f7       	brne	.-8      	; 0x28a0 <_Z26hybrid_top_sequence_screenv+0x280>
		break;
    28a8:	31 c0       	rjmp	.+98     	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_I:strcpy(buffer1,"TASK I");
    28aa:	87 e0       	ldi	r24, 0x07	; 7
    28ac:	ec e5       	ldi	r30, 0x5C	; 92
    28ae:	f6 e0       	ldi	r31, 0x06	; 6
    28b0:	ae ec       	ldi	r26, 0xCE	; 206
    28b2:	b7 e0       	ldi	r27, 0x07	; 7
    28b4:	01 90       	ld	r0, Z+
    28b6:	0d 92       	st	X+, r0
    28b8:	8a 95       	dec	r24
    28ba:	e1 f7       	brne	.-8      	; 0x28b4 <_Z26hybrid_top_sequence_screenv+0x294>
		break;
    28bc:	27 c0       	rjmp	.+78     	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_J:strcpy(buffer1,"TASK J");
    28be:	87 e0       	ldi	r24, 0x07	; 7
    28c0:	e3 e6       	ldi	r30, 0x63	; 99
    28c2:	f6 e0       	ldi	r31, 0x06	; 6
    28c4:	ae ec       	ldi	r26, 0xCE	; 206
    28c6:	b7 e0       	ldi	r27, 0x07	; 7
    28c8:	01 90       	ld	r0, Z+
    28ca:	0d 92       	st	X+, r0
    28cc:	8a 95       	dec	r24
    28ce:	e1 f7       	brne	.-8      	; 0x28c8 <_Z26hybrid_top_sequence_screenv+0x2a8>
		break;
    28d0:	1d c0       	rjmp	.+58     	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_K:strcpy(buffer1,"TASK K");
    28d2:	87 e0       	ldi	r24, 0x07	; 7
    28d4:	ea e6       	ldi	r30, 0x6A	; 106
    28d6:	f6 e0       	ldi	r31, 0x06	; 6
    28d8:	ae ec       	ldi	r26, 0xCE	; 206
    28da:	b7 e0       	ldi	r27, 0x07	; 7
    28dc:	01 90       	ld	r0, Z+
    28de:	0d 92       	st	X+, r0
    28e0:	8a 95       	dec	r24
    28e2:	e1 f7       	brne	.-8      	; 0x28dc <_Z26hybrid_top_sequence_screenv+0x2bc>
		break;
    28e4:	13 c0       	rjmp	.+38     	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_L:strcpy(buffer1,"TASK L");
    28e6:	87 e0       	ldi	r24, 0x07	; 7
    28e8:	e1 e7       	ldi	r30, 0x71	; 113
    28ea:	f6 e0       	ldi	r31, 0x06	; 6
    28ec:	ae ec       	ldi	r26, 0xCE	; 206
    28ee:	b7 e0       	ldi	r27, 0x07	; 7
    28f0:	01 90       	ld	r0, Z+
    28f2:	0d 92       	st	X+, r0
    28f4:	8a 95       	dec	r24
    28f6:	e1 f7       	brne	.-8      	; 0x28f0 <_Z26hybrid_top_sequence_screenv+0x2d0>
		break;
    28f8:	09 c0       	rjmp	.+18     	; 0x290c <_Z26hybrid_top_sequence_screenv+0x2ec>
		case ACT_M:strcpy(buffer1,"TASK M");
    28fa:	87 e0       	ldi	r24, 0x07	; 7
    28fc:	e8 e7       	ldi	r30, 0x78	; 120
    28fe:	f6 e0       	ldi	r31, 0x06	; 6
    2900:	ae ec       	ldi	r26, 0xCE	; 206
    2902:	b7 e0       	ldi	r27, 0x07	; 7
    2904:	01 90       	ld	r0, Z+
    2906:	0d 92       	st	X+, r0
    2908:	8a 95       	dec	r24
    290a:	e1 f7       	brne	.-8      	; 0x2904 <_Z26hybrid_top_sequence_screenv+0x2e4>
		break;
	}
	if(displayflag)
    290c:	80 91 b7 07 	lds	r24, 0x07B7
    2910:	88 23       	and	r24, r24
    2912:	41 f1       	breq	.+80     	; 0x2964 <_Z26hybrid_top_sequence_screenv+0x344>
	{
		lcd_clear();
    2914:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#TOP SEQUEN#  BACK-A");
    2918:	8f e7       	ldi	r24, 0x7F	; 127
    291a:	96 e0       	ldi	r25, 0x06	; 6
    291c:	9f 93       	push	r25
    291e:	8f 93       	push	r24
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	8f 93       	push	r24
    2924:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2," -%s- ",buffer1);
    2928:	8e ec       	ldi	r24, 0xCE	; 206
    292a:	97 e0       	ldi	r25, 0x07	; 7
    292c:	9f 93       	push	r25
    292e:	8f 93       	push	r24
    2930:	84 e9       	ldi	r24, 0x94	; 148
    2932:	96 e0       	ldi	r25, 0x06	; 6
    2934:	9f 93       	push	r25
    2936:	8f 93       	push	r24
    2938:	82 e0       	ldi	r24, 0x02	; 2
    293a:	8f 93       	push	r24
    293c:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"Start-*     Next-#");
    2940:	8b e9       	ldi	r24, 0x9B	; 155
    2942:	96 e0       	ldi	r25, 0x06	; 6
    2944:	9f 93       	push	r25
    2946:	8f 93       	push	r24
    2948:	84 e0       	ldi	r24, 0x04	; 4
    294a:	8f 93       	push	r24
    294c:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    2950:	10 92 b7 07 	sts	0x07B7, r1
    2954:	8d b7       	in	r24, 0x3d	; 61
    2956:	9e b7       	in	r25, 0x3e	; 62
    2958:	0b 96       	adiw	r24, 0x0b	; 11
    295a:	0f b6       	in	r0, 0x3f	; 63
    295c:	f8 94       	cli
    295e:	9e bf       	out	0x3e, r25	; 62
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	8d bf       	out	0x3d, r24	; 61
    2964:	08 95       	ret

00002966 <_Z17hybrid_top_screenv>:
	}
}
void hybrid_top_screen()
{
	if(displayflag)
    2966:	80 91 b7 07 	lds	r24, 0x07B7
    296a:	88 23       	and	r24, r24
    296c:	09 f4       	brne	.+2      	; 0x2970 <_Z17hybrid_top_screenv+0xa>
    296e:	82 c0       	rjmp	.+260    	; 0x2a74 <_Z17hybrid_top_screenv+0x10e>
	{
		lcd_clear();
    2970:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		
		if(present_state==BASE_DISP_LIST1)
    2974:	80 91 fa 07 	lds	r24, 0x07FA
    2978:	90 91 fb 07 	lds	r25, 0x07FB
    297c:	81 30       	cpi	r24, 0x01	; 1
    297e:	91 05       	cpc	r25, r1
    2980:	49 f5       	brne	.+82     	; 0x29d4 <_Z17hybrid_top_screenv+0x6e>
		{
			Printf(1,"#Hybrid Top# Back-A");
    2982:	8e ea       	ldi	r24, 0xAE	; 174
    2984:	96 e0       	ldi	r25, 0x06	; 6
    2986:	9f 93       	push	r25
    2988:	8f 93       	push	r24
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	8f 93       	push	r24
    298e:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(2,"1.Top Sequence");
    2992:	82 ec       	ldi	r24, 0xC2	; 194
    2994:	96 e0       	ldi	r25, 0x06	; 6
    2996:	9f 93       	push	r25
    2998:	8f 93       	push	r24
    299a:	82 e0       	ldi	r24, 0x02	; 2
    299c:	8f 93       	push	r24
    299e:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"2.Lidar data");
    29a2:	81 ed       	ldi	r24, 0xD1	; 209
    29a4:	96 e0       	ldi	r25, 0x06	; 6
    29a6:	9f 93       	push	r25
    29a8:	8f 93       	push	r24
    29aa:	83 e0       	ldi	r24, 0x03	; 3
    29ac:	8f 93       	push	r24
    29ae:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(4,"3.Duct Servo    Next-#");
    29b2:	8e ed       	ldi	r24, 0xDE	; 222
    29b4:	96 e0       	ldi	r25, 0x06	; 6
    29b6:	9f 93       	push	r25
    29b8:	8f 93       	push	r24
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	8f 93       	push	r24
    29be:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    29c2:	8d b7       	in	r24, 0x3d	; 61
    29c4:	9e b7       	in	r25, 0x3e	; 62
    29c6:	0c 96       	adiw	r24, 0x0c	; 12
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	9e bf       	out	0x3e, r25	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	8d bf       	out	0x3d, r24	; 61
    29d2:	4e c0       	rjmp	.+156    	; 0x2a70 <_Z17hybrid_top_screenv+0x10a>
		}
		else if(present_state==BASE_DISP_LIST2)
    29d4:	82 30       	cpi	r24, 0x02	; 2
    29d6:	91 05       	cpc	r25, r1
    29d8:	49 f5       	brne	.+82     	; 0x2a2c <_Z17hybrid_top_screenv+0xc6>
		{
			Printf(1,"4.Duct fan   BACK-A");
    29da:	85 ef       	ldi	r24, 0xF5	; 245
    29dc:	96 e0       	ldi	r25, 0x06	; 6
    29de:	9f 93       	push	r25
    29e0:	8f 93       	push	r24
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	8f 93       	push	r24
    29e6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(2,"5.Wiper PID");
    29ea:	89 e0       	ldi	r24, 0x09	; 9
    29ec:	97 e0       	ldi	r25, 0x07	; 7
    29ee:	9f 93       	push	r25
    29f0:	8f 93       	push	r24
    29f2:	82 e0       	ldi	r24, 0x02	; 2
    29f4:	8f 93       	push	r24
    29f6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"6.Pololu arm");
    29fa:	85 e1       	ldi	r24, 0x15	; 21
    29fc:	97 e0       	ldi	r25, 0x07	; 7
    29fe:	9f 93       	push	r25
    2a00:	8f 93       	push	r24
    2a02:	83 e0       	ldi	r24, 0x03	; 3
    2a04:	8f 93       	push	r24
    2a06:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(4,"7.Pololu wiper");
    2a0a:	82 e2       	ldi	r24, 0x22	; 34
    2a0c:	97 e0       	ldi	r25, 0x07	; 7
    2a0e:	9f 93       	push	r25
    2a10:	8f 93       	push	r24
    2a12:	84 e0       	ldi	r24, 0x04	; 4
    2a14:	8f 93       	push	r24
    2a16:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    2a1a:	8d b7       	in	r24, 0x3d	; 61
    2a1c:	9e b7       	in	r25, 0x3e	; 62
    2a1e:	0c 96       	adiw	r24, 0x0c	; 12
    2a20:	0f b6       	in	r0, 0x3f	; 63
    2a22:	f8 94       	cli
    2a24:	9e bf       	out	0x3e, r25	; 62
    2a26:	0f be       	out	0x3f, r0	; 63
    2a28:	8d bf       	out	0x3d, r24	; 61
    2a2a:	22 c0       	rjmp	.+68     	; 0x2a70 <_Z17hybrid_top_screenv+0x10a>
		}
		else if(present_state==BASE_DISP_LIST3)
    2a2c:	03 97       	sbiw	r24, 0x03	; 3
    2a2e:	01 f5       	brne	.+64     	; 0x2a70 <_Z17hybrid_top_screenv+0x10a>
		{
			Printf(1,"8.Pololu Grip BACK-A");
    2a30:	81 e3       	ldi	r24, 0x31	; 49
    2a32:	97 e0       	ldi	r25, 0x07	; 7
    2a34:	9f 93       	push	r25
    2a36:	8f 93       	push	r24
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	8f 93       	push	r24
    2a3c:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(2,"9.Servo Grip");
    2a40:	86 e4       	ldi	r24, 0x46	; 70
    2a42:	97 e0       	ldi	r25, 0x07	; 7
    2a44:	9f 93       	push	r25
    2a46:	8f 93       	push	r24
    2a48:	82 e0       	ldi	r24, 0x02	; 2
    2a4a:	8f 93       	push	r24
    2a4c:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
			Printf(3,"*.Top Motor Check");
    2a50:	83 e5       	ldi	r24, 0x53	; 83
    2a52:	97 e0       	ldi	r25, 0x07	; 7
    2a54:	9f 93       	push	r25
    2a56:	8f 93       	push	r24
    2a58:	83 e0       	ldi	r24, 0x03	; 3
    2a5a:	8f 93       	push	r24
    2a5c:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    2a60:	8d b7       	in	r24, 0x3d	; 61
    2a62:	9e b7       	in	r25, 0x3e	; 62
    2a64:	09 96       	adiw	r24, 0x09	; 9
    2a66:	0f b6       	in	r0, 0x3f	; 63
    2a68:	f8 94       	cli
    2a6a:	9e bf       	out	0x3e, r25	; 62
    2a6c:	0f be       	out	0x3f, r0	; 63
    2a6e:	8d bf       	out	0x3d, r24	; 61
		}
		displayflag=0;
    2a70:	10 92 b7 07 	sts	0x07B7, r1
	}
	
	switch(get_key())
    2a74:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    2a78:	87 30       	cpi	r24, 0x07	; 7
    2a7a:	91 05       	cpc	r25, r1
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <_Z17hybrid_top_screenv+0x11a>
    2a7e:	d9 c0       	rjmp	.+434    	; 0x2c32 <_Z17hybrid_top_screenv+0x2cc>
    2a80:	a0 f4       	brcc	.+40     	; 0x2aaa <_Z17hybrid_top_screenv+0x144>
    2a82:	84 30       	cpi	r24, 0x04	; 4
    2a84:	91 05       	cpc	r25, r1
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <_Z17hybrid_top_screenv+0x124>
    2a88:	72 c0       	rjmp	.+228    	; 0x2b6e <_Z17hybrid_top_screenv+0x208>
    2a8a:	38 f4       	brcc	.+14     	; 0x2a9a <_Z17hybrid_top_screenv+0x134>
    2a8c:	82 30       	cpi	r24, 0x02	; 2
    2a8e:	91 05       	cpc	r25, r1
    2a90:	19 f1       	breq	.+70     	; 0x2ad8 <_Z17hybrid_top_screenv+0x172>
    2a92:	03 97       	sbiw	r24, 0x03	; 3
    2a94:	09 f0       	breq	.+2      	; 0x2a98 <_Z17hybrid_top_screenv+0x132>
    2a96:	b8 c1       	rjmp	.+880    	; 0x2e08 <_Z17hybrid_top_screenv+0x4a2>
    2a98:	4c c0       	rjmp	.+152    	; 0x2b32 <_Z17hybrid_top_screenv+0x1cc>
    2a9a:	85 30       	cpi	r24, 0x05	; 5
    2a9c:	91 05       	cpc	r25, r1
    2a9e:	09 f4       	brne	.+2      	; 0x2aa2 <_Z17hybrid_top_screenv+0x13c>
    2aa0:	84 c0       	rjmp	.+264    	; 0x2baa <_Z17hybrid_top_screenv+0x244>
    2aa2:	06 97       	sbiw	r24, 0x06	; 6
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <_Z17hybrid_top_screenv+0x142>
    2aa6:	b0 c1       	rjmp	.+864    	; 0x2e08 <_Z17hybrid_top_screenv+0x4a2>
    2aa8:	a2 c0       	rjmp	.+324    	; 0x2bee <_Z17hybrid_top_screenv+0x288>
    2aaa:	8a 30       	cpi	r24, 0x0A	; 10
    2aac:	91 05       	cpc	r25, r1
    2aae:	09 f4       	brne	.+2      	; 0x2ab2 <_Z17hybrid_top_screenv+0x14c>
    2ab0:	26 c1       	rjmp	.+588    	; 0x2cfe <_Z17hybrid_top_screenv+0x398>
    2ab2:	40 f4       	brcc	.+16     	; 0x2ac4 <_Z17hybrid_top_screenv+0x15e>
    2ab4:	88 30       	cpi	r24, 0x08	; 8
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <_Z17hybrid_top_screenv+0x156>
    2aba:	dd c0       	rjmp	.+442    	; 0x2c76 <_Z17hybrid_top_screenv+0x310>
    2abc:	09 97       	sbiw	r24, 0x09	; 9
    2abe:	09 f0       	breq	.+2      	; 0x2ac2 <_Z17hybrid_top_screenv+0x15c>
    2ac0:	a3 c1       	rjmp	.+838    	; 0x2e08 <_Z17hybrid_top_screenv+0x4a2>
    2ac2:	fb c0       	rjmp	.+502    	; 0x2cba <_Z17hybrid_top_screenv+0x354>
    2ac4:	8c 30       	cpi	r24, 0x0C	; 12
    2ac6:	91 05       	cpc	r25, r1
    2ac8:	09 f4       	brne	.+2      	; 0x2acc <_Z17hybrid_top_screenv+0x166>
    2aca:	3b c1       	rjmp	.+630    	; 0x2d42 <_Z17hybrid_top_screenv+0x3dc>
    2acc:	08 f4       	brcc	.+2      	; 0x2ad0 <_Z17hybrid_top_screenv+0x16a>
    2ace:	59 c1       	rjmp	.+690    	; 0x2d82 <_Z17hybrid_top_screenv+0x41c>
    2ad0:	0d 97       	sbiw	r24, 0x0d	; 13
    2ad2:	09 f0       	breq	.+2      	; 0x2ad6 <_Z17hybrid_top_screenv+0x170>
    2ad4:	99 c1       	rjmp	.+818    	; 0x2e08 <_Z17hybrid_top_screenv+0x4a2>
    2ad6:	68 c1       	rjmp	.+720    	; 0x2da8 <_Z17hybrid_top_screenv+0x442>
	{
		case BUTTON_1:
		present_menu=HYBRID_TOP_SEQUENCE;
    2ad8:	8e e0       	ldi	r24, 0x0E	; 14
    2ada:	80 93 fc 07 	sts	0x07FC, r24
		present_state=ACT_A;
    2ade:	84 e0       	ldi	r24, 0x04	; 4
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	90 93 fb 07 	sts	0x07FB, r25
    2ae6:	80 93 fa 07 	sts	0x07FA, r24
		clearbuffer();
    2aea:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
		strcpy(buffer1,"TASK A");
    2aee:	87 e0       	ldi	r24, 0x07	; 7
    2af0:	e4 e2       	ldi	r30, 0x24	; 36
    2af2:	f6 e0       	ldi	r31, 0x06	; 6
    2af4:	ae ec       	ldi	r26, 0xCE	; 206
    2af6:	b7 e0       	ldi	r27, 0x07	; 7
    2af8:	01 90       	ld	r0, Z+
    2afa:	0d 92       	st	X+, r0
    2afc:	8a 95       	dec	r24
    2afe:	e1 f7       	brne	.-8      	; 0x2af8 <_Z17hybrid_top_screenv+0x192>
		list_states[++list_index]=present_menu;
    2b00:	80 91 e7 07 	lds	r24, 0x07E7
    2b04:	90 91 e8 07 	lds	r25, 0x07E8
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	90 93 e8 07 	sts	0x07E8, r25
    2b0e:	80 93 e7 07 	sts	0x07E7, r24
    2b12:	fc 01       	movw	r30, r24
    2b14:	e7 51       	subi	r30, 0x17	; 23
    2b16:	f8 4f       	sbci	r31, 0xF8	; 248
    2b18:	20 91 fc 07 	lds	r18, 0x07FC
    2b1c:	20 83       	st	Z, r18
    2b1e:	9f ef       	ldi	r25, 0xFF	; 255
    2b20:	23 ec       	ldi	r18, 0xC3	; 195
    2b22:	89 e0       	ldi	r24, 0x09	; 9
    2b24:	91 50       	subi	r25, 0x01	; 1
    2b26:	20 40       	sbci	r18, 0x00	; 0
    2b28:	80 40       	sbci	r24, 0x00	; 0
    2b2a:	e1 f7       	brne	.-8      	; 0x2b24 <_Z17hybrid_top_screenv+0x1be>
    2b2c:	00 c0       	rjmp	.+0      	; 0x2b2e <_Z17hybrid_top_screenv+0x1c8>
    2b2e:	00 00       	nop
    2b30:	08 95       	ret
		_delay_ms(200);
		break;
		case BUTTON_2:
		present_menu=LIDAR_DISP;
    2b32:	8f e0       	ldi	r24, 0x0F	; 15
    2b34:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    2b38:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
		list_states[++list_index]=present_menu;
    2b3c:	80 91 e7 07 	lds	r24, 0x07E7
    2b40:	90 91 e8 07 	lds	r25, 0x07E8
    2b44:	01 96       	adiw	r24, 0x01	; 1
    2b46:	90 93 e8 07 	sts	0x07E8, r25
    2b4a:	80 93 e7 07 	sts	0x07E7, r24
    2b4e:	fc 01       	movw	r30, r24
    2b50:	e7 51       	subi	r30, 0x17	; 23
    2b52:	f8 4f       	sbci	r31, 0xF8	; 248
    2b54:	20 91 fc 07 	lds	r18, 0x07FC
    2b58:	20 83       	st	Z, r18
    2b5a:	9f ef       	ldi	r25, 0xFF	; 255
    2b5c:	23 ec       	ldi	r18, 0xC3	; 195
    2b5e:	89 e0       	ldi	r24, 0x09	; 9
    2b60:	91 50       	subi	r25, 0x01	; 1
    2b62:	20 40       	sbci	r18, 0x00	; 0
    2b64:	80 40       	sbci	r24, 0x00	; 0
    2b66:	e1 f7       	brne	.-8      	; 0x2b60 <_Z17hybrid_top_screenv+0x1fa>
    2b68:	00 c0       	rjmp	.+0      	; 0x2b6a <_Z17hybrid_top_screenv+0x204>
    2b6a:	00 00       	nop
    2b6c:	08 95       	ret
		_delay_ms(200);
		break;
		case BUTTON_3:
		present_menu=DUCT_SERVO_DISP;
    2b6e:	82 e1       	ldi	r24, 0x12	; 18
    2b70:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    2b74:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
		list_states[++list_index]=present_menu;
    2b78:	80 91 e7 07 	lds	r24, 0x07E7
    2b7c:	90 91 e8 07 	lds	r25, 0x07E8
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	90 93 e8 07 	sts	0x07E8, r25
    2b86:	80 93 e7 07 	sts	0x07E7, r24
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	e7 51       	subi	r30, 0x17	; 23
    2b8e:	f8 4f       	sbci	r31, 0xF8	; 248
    2b90:	20 91 fc 07 	lds	r18, 0x07FC
    2b94:	20 83       	st	Z, r18
    2b96:	9f ef       	ldi	r25, 0xFF	; 255
    2b98:	23 ec       	ldi	r18, 0xC3	; 195
    2b9a:	89 e0       	ldi	r24, 0x09	; 9
    2b9c:	91 50       	subi	r25, 0x01	; 1
    2b9e:	20 40       	sbci	r18, 0x00	; 0
    2ba0:	80 40       	sbci	r24, 0x00	; 0
    2ba2:	e1 f7       	brne	.-8      	; 0x2b9c <_Z17hybrid_top_screenv+0x236>
    2ba4:	00 c0       	rjmp	.+0      	; 0x2ba6 <_Z17hybrid_top_screenv+0x240>
    2ba6:	00 00       	nop
    2ba8:	08 95       	ret
		_delay_ms(200);
		break;
		
		case BUTTON_4:
		               if(present_state==BASE_DISP_LIST2)
    2baa:	80 91 fa 07 	lds	r24, 0x07FA
    2bae:	90 91 fb 07 	lds	r25, 0x07FB
    2bb2:	02 97       	sbiw	r24, 0x02	; 2
    2bb4:	91 f4       	brne	.+36     	; 0x2bda <_Z17hybrid_top_screenv+0x274>
                 		{
							clearbuffer();
    2bb6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
							present_menu=DUCTFAN_DISP;
    2bba:	23 e1       	ldi	r18, 0x13	; 19
    2bbc:	20 93 fc 07 	sts	0x07FC, r18
							list_states[++list_index]=present_menu;
    2bc0:	80 91 e7 07 	lds	r24, 0x07E7
    2bc4:	90 91 e8 07 	lds	r25, 0x07E8
    2bc8:	01 96       	adiw	r24, 0x01	; 1
    2bca:	90 93 e8 07 	sts	0x07E8, r25
    2bce:	80 93 e7 07 	sts	0x07E7, r24
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e7 51       	subi	r30, 0x17	; 23
    2bd6:	f8 4f       	sbci	r31, 0xF8	; 248
    2bd8:	20 83       	st	Z, r18
    2bda:	9f ef       	ldi	r25, 0xFF	; 255
    2bdc:	23 ec       	ldi	r18, 0xC3	; 195
    2bde:	89 e0       	ldi	r24, 0x09	; 9
    2be0:	91 50       	subi	r25, 0x01	; 1
    2be2:	20 40       	sbci	r18, 0x00	; 0
    2be4:	80 40       	sbci	r24, 0x00	; 0
    2be6:	e1 f7       	brne	.-8      	; 0x2be0 <_Z17hybrid_top_screenv+0x27a>
    2be8:	00 c0       	rjmp	.+0      	; 0x2bea <_Z17hybrid_top_screenv+0x284>
    2bea:	00 00       	nop
    2bec:	08 95       	ret
						}
						_delay_ms(200);
						break;
		case BUTTON_5:
						if(present_state==BASE_DISP_LIST2)
    2bee:	80 91 fa 07 	lds	r24, 0x07FA
    2bf2:	90 91 fb 07 	lds	r25, 0x07FB
    2bf6:	02 97       	sbiw	r24, 0x02	; 2
    2bf8:	91 f4       	brne	.+36     	; 0x2c1e <_Z17hybrid_top_screenv+0x2b8>
						{
							clearbuffer();
    2bfa:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
							present_menu=WIPERMOTOR_PID_DISP;
    2bfe:	20 e1       	ldi	r18, 0x10	; 16
    2c00:	20 93 fc 07 	sts	0x07FC, r18
							list_states[++list_index]=present_menu;
    2c04:	80 91 e7 07 	lds	r24, 0x07E7
    2c08:	90 91 e8 07 	lds	r25, 0x07E8
    2c0c:	01 96       	adiw	r24, 0x01	; 1
    2c0e:	90 93 e8 07 	sts	0x07E8, r25
    2c12:	80 93 e7 07 	sts	0x07E7, r24
    2c16:	fc 01       	movw	r30, r24
    2c18:	e7 51       	subi	r30, 0x17	; 23
    2c1a:	f8 4f       	sbci	r31, 0xF8	; 248
    2c1c:	20 83       	st	Z, r18
    2c1e:	9f ef       	ldi	r25, 0xFF	; 255
    2c20:	23 ec       	ldi	r18, 0xC3	; 195
    2c22:	89 e0       	ldi	r24, 0x09	; 9
    2c24:	91 50       	subi	r25, 0x01	; 1
    2c26:	20 40       	sbci	r18, 0x00	; 0
    2c28:	80 40       	sbci	r24, 0x00	; 0
    2c2a:	e1 f7       	brne	.-8      	; 0x2c24 <_Z17hybrid_top_screenv+0x2be>
    2c2c:	00 c0       	rjmp	.+0      	; 0x2c2e <_Z17hybrid_top_screenv+0x2c8>
    2c2e:	00 00       	nop
    2c30:	08 95       	ret
						}
						_delay_ms(200);
						break;
		
		case BUTTON_6:
		                 if(present_state==BASE_DISP_LIST2)
    2c32:	80 91 fa 07 	lds	r24, 0x07FA
    2c36:	90 91 fb 07 	lds	r25, 0x07FB
    2c3a:	02 97       	sbiw	r24, 0x02	; 2
    2c3c:	91 f4       	brne	.+36     	; 0x2c62 <_Z17hybrid_top_screenv+0x2fc>
							{
								clearbuffer();
    2c3e:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
								present_menu=POLOLU_ARM_DISP;
    2c42:	24 e1       	ldi	r18, 0x14	; 20
    2c44:	20 93 fc 07 	sts	0x07FC, r18
								list_states[++list_index]=present_menu;
    2c48:	80 91 e7 07 	lds	r24, 0x07E7
    2c4c:	90 91 e8 07 	lds	r25, 0x07E8
    2c50:	01 96       	adiw	r24, 0x01	; 1
    2c52:	90 93 e8 07 	sts	0x07E8, r25
    2c56:	80 93 e7 07 	sts	0x07E7, r24
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	e7 51       	subi	r30, 0x17	; 23
    2c5e:	f8 4f       	sbci	r31, 0xF8	; 248
    2c60:	20 83       	st	Z, r18
    2c62:	9f ef       	ldi	r25, 0xFF	; 255
    2c64:	23 ec       	ldi	r18, 0xC3	; 195
    2c66:	89 e0       	ldi	r24, 0x09	; 9
    2c68:	91 50       	subi	r25, 0x01	; 1
    2c6a:	20 40       	sbci	r18, 0x00	; 0
    2c6c:	80 40       	sbci	r24, 0x00	; 0
    2c6e:	e1 f7       	brne	.-8      	; 0x2c68 <_Z17hybrid_top_screenv+0x302>
    2c70:	00 c0       	rjmp	.+0      	; 0x2c72 <_Z17hybrid_top_screenv+0x30c>
    2c72:	00 00       	nop
    2c74:	08 95       	ret
							}
							_delay_ms(200);
							break;
		case BUTTON_7:
		              if(present_state==BASE_DISP_LIST2)
    2c76:	80 91 fa 07 	lds	r24, 0x07FA
    2c7a:	90 91 fb 07 	lds	r25, 0x07FB
    2c7e:	02 97       	sbiw	r24, 0x02	; 2
    2c80:	91 f4       	brne	.+36     	; 0x2ca6 <_Z17hybrid_top_screenv+0x340>
							{
								clearbuffer();
    2c82:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
								present_menu=POLOLU_GRIPPER_DISP;
    2c86:	25 e1       	ldi	r18, 0x15	; 21
    2c88:	20 93 fc 07 	sts	0x07FC, r18
								list_states[++list_index]=present_menu;
    2c8c:	80 91 e7 07 	lds	r24, 0x07E7
    2c90:	90 91 e8 07 	lds	r25, 0x07E8
    2c94:	01 96       	adiw	r24, 0x01	; 1
    2c96:	90 93 e8 07 	sts	0x07E8, r25
    2c9a:	80 93 e7 07 	sts	0x07E7, r24
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	e7 51       	subi	r30, 0x17	; 23
    2ca2:	f8 4f       	sbci	r31, 0xF8	; 248
    2ca4:	20 83       	st	Z, r18
    2ca6:	9f ef       	ldi	r25, 0xFF	; 255
    2ca8:	23 ec       	ldi	r18, 0xC3	; 195
    2caa:	89 e0       	ldi	r24, 0x09	; 9
    2cac:	91 50       	subi	r25, 0x01	; 1
    2cae:	20 40       	sbci	r18, 0x00	; 0
    2cb0:	80 40       	sbci	r24, 0x00	; 0
    2cb2:	e1 f7       	brne	.-8      	; 0x2cac <_Z17hybrid_top_screenv+0x346>
    2cb4:	00 c0       	rjmp	.+0      	; 0x2cb6 <_Z17hybrid_top_screenv+0x350>
    2cb6:	00 00       	nop
    2cb8:	08 95       	ret
							}
							_delay_ms(200);
							break;
	   	case BUTTON_8:
						   if(present_state==BASE_DISP_LIST3)
    2cba:	80 91 fa 07 	lds	r24, 0x07FA
    2cbe:	90 91 fb 07 	lds	r25, 0x07FB
    2cc2:	03 97       	sbiw	r24, 0x03	; 3
    2cc4:	91 f4       	brne	.+36     	; 0x2cea <_Z17hybrid_top_screenv+0x384>
	   					{
		   					clearbuffer();
    2cc6:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
		   					present_menu=POLOLU_GRIPPER_DISP;
    2cca:	25 e1       	ldi	r18, 0x15	; 21
    2ccc:	20 93 fc 07 	sts	0x07FC, r18
		   					list_states[++list_index]=present_menu;
    2cd0:	80 91 e7 07 	lds	r24, 0x07E7
    2cd4:	90 91 e8 07 	lds	r25, 0x07E8
    2cd8:	01 96       	adiw	r24, 0x01	; 1
    2cda:	90 93 e8 07 	sts	0x07E8, r25
    2cde:	80 93 e7 07 	sts	0x07E7, r24
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	e7 51       	subi	r30, 0x17	; 23
    2ce6:	f8 4f       	sbci	r31, 0xF8	; 248
    2ce8:	20 83       	st	Z, r18
    2cea:	9f ef       	ldi	r25, 0xFF	; 255
    2cec:	23 ec       	ldi	r18, 0xC3	; 195
    2cee:	89 e0       	ldi	r24, 0x09	; 9
    2cf0:	91 50       	subi	r25, 0x01	; 1
    2cf2:	20 40       	sbci	r18, 0x00	; 0
    2cf4:	80 40       	sbci	r24, 0x00	; 0
    2cf6:	e1 f7       	brne	.-8      	; 0x2cf0 <_Z17hybrid_top_screenv+0x38a>
    2cf8:	00 c0       	rjmp	.+0      	; 0x2cfa <_Z17hybrid_top_screenv+0x394>
    2cfa:	00 00       	nop
    2cfc:	08 95       	ret
	   					}
	   					_delay_ms(200);
	   					break;
	   	case BUTTON_9:
					   if(present_state==BASE_DISP_LIST3)
    2cfe:	80 91 fa 07 	lds	r24, 0x07FA
    2d02:	90 91 fb 07 	lds	r25, 0x07FB
    2d06:	03 97       	sbiw	r24, 0x03	; 3
    2d08:	91 f4       	brne	.+36     	; 0x2d2e <_Z17hybrid_top_screenv+0x3c8>
	   				{
		   				clearbuffer();
    2d0a:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
		   				present_menu=GRIPPER_SERVO_DISP;
    2d0e:	21 e1       	ldi	r18, 0x11	; 17
    2d10:	20 93 fc 07 	sts	0x07FC, r18
		   				list_states[++list_index]=present_menu;
    2d14:	80 91 e7 07 	lds	r24, 0x07E7
    2d18:	90 91 e8 07 	lds	r25, 0x07E8
    2d1c:	01 96       	adiw	r24, 0x01	; 1
    2d1e:	90 93 e8 07 	sts	0x07E8, r25
    2d22:	80 93 e7 07 	sts	0x07E7, r24
    2d26:	fc 01       	movw	r30, r24
    2d28:	e7 51       	subi	r30, 0x17	; 23
    2d2a:	f8 4f       	sbci	r31, 0xF8	; 248
    2d2c:	20 83       	st	Z, r18
    2d2e:	9f ef       	ldi	r25, 0xFF	; 255
    2d30:	23 ec       	ldi	r18, 0xC3	; 195
    2d32:	89 e0       	ldi	r24, 0x09	; 9
    2d34:	91 50       	subi	r25, 0x01	; 1
    2d36:	20 40       	sbci	r18, 0x00	; 0
    2d38:	80 40       	sbci	r24, 0x00	; 0
    2d3a:	e1 f7       	brne	.-8      	; 0x2d34 <_Z17hybrid_top_screenv+0x3ce>
    2d3c:	00 c0       	rjmp	.+0      	; 0x2d3e <_Z17hybrid_top_screenv+0x3d8>
    2d3e:	00 00       	nop
    2d40:	08 95       	ret
	   				}
	   				_delay_ms(200);
	   				break;
		case BUTTON_AST:
		               if(present_state==BASE_DISP_LIST3)
    2d42:	80 91 fa 07 	lds	r24, 0x07FA
    2d46:	90 91 fb 07 	lds	r25, 0x07FB
    2d4a:	03 97       	sbiw	r24, 0x03	; 3
    2d4c:	81 f4       	brne	.+32     	; 0x2d6e <_Z17hybrid_top_screenv+0x408>
		                {
							present_menu=TOP_MOTOR_CHECK_DISP;
    2d4e:	27 e1       	ldi	r18, 0x17	; 23
    2d50:	20 93 fc 07 	sts	0x07FC, r18
							list_states[++list_index]=present_menu;
    2d54:	80 91 e7 07 	lds	r24, 0x07E7
    2d58:	90 91 e8 07 	lds	r25, 0x07E8
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	90 93 e8 07 	sts	0x07E8, r25
    2d62:	80 93 e7 07 	sts	0x07E7, r24
    2d66:	fc 01       	movw	r30, r24
    2d68:	e7 51       	subi	r30, 0x17	; 23
    2d6a:	f8 4f       	sbci	r31, 0xF8	; 248
    2d6c:	20 83       	st	Z, r18
    2d6e:	9f ef       	ldi	r25, 0xFF	; 255
    2d70:	23 ec       	ldi	r18, 0xC3	; 195
    2d72:	89 e0       	ldi	r24, 0x09	; 9
    2d74:	91 50       	subi	r25, 0x01	; 1
    2d76:	20 40       	sbci	r18, 0x00	; 0
    2d78:	80 40       	sbci	r24, 0x00	; 0
    2d7a:	e1 f7       	brne	.-8      	; 0x2d74 <_Z17hybrid_top_screenv+0x40e>
    2d7c:	00 c0       	rjmp	.+0      	; 0x2d7e <_Z17hybrid_top_screenv+0x418>
    2d7e:	00 00       	nop
    2d80:	08 95       	ret
						}
						_delay_ms(200);
						break;
		   	
		case BUTTON_HASH:present_state++;
    2d82:	80 91 fa 07 	lds	r24, 0x07FA
    2d86:	90 91 fb 07 	lds	r25, 0x07FB
    2d8a:	01 96       	adiw	r24, 0x01	; 1
    2d8c:	90 93 fb 07 	sts	0x07FB, r25
    2d90:	80 93 fa 07 	sts	0x07FA, r24
    2d94:	9f ef       	ldi	r25, 0xFF	; 255
    2d96:	23 ec       	ldi	r18, 0xC3	; 195
    2d98:	89 e0       	ldi	r24, 0x09	; 9
    2d9a:	91 50       	subi	r25, 0x01	; 1
    2d9c:	20 40       	sbci	r18, 0x00	; 0
    2d9e:	80 40       	sbci	r24, 0x00	; 0
    2da0:	e1 f7       	brne	.-8      	; 0x2d9a <_Z17hybrid_top_screenv+0x434>
    2da2:	00 c0       	rjmp	.+0      	; 0x2da4 <_Z17hybrid_top_screenv+0x43e>
    2da4:	00 00       	nop
    2da6:	08 95       	ret
						_delay_ms(200);
						break;
		case BUTTON_A:
						if(present_state!=BASE_DISP_LIST1)
    2da8:	80 91 fa 07 	lds	r24, 0x07FA
    2dac:	90 91 fb 07 	lds	r25, 0x07FB
    2db0:	81 30       	cpi	r24, 0x01	; 1
    2db2:	91 05       	cpc	r25, r1
    2db4:	31 f0       	breq	.+12     	; 0x2dc2 <_Z17hybrid_top_screenv+0x45c>
						present_state--;
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	90 93 fb 07 	sts	0x07FB, r25
    2dbc:	80 93 fa 07 	sts	0x07FA, r24
    2dc0:	18 c0       	rjmp	.+48     	; 0x2df2 <_Z17hybrid_top_screenv+0x48c>
						else
						{
						present_menu=list_states[--list_index];
    2dc2:	80 91 e7 07 	lds	r24, 0x07E7
    2dc6:	90 91 e8 07 	lds	r25, 0x07E8
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	90 93 e8 07 	sts	0x07E8, r25
    2dd0:	80 93 e7 07 	sts	0x07E7, r24
    2dd4:	fc 01       	movw	r30, r24
    2dd6:	e7 51       	subi	r30, 0x17	; 23
    2dd8:	f8 4f       	sbci	r31, 0xF8	; 248
    2dda:	80 81       	ld	r24, Z
    2ddc:	80 93 fc 07 	sts	0x07FC, r24
						transmitdata('a');
    2de0:	81 e6       	ldi	r24, 0x61	; 97
    2de2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2de6:	8f e3       	ldi	r24, 0x3F	; 63
    2de8:	9f e1       	ldi	r25, 0x1F	; 31
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <_Z17hybrid_top_screenv+0x484>
    2dee:	00 c0       	rjmp	.+0      	; 0x2df0 <_Z17hybrid_top_screenv+0x48a>
    2df0:	00 00       	nop
						_delay_ms(2);
						}
						clearbuffer();
    2df2:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    2df6:	9f ef       	ldi	r25, 0xFF	; 255
    2df8:	23 ec       	ldi	r18, 0xC3	; 195
    2dfa:	89 e0       	ldi	r24, 0x09	; 9
    2dfc:	91 50       	subi	r25, 0x01	; 1
    2dfe:	20 40       	sbci	r18, 0x00	; 0
    2e00:	80 40       	sbci	r24, 0x00	; 0
    2e02:	e1 f7       	brne	.-8      	; 0x2dfc <_Z17hybrid_top_screenv+0x496>
    2e04:	00 c0       	rjmp	.+0      	; 0x2e06 <_Z17hybrid_top_screenv+0x4a0>
    2e06:	00 00       	nop
    2e08:	08 95       	ret

00002e0a <_Z22top_motor_check_screenv>:
						break;
	}
}
void top_motor_check_screen()
{
	switch(get_key())
    2e0a:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    2e0e:	83 30       	cpi	r24, 0x03	; 3
    2e10:	91 05       	cpc	r25, r1
    2e12:	b1 f1       	breq	.+108    	; 0x2e80 <_Z22top_motor_check_screenv+0x76>
    2e14:	20 f4       	brcc	.+8      	; 0x2e1e <_Z22top_motor_check_screenv+0x14>
    2e16:	02 97       	sbiw	r24, 0x02	; 2
    2e18:	09 f0       	breq	.+2      	; 0x2e1c <_Z22top_motor_check_screenv+0x12>
    2e1a:	51 c0       	rjmp	.+162    	; 0x2ebe <_Z22top_motor_check_screenv+0xb4>
    2e1c:	21 c0       	rjmp	.+66     	; 0x2e60 <_Z22top_motor_check_screenv+0x56>
    2e1e:	84 30       	cpi	r24, 0x04	; 4
    2e20:	91 05       	cpc	r25, r1
    2e22:	f1 f1       	breq	.+124    	; 0x2ea0 <_Z22top_motor_check_screenv+0x96>
    2e24:	0d 97       	sbiw	r24, 0x0d	; 13
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <_Z22top_motor_check_screenv+0x20>
    2e28:	4a c0       	rjmp	.+148    	; 0x2ebe <_Z22top_motor_check_screenv+0xb4>
	{
		case BUTTON_A:present_menu=list_states[--list_index];
    2e2a:	80 91 e7 07 	lds	r24, 0x07E7
    2e2e:	90 91 e8 07 	lds	r25, 0x07E8
    2e32:	01 97       	sbiw	r24, 0x01	; 1
    2e34:	90 93 e8 07 	sts	0x07E8, r25
    2e38:	80 93 e7 07 	sts	0x07E7, r24
    2e3c:	fc 01       	movw	r30, r24
    2e3e:	e7 51       	subi	r30, 0x17	; 23
    2e40:	f8 4f       	sbci	r31, 0xF8	; 248
    2e42:	80 81       	ld	r24, Z
    2e44:	80 93 fc 07 	sts	0x07FC, r24
		clearbuffer();
    2e48:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <_Z11clearbufferv>
    2e4c:	2f ef       	ldi	r18, 0xFF	; 255
    2e4e:	83 ec       	ldi	r24, 0xC3	; 195
    2e50:	99 e0       	ldi	r25, 0x09	; 9
    2e52:	21 50       	subi	r18, 0x01	; 1
    2e54:	80 40       	sbci	r24, 0x00	; 0
    2e56:	90 40       	sbci	r25, 0x00	; 0
    2e58:	e1 f7       	brne	.-8      	; 0x2e52 <_Z22top_motor_check_screenv+0x48>
    2e5a:	00 c0       	rjmp	.+0      	; 0x2e5c <_Z22top_motor_check_screenv+0x52>
    2e5c:	00 00       	nop
    2e5e:	2f c0       	rjmp	.+94     	; 0x2ebe <_Z22top_motor_check_screenv+0xb4>
		_delay_ms(200);
		break;
		
		case BUTTON_1:transmitdata('b');
    2e60:	82 e6       	ldi	r24, 0x62	; 98
    2e62:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2e66:	2f ef       	ldi	r18, 0xFF	; 255
    2e68:	83 ec       	ldi	r24, 0xC3	; 195
    2e6a:	99 e0       	ldi	r25, 0x09	; 9
    2e6c:	21 50       	subi	r18, 0x01	; 1
    2e6e:	80 40       	sbci	r24, 0x00	; 0
    2e70:	90 40       	sbci	r25, 0x00	; 0
    2e72:	e1 f7       	brne	.-8      	; 0x2e6c <_Z22top_motor_check_screenv+0x62>
    2e74:	00 c0       	rjmp	.+0      	; 0x2e76 <_Z22top_motor_check_screenv+0x6c>
    2e76:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    2e78:	81 e0       	ldi	r24, 0x01	; 1
    2e7a:	80 93 b7 07 	sts	0x07B7, r24
		break;
    2e7e:	1f c0       	rjmp	.+62     	; 0x2ebe <_Z22top_motor_check_screenv+0xb4>
		
		case BUTTON_2:transmitdata('d');
    2e80:	84 e6       	ldi	r24, 0x64	; 100
    2e82:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2e86:	2f ef       	ldi	r18, 0xFF	; 255
    2e88:	83 ec       	ldi	r24, 0xC3	; 195
    2e8a:	99 e0       	ldi	r25, 0x09	; 9
    2e8c:	21 50       	subi	r18, 0x01	; 1
    2e8e:	80 40       	sbci	r24, 0x00	; 0
    2e90:	90 40       	sbci	r25, 0x00	; 0
    2e92:	e1 f7       	brne	.-8      	; 0x2e8c <_Z22top_motor_check_screenv+0x82>
    2e94:	00 c0       	rjmp	.+0      	; 0x2e96 <_Z22top_motor_check_screenv+0x8c>
    2e96:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	80 93 b7 07 	sts	0x07B7, r24
		break;
    2e9e:	0f c0       	rjmp	.+30     	; 0x2ebe <_Z22top_motor_check_screenv+0xb4>
		case BUTTON_3:transmitdata('f');
    2ea0:	86 e6       	ldi	r24, 0x66	; 102
    2ea2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2ea6:	2f ef       	ldi	r18, 0xFF	; 255
    2ea8:	83 ec       	ldi	r24, 0xC3	; 195
    2eaa:	99 e0       	ldi	r25, 0x09	; 9
    2eac:	21 50       	subi	r18, 0x01	; 1
    2eae:	80 40       	sbci	r24, 0x00	; 0
    2eb0:	90 40       	sbci	r25, 0x00	; 0
    2eb2:	e1 f7       	brne	.-8      	; 0x2eac <_Z22top_motor_check_screenv+0xa2>
    2eb4:	00 c0       	rjmp	.+0      	; 0x2eb6 <_Z22top_motor_check_screenv+0xac>
    2eb6:	00 00       	nop
		_delay_ms(200);
		displayflag=1;
    2eb8:	81 e0       	ldi	r24, 0x01	; 1
    2eba:	80 93 b7 07 	sts	0x07B7, r24
		break;
	}
	if(displayflag)
    2ebe:	80 91 b7 07 	lds	r24, 0x07B7
    2ec2:	88 23       	and	r24, r24
    2ec4:	61 f1       	breq	.+88     	; 0x2f1e <_Z22top_motor_check_screenv+0x114>
	{
		lcd_clear();
    2ec6:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
		Printf(1,"#MOTORS CHECK# BACK-A");
    2eca:	85 e6       	ldi	r24, 0x65	; 101
    2ecc:	97 e0       	ldi	r25, 0x07	; 7
    2ece:	9f 93       	push	r25
    2ed0:	8f 93       	push	r24
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	8f 93       	push	r24
    2ed6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(2,"1.Arm motion");
    2eda:	8b e7       	ldi	r24, 0x7B	; 123
    2edc:	97 e0       	ldi	r25, 0x07	; 7
    2ede:	9f 93       	push	r25
    2ee0:	8f 93       	push	r24
    2ee2:	82 e0       	ldi	r24, 0x02	; 2
    2ee4:	8f 93       	push	r24
    2ee6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(3,"2.Gripper motion");
    2eea:	88 e8       	ldi	r24, 0x88	; 136
    2eec:	97 e0       	ldi	r25, 0x07	; 7
    2eee:	9f 93       	push	r25
    2ef0:	8f 93       	push	r24
    2ef2:	83 e0       	ldi	r24, 0x03	; 3
    2ef4:	8f 93       	push	r24
    2ef6:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		Printf(4,"3.Wiper motion");
    2efa:	89 e9       	ldi	r24, 0x99	; 153
    2efc:	97 e0       	ldi	r25, 0x07	; 7
    2efe:	9f 93       	push	r25
    2f00:	8f 93       	push	r24
    2f02:	84 e0       	ldi	r24, 0x04	; 4
    2f04:	8f 93       	push	r24
    2f06:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
		displayflag=0;
    2f0a:	10 92 b7 07 	sts	0x07B7, r1
    2f0e:	8d b7       	in	r24, 0x3d	; 61
    2f10:	9e b7       	in	r25, 0x3e	; 62
    2f12:	0c 96       	adiw	r24, 0x0c	; 12
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	9e bf       	out	0x3e, r25	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	8d bf       	out	0x3d, r24	; 61
    2f1e:	08 95       	ret

00002f20 <main>:
void gripper_screen();
void hybrid_top_sequence_screen();
void top_motor_check_screen();
int main(void)
{
	lcd_init();
    2f20:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <_Z8lcd_initv>
	keypad_init();
    2f24:	0e 94 2a 02 	call	0x454	; 0x454 <_Z11keypad_initv>
	init_timer0();
    2f28:	0e 94 34 03 	call	0x668	; 0x668 <_Z11init_timer0v>
	init_myuart();
    2f2c:	0e 94 f7 03 	call	0x7ee	; 0x7ee <_Z11init_myuartv>
	sei();
    2f30:	78 94       	sei
	list_states[list_index]=HOME_SCREEN;
    2f32:	e0 91 e7 07 	lds	r30, 0x07E7
    2f36:	f0 91 e8 07 	lds	r31, 0x07E8
    2f3a:	e7 51       	subi	r30, 0x17	; 23
    2f3c:	f8 4f       	sbci	r31, 0xF8	; 248
    2f3e:	10 82       	st	Z, r1
	present_menu=HOME_SCREEN;
    2f40:	10 92 fc 07 	sts	0x07FC, r1
	lcd_clear();
    2f44:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9lcd_clearv>
	Printf(2,"hello");
    2f48:	88 ea       	ldi	r24, 0xA8	; 168
    2f4a:	97 e0       	ldi	r25, 0x07	; 7
    2f4c:	9f 93       	push	r25
    2f4e:	8f 93       	push	r24
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	8f 93       	push	r24
    2f54:	0e 94 28 01 	call	0x250	; 0x250 <_Z6PrintfhPcz>
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
						  transmitdata('b');
						  _delay_ms(5);
						  transmitdata('1');
						  _delay_ms(5);
						  teamselect=0;
						  connection_check_enable=1;
    2f5e:	c1 e0       	ldi	r28, 0x01	; 1
	present_menu=HOME_SCREEN;
	lcd_clear();
	Printf(2,"hello");
    while(1)
    {
	    switch(get_key())
    2f60:	0e 94 1e 03 	call	0x63c	; 0x63c <_Z7get_keyv>
    2f64:	01 97       	sbiw	r24, 0x01	; 1
    2f66:	29 f5       	brne	.+74     	; 0x2fb2 <main+0x92>
		{
			case BUTTON_0:present_menu=HOME_SCREEN;
    2f68:	10 92 fc 07 	sts	0x07FC, r1
			              list_index=0;
    2f6c:	10 92 e8 07 	sts	0x07E8, r1
    2f70:	10 92 e7 07 	sts	0x07E7, r1
						  transmitdata('b');
    2f74:	82 e6       	ldi	r24, 0x62	; 98
    2f76:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2f7a:	8f e1       	ldi	r24, 0x1F	; 31
    2f7c:	9e e4       	ldi	r25, 0x4E	; 78
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <main+0x5e>
    2f82:	00 c0       	rjmp	.+0      	; 0x2f84 <main+0x64>
    2f84:	00 00       	nop
						  _delay_ms(5);
						  transmitdata('1');
    2f86:	81 e3       	ldi	r24, 0x31	; 49
    2f88:	0e 94 73 03 	call	0x6e6	; 0x6e6 <_Z12transmitdatah>
    2f8c:	8f e1       	ldi	r24, 0x1F	; 31
    2f8e:	9e e4       	ldi	r25, 0x4E	; 78
    2f90:	01 97       	sbiw	r24, 0x01	; 1
    2f92:	f1 f7       	brne	.-4      	; 0x2f90 <main+0x70>
    2f94:	00 c0       	rjmp	.+0      	; 0x2f96 <main+0x76>
    2f96:	00 00       	nop
						  _delay_ms(5);
						  teamselect=0;
    2f98:	10 92 b2 07 	sts	0x07B2, r1
						  connection_check_enable=1;
    2f9c:	c0 93 00 01 	sts	0x0100, r28
    2fa0:	9f ef       	ldi	r25, 0xFF	; 255
    2fa2:	24 e3       	ldi	r18, 0x34	; 52
    2fa4:	8c e0       	ldi	r24, 0x0C	; 12
    2fa6:	91 50       	subi	r25, 0x01	; 1
    2fa8:	20 40       	sbci	r18, 0x00	; 0
    2faa:	80 40       	sbci	r24, 0x00	; 0
    2fac:	e1 f7       	brne	.-8      	; 0x2fa6 <main+0x86>
    2fae:	00 c0       	rjmp	.+0      	; 0x2fb0 <main+0x90>
    2fb0:	00 00       	nop
						   _delay_ms(250);
						  break;	
		}
		switch(present_menu)
    2fb2:	e0 91 fc 07 	lds	r30, 0x07FC
    2fb6:	f0 e0       	ldi	r31, 0x00	; 0
    2fb8:	e8 31       	cpi	r30, 0x18	; 24
    2fba:	f1 05       	cpc	r31, r1
    2fbc:	08 f0       	brcs	.+2      	; 0x2fc0 <main+0xa0>
    2fbe:	48 c0       	rjmp	.+144    	; 0x3050 <main+0x130>
    2fc0:	ec 5c       	subi	r30, 0xCC	; 204
    2fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc4:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__tablejump2__>
		{
			case HOME_SCREEN:     displayhomescreen();
    2fc8:	0e 94 05 04 	call	0x80a	; 0x80a <_Z17displayhomescreenv>
			                      break;
    2fcc:	41 c0       	rjmp	.+130    	; 0x3050 <main+0x130>
			case CALIBRATE_MODE:  calibratescreen();
    2fce:	0e 94 c2 05 	call	0xb84	; 0xb84 <_Z15calibratescreenv>
			                      break;
    2fd2:	3e c0       	rjmp	.+124    	; 0x3050 <main+0x130>
			case MODE_CHO0SE:     choosemode_screen();
    2fd4:	0e 94 95 06 	call	0xd2a	; 0xd2a <_Z17choosemode_screenv>
			                      break;
    2fd8:	3b c0       	rjmp	.+118    	; 0x3050 <main+0x130>
			case HYBRID_BASE_DISP:hybrid_base_screen();
    2fda:	0e 94 90 08 	call	0x1120	; 0x1120 <_Z18hybrid_base_screenv>
			                      break;
    2fde:	38 c0       	rjmp	.+112    	; 0x3050 <main+0x130>
			case HYBRID_TOP_DISP: hybrid_top_screen();
    2fe0:	0e 94 b3 14 	call	0x2966	; 0x2966 <_Z17hybrid_top_screenv>
			                      break;
    2fe4:	35 c0       	rjmp	.+106    	; 0x3050 <main+0x130>
			case RETRY_MODE: retry_mode_screen();
    2fe6:	0e 94 6a 07 	call	0xed4	; 0xed4 <_Z17retry_mode_screenv>
			                      break;				  
    2fea:	32 c0       	rjmp	.+100    	; 0x3050 <main+0x130>
			case HYBRID_BASE_SPEED:hybridbasespeed_screen();
    2fec:	0e 94 4a 0a 	call	0x1494	; 0x1494 <_Z22hybridbasespeed_screenv>
			                        break;
    2ff0:	2f c0       	rjmp	.+94     	; 0x3050 <main+0x130>
			case LINE_PID_DISP:   linepid_screen();
    2ff2:	0e 94 a5 0b 	call	0x174a	; 0x174a <_Z14linepid_screenv>
			                      break;
    2ff6:	2c c0       	rjmp	.+88     	; 0x3050 <main+0x130>
			case MOTOR_PID_DISP:  motorpid_screen();
    2ff8:	0e 94 9c 0c 	call	0x1938	; 0x1938 <_Z15motorpid_screenv>
			                      break;
    2ffc:	29 c0       	rjmp	.+82     	; 0x3050 <main+0x130>
			case ENCODER_CHECK_DISP:encoder_check_screen();
    2ffe:	0e 94 0b 0b 	call	0x1616	; 0x1616 <_Z20encoder_check_screenv>
			                        break;
    3002:	26 c0       	rjmp	.+76     	; 0x3050 <main+0x130>
			case MOTOR_CHECK_DISP:basemotor_check_screen();           
    3004:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <_Z22basemotor_check_screenv>
			                      break;
    3008:	23 c0       	rjmp	.+70     	; 0x3050 <main+0x130>
			case PROXIMITY_CHECK:proximity_check_screen();
    300a:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <_Z22proximity_check_screenv>
			                      break;
    300e:	20 c0       	rjmp	.+64     	; 0x3050 <main+0x130>
			case JUNCTION_CHECK:junction_check_screen();
    3010:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <_Z21junction_check_screenv>
			                    break;			
    3014:	1d c0       	rjmp	.+58     	; 0x3050 <main+0x130>
			case HYBRID_TOP_SEQUENCE:hybrid_top_sequence_screen();
    3016:	0e 94 10 13 	call	0x2620	; 0x2620 <_Z26hybrid_top_sequence_screenv>
			                         break;
    301a:	1a c0       	rjmp	.+52     	; 0x3050 <main+0x130>
			case POLOLU_ARM_DISP:pololu_arm_screen();
    301c:	0e 94 03 10 	call	0x2006	; 0x2006 <_Z17pololu_arm_screenv>
			                     break;
    3020:	17 c0       	rjmp	.+46     	; 0x3050 <main+0x130>
			case POLOLU_GRIPPER_DISP:pololu_gripper_screen();
    3022:	0e 94 86 10 	call	0x210c	; 0x210c <_Z21pololu_gripper_screenv>
			                     break;
    3026:	14 c0       	rjmp	.+40     	; 0x3050 <main+0x130>
			case POLOLU_WIPER_DISP:pololu_wiper_screen();
    3028:	0e 94 09 11 	call	0x2212	; 0x2212 <_Z19pololu_wiper_screenv>
			                     break;
    302c:	11 c0       	rjmp	.+34     	; 0x3050 <main+0x130>
		    case WIPERMOTOR_PID_DISP:wipermotor_pid_screen();
    302e:	0e 94 0c 0f 	call	0x1e18	; 0x1e18 <_Z21wipermotor_pid_screenv>
			                     break;
    3032:	0e c0       	rjmp	.+28     	; 0x3050 <main+0x130>
			case LIDAR_DISP:lidar_screen();
    3034:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <_Z12lidar_screenv>
			                     break;
    3038:	0b c0       	rjmp	.+22     	; 0x3050 <main+0x130>
			case DUCTFAN_DISP:ductfan_screen();
    303a:	0e 94 8c 11 	call	0x2318	; 0x2318 <_Z14ductfan_screenv>
			                     break;
    303e:	08 c0       	rjmp	.+16     	; 0x3050 <main+0x130>
            case DUCT_SERVO_DISP:ductservo_screen();
    3040:	0e 94 17 12 	call	0x242e	; 0x242e <_Z16ductservo_screenv>
			                     break;
    3044:	05 c0       	rjmp	.+10     	; 0x3050 <main+0x130>
			case GRIPPER_SERVO_DISP:gripper_screen();
    3046:	0e 94 9a 12 	call	0x2534	; 0x2534 <_Z14gripper_screenv>
			                     break;
    304a:	02 c0       	rjmp	.+4      	; 0x3050 <main+0x130>
	        case TOP_MOTOR_CHECK_DISP:top_motor_check_screen();
    304c:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <_Z22top_motor_check_screenv>
    3050:	8f e3       	ldi	r24, 0x3F	; 63
    3052:	9c e9       	ldi	r25, 0x9C	; 156
    3054:	01 97       	sbiw	r24, 0x01	; 1
    3056:	f1 f7       	brne	.-4      	; 0x3054 <main+0x134>
    3058:	00 c0       	rjmp	.+0      	; 0x305a <main+0x13a>
    305a:	00 00       	nop
    305c:	81 cf       	rjmp	.-254    	; 0x2f60 <main+0x40>

0000305e <__subsf3>:
    305e:	50 58       	subi	r21, 0x80	; 128

00003060 <__addsf3>:
    3060:	bb 27       	eor	r27, r27
    3062:	aa 27       	eor	r26, r26
    3064:	0e d0       	rcall	.+28     	; 0x3082 <__addsf3x>
    3066:	e5 c0       	rjmp	.+458    	; 0x3232 <__fp_round>
    3068:	d6 d0       	rcall	.+428    	; 0x3216 <__fp_pscA>
    306a:	30 f0       	brcs	.+12     	; 0x3078 <__addsf3+0x18>
    306c:	db d0       	rcall	.+438    	; 0x3224 <__fp_pscB>
    306e:	20 f0       	brcs	.+8      	; 0x3078 <__addsf3+0x18>
    3070:	31 f4       	brne	.+12     	; 0x307e <__addsf3+0x1e>
    3072:	9f 3f       	cpi	r25, 0xFF	; 255
    3074:	11 f4       	brne	.+4      	; 0x307a <__addsf3+0x1a>
    3076:	1e f4       	brtc	.+6      	; 0x307e <__addsf3+0x1e>
    3078:	cb c0       	rjmp	.+406    	; 0x3210 <__fp_nan>
    307a:	0e f4       	brtc	.+2      	; 0x307e <__addsf3+0x1e>
    307c:	e0 95       	com	r30
    307e:	e7 fb       	bst	r30, 7
    3080:	c1 c0       	rjmp	.+386    	; 0x3204 <__fp_inf>

00003082 <__addsf3x>:
    3082:	e9 2f       	mov	r30, r25
    3084:	e7 d0       	rcall	.+462    	; 0x3254 <__fp_split3>
    3086:	80 f3       	brcs	.-32     	; 0x3068 <__addsf3+0x8>
    3088:	ba 17       	cp	r27, r26
    308a:	62 07       	cpc	r22, r18
    308c:	73 07       	cpc	r23, r19
    308e:	84 07       	cpc	r24, r20
    3090:	95 07       	cpc	r25, r21
    3092:	18 f0       	brcs	.+6      	; 0x309a <__addsf3x+0x18>
    3094:	71 f4       	brne	.+28     	; 0x30b2 <__addsf3x+0x30>
    3096:	9e f5       	brtc	.+102    	; 0x30fe <__addsf3x+0x7c>
    3098:	ff c0       	rjmp	.+510    	; 0x3298 <__fp_zero>
    309a:	0e f4       	brtc	.+2      	; 0x309e <__addsf3x+0x1c>
    309c:	e0 95       	com	r30
    309e:	0b 2e       	mov	r0, r27
    30a0:	ba 2f       	mov	r27, r26
    30a2:	a0 2d       	mov	r26, r0
    30a4:	0b 01       	movw	r0, r22
    30a6:	b9 01       	movw	r22, r18
    30a8:	90 01       	movw	r18, r0
    30aa:	0c 01       	movw	r0, r24
    30ac:	ca 01       	movw	r24, r20
    30ae:	a0 01       	movw	r20, r0
    30b0:	11 24       	eor	r1, r1
    30b2:	ff 27       	eor	r31, r31
    30b4:	59 1b       	sub	r21, r25
    30b6:	99 f0       	breq	.+38     	; 0x30de <__addsf3x+0x5c>
    30b8:	59 3f       	cpi	r21, 0xF9	; 249
    30ba:	50 f4       	brcc	.+20     	; 0x30d0 <__addsf3x+0x4e>
    30bc:	50 3e       	cpi	r21, 0xE0	; 224
    30be:	68 f1       	brcs	.+90     	; 0x311a <__addsf3x+0x98>
    30c0:	1a 16       	cp	r1, r26
    30c2:	f0 40       	sbci	r31, 0x00	; 0
    30c4:	a2 2f       	mov	r26, r18
    30c6:	23 2f       	mov	r18, r19
    30c8:	34 2f       	mov	r19, r20
    30ca:	44 27       	eor	r20, r20
    30cc:	58 5f       	subi	r21, 0xF8	; 248
    30ce:	f3 cf       	rjmp	.-26     	; 0x30b6 <__addsf3x+0x34>
    30d0:	46 95       	lsr	r20
    30d2:	37 95       	ror	r19
    30d4:	27 95       	ror	r18
    30d6:	a7 95       	ror	r26
    30d8:	f0 40       	sbci	r31, 0x00	; 0
    30da:	53 95       	inc	r21
    30dc:	c9 f7       	brne	.-14     	; 0x30d0 <__addsf3x+0x4e>
    30de:	7e f4       	brtc	.+30     	; 0x30fe <__addsf3x+0x7c>
    30e0:	1f 16       	cp	r1, r31
    30e2:	ba 0b       	sbc	r27, r26
    30e4:	62 0b       	sbc	r22, r18
    30e6:	73 0b       	sbc	r23, r19
    30e8:	84 0b       	sbc	r24, r20
    30ea:	ba f0       	brmi	.+46     	; 0x311a <__addsf3x+0x98>
    30ec:	91 50       	subi	r25, 0x01	; 1
    30ee:	a1 f0       	breq	.+40     	; 0x3118 <__addsf3x+0x96>
    30f0:	ff 0f       	add	r31, r31
    30f2:	bb 1f       	adc	r27, r27
    30f4:	66 1f       	adc	r22, r22
    30f6:	77 1f       	adc	r23, r23
    30f8:	88 1f       	adc	r24, r24
    30fa:	c2 f7       	brpl	.-16     	; 0x30ec <__addsf3x+0x6a>
    30fc:	0e c0       	rjmp	.+28     	; 0x311a <__addsf3x+0x98>
    30fe:	ba 0f       	add	r27, r26
    3100:	62 1f       	adc	r22, r18
    3102:	73 1f       	adc	r23, r19
    3104:	84 1f       	adc	r24, r20
    3106:	48 f4       	brcc	.+18     	; 0x311a <__addsf3x+0x98>
    3108:	87 95       	ror	r24
    310a:	77 95       	ror	r23
    310c:	67 95       	ror	r22
    310e:	b7 95       	ror	r27
    3110:	f7 95       	ror	r31
    3112:	9e 3f       	cpi	r25, 0xFE	; 254
    3114:	08 f0       	brcs	.+2      	; 0x3118 <__addsf3x+0x96>
    3116:	b3 cf       	rjmp	.-154    	; 0x307e <__addsf3+0x1e>
    3118:	93 95       	inc	r25
    311a:	88 0f       	add	r24, r24
    311c:	08 f0       	brcs	.+2      	; 0x3120 <__addsf3x+0x9e>
    311e:	99 27       	eor	r25, r25
    3120:	ee 0f       	add	r30, r30
    3122:	97 95       	ror	r25
    3124:	87 95       	ror	r24
    3126:	08 95       	ret

00003128 <__fixsfsi>:
    3128:	04 d0       	rcall	.+8      	; 0x3132 <__fixunssfsi>
    312a:	68 94       	set
    312c:	b1 11       	cpse	r27, r1
    312e:	b5 c0       	rjmp	.+362    	; 0x329a <__fp_szero>
    3130:	08 95       	ret

00003132 <__fixunssfsi>:
    3132:	98 d0       	rcall	.+304    	; 0x3264 <__fp_splitA>
    3134:	88 f0       	brcs	.+34     	; 0x3158 <__fixunssfsi+0x26>
    3136:	9f 57       	subi	r25, 0x7F	; 127
    3138:	90 f0       	brcs	.+36     	; 0x315e <__fixunssfsi+0x2c>
    313a:	b9 2f       	mov	r27, r25
    313c:	99 27       	eor	r25, r25
    313e:	b7 51       	subi	r27, 0x17	; 23
    3140:	a0 f0       	brcs	.+40     	; 0x316a <__fixunssfsi+0x38>
    3142:	d1 f0       	breq	.+52     	; 0x3178 <__fixunssfsi+0x46>
    3144:	66 0f       	add	r22, r22
    3146:	77 1f       	adc	r23, r23
    3148:	88 1f       	adc	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	1a f0       	brmi	.+6      	; 0x3154 <__fixunssfsi+0x22>
    314e:	ba 95       	dec	r27
    3150:	c9 f7       	brne	.-14     	; 0x3144 <__fixunssfsi+0x12>
    3152:	12 c0       	rjmp	.+36     	; 0x3178 <__fixunssfsi+0x46>
    3154:	b1 30       	cpi	r27, 0x01	; 1
    3156:	81 f0       	breq	.+32     	; 0x3178 <__fixunssfsi+0x46>
    3158:	9f d0       	rcall	.+318    	; 0x3298 <__fp_zero>
    315a:	b1 e0       	ldi	r27, 0x01	; 1
    315c:	08 95       	ret
    315e:	9c c0       	rjmp	.+312    	; 0x3298 <__fp_zero>
    3160:	67 2f       	mov	r22, r23
    3162:	78 2f       	mov	r23, r24
    3164:	88 27       	eor	r24, r24
    3166:	b8 5f       	subi	r27, 0xF8	; 248
    3168:	39 f0       	breq	.+14     	; 0x3178 <__fixunssfsi+0x46>
    316a:	b9 3f       	cpi	r27, 0xF9	; 249
    316c:	cc f3       	brlt	.-14     	; 0x3160 <__fixunssfsi+0x2e>
    316e:	86 95       	lsr	r24
    3170:	77 95       	ror	r23
    3172:	67 95       	ror	r22
    3174:	b3 95       	inc	r27
    3176:	d9 f7       	brne	.-10     	; 0x316e <__fixunssfsi+0x3c>
    3178:	3e f4       	brtc	.+14     	; 0x3188 <__fixunssfsi+0x56>
    317a:	90 95       	com	r25
    317c:	80 95       	com	r24
    317e:	70 95       	com	r23
    3180:	61 95       	neg	r22
    3182:	7f 4f       	sbci	r23, 0xFF	; 255
    3184:	8f 4f       	sbci	r24, 0xFF	; 255
    3186:	9f 4f       	sbci	r25, 0xFF	; 255
    3188:	08 95       	ret

0000318a <__floatunsisf>:
    318a:	e8 94       	clt
    318c:	09 c0       	rjmp	.+18     	; 0x31a0 <__floatsisf+0x12>

0000318e <__floatsisf>:
    318e:	97 fb       	bst	r25, 7
    3190:	3e f4       	brtc	.+14     	; 0x31a0 <__floatsisf+0x12>
    3192:	90 95       	com	r25
    3194:	80 95       	com	r24
    3196:	70 95       	com	r23
    3198:	61 95       	neg	r22
    319a:	7f 4f       	sbci	r23, 0xFF	; 255
    319c:	8f 4f       	sbci	r24, 0xFF	; 255
    319e:	9f 4f       	sbci	r25, 0xFF	; 255
    31a0:	99 23       	and	r25, r25
    31a2:	a9 f0       	breq	.+42     	; 0x31ce <__floatsisf+0x40>
    31a4:	f9 2f       	mov	r31, r25
    31a6:	96 e9       	ldi	r25, 0x96	; 150
    31a8:	bb 27       	eor	r27, r27
    31aa:	93 95       	inc	r25
    31ac:	f6 95       	lsr	r31
    31ae:	87 95       	ror	r24
    31b0:	77 95       	ror	r23
    31b2:	67 95       	ror	r22
    31b4:	b7 95       	ror	r27
    31b6:	f1 11       	cpse	r31, r1
    31b8:	f8 cf       	rjmp	.-16     	; 0x31aa <__floatsisf+0x1c>
    31ba:	fa f4       	brpl	.+62     	; 0x31fa <__floatsisf+0x6c>
    31bc:	bb 0f       	add	r27, r27
    31be:	11 f4       	brne	.+4      	; 0x31c4 <__floatsisf+0x36>
    31c0:	60 ff       	sbrs	r22, 0
    31c2:	1b c0       	rjmp	.+54     	; 0x31fa <__floatsisf+0x6c>
    31c4:	6f 5f       	subi	r22, 0xFF	; 255
    31c6:	7f 4f       	sbci	r23, 0xFF	; 255
    31c8:	8f 4f       	sbci	r24, 0xFF	; 255
    31ca:	9f 4f       	sbci	r25, 0xFF	; 255
    31cc:	16 c0       	rjmp	.+44     	; 0x31fa <__floatsisf+0x6c>
    31ce:	88 23       	and	r24, r24
    31d0:	11 f0       	breq	.+4      	; 0x31d6 <__floatsisf+0x48>
    31d2:	96 e9       	ldi	r25, 0x96	; 150
    31d4:	11 c0       	rjmp	.+34     	; 0x31f8 <__floatsisf+0x6a>
    31d6:	77 23       	and	r23, r23
    31d8:	21 f0       	breq	.+8      	; 0x31e2 <__floatsisf+0x54>
    31da:	9e e8       	ldi	r25, 0x8E	; 142
    31dc:	87 2f       	mov	r24, r23
    31de:	76 2f       	mov	r23, r22
    31e0:	05 c0       	rjmp	.+10     	; 0x31ec <__floatsisf+0x5e>
    31e2:	66 23       	and	r22, r22
    31e4:	71 f0       	breq	.+28     	; 0x3202 <__floatsisf+0x74>
    31e6:	96 e8       	ldi	r25, 0x86	; 134
    31e8:	86 2f       	mov	r24, r22
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	60 e0       	ldi	r22, 0x00	; 0
    31ee:	2a f0       	brmi	.+10     	; 0x31fa <__floatsisf+0x6c>
    31f0:	9a 95       	dec	r25
    31f2:	66 0f       	add	r22, r22
    31f4:	77 1f       	adc	r23, r23
    31f6:	88 1f       	adc	r24, r24
    31f8:	da f7       	brpl	.-10     	; 0x31f0 <__floatsisf+0x62>
    31fa:	88 0f       	add	r24, r24
    31fc:	96 95       	lsr	r25
    31fe:	87 95       	ror	r24
    3200:	97 f9       	bld	r25, 7
    3202:	08 95       	ret

00003204 <__fp_inf>:
    3204:	97 f9       	bld	r25, 7
    3206:	9f 67       	ori	r25, 0x7F	; 127
    3208:	80 e8       	ldi	r24, 0x80	; 128
    320a:	70 e0       	ldi	r23, 0x00	; 0
    320c:	60 e0       	ldi	r22, 0x00	; 0
    320e:	08 95       	ret

00003210 <__fp_nan>:
    3210:	9f ef       	ldi	r25, 0xFF	; 255
    3212:	80 ec       	ldi	r24, 0xC0	; 192
    3214:	08 95       	ret

00003216 <__fp_pscA>:
    3216:	00 24       	eor	r0, r0
    3218:	0a 94       	dec	r0
    321a:	16 16       	cp	r1, r22
    321c:	17 06       	cpc	r1, r23
    321e:	18 06       	cpc	r1, r24
    3220:	09 06       	cpc	r0, r25
    3222:	08 95       	ret

00003224 <__fp_pscB>:
    3224:	00 24       	eor	r0, r0
    3226:	0a 94       	dec	r0
    3228:	12 16       	cp	r1, r18
    322a:	13 06       	cpc	r1, r19
    322c:	14 06       	cpc	r1, r20
    322e:	05 06       	cpc	r0, r21
    3230:	08 95       	ret

00003232 <__fp_round>:
    3232:	09 2e       	mov	r0, r25
    3234:	03 94       	inc	r0
    3236:	00 0c       	add	r0, r0
    3238:	11 f4       	brne	.+4      	; 0x323e <__fp_round+0xc>
    323a:	88 23       	and	r24, r24
    323c:	52 f0       	brmi	.+20     	; 0x3252 <__fp_round+0x20>
    323e:	bb 0f       	add	r27, r27
    3240:	40 f4       	brcc	.+16     	; 0x3252 <__fp_round+0x20>
    3242:	bf 2b       	or	r27, r31
    3244:	11 f4       	brne	.+4      	; 0x324a <__fp_round+0x18>
    3246:	60 ff       	sbrs	r22, 0
    3248:	04 c0       	rjmp	.+8      	; 0x3252 <__fp_round+0x20>
    324a:	6f 5f       	subi	r22, 0xFF	; 255
    324c:	7f 4f       	sbci	r23, 0xFF	; 255
    324e:	8f 4f       	sbci	r24, 0xFF	; 255
    3250:	9f 4f       	sbci	r25, 0xFF	; 255
    3252:	08 95       	ret

00003254 <__fp_split3>:
    3254:	57 fd       	sbrc	r21, 7
    3256:	90 58       	subi	r25, 0x80	; 128
    3258:	44 0f       	add	r20, r20
    325a:	55 1f       	adc	r21, r21
    325c:	59 f0       	breq	.+22     	; 0x3274 <__fp_splitA+0x10>
    325e:	5f 3f       	cpi	r21, 0xFF	; 255
    3260:	71 f0       	breq	.+28     	; 0x327e <__fp_splitA+0x1a>
    3262:	47 95       	ror	r20

00003264 <__fp_splitA>:
    3264:	88 0f       	add	r24, r24
    3266:	97 fb       	bst	r25, 7
    3268:	99 1f       	adc	r25, r25
    326a:	61 f0       	breq	.+24     	; 0x3284 <__fp_splitA+0x20>
    326c:	9f 3f       	cpi	r25, 0xFF	; 255
    326e:	79 f0       	breq	.+30     	; 0x328e <__fp_splitA+0x2a>
    3270:	87 95       	ror	r24
    3272:	08 95       	ret
    3274:	12 16       	cp	r1, r18
    3276:	13 06       	cpc	r1, r19
    3278:	14 06       	cpc	r1, r20
    327a:	55 1f       	adc	r21, r21
    327c:	f2 cf       	rjmp	.-28     	; 0x3262 <__fp_split3+0xe>
    327e:	46 95       	lsr	r20
    3280:	f1 df       	rcall	.-30     	; 0x3264 <__fp_splitA>
    3282:	08 c0       	rjmp	.+16     	; 0x3294 <__fp_splitA+0x30>
    3284:	16 16       	cp	r1, r22
    3286:	17 06       	cpc	r1, r23
    3288:	18 06       	cpc	r1, r24
    328a:	99 1f       	adc	r25, r25
    328c:	f1 cf       	rjmp	.-30     	; 0x3270 <__fp_splitA+0xc>
    328e:	86 95       	lsr	r24
    3290:	71 05       	cpc	r23, r1
    3292:	61 05       	cpc	r22, r1
    3294:	08 94       	sec
    3296:	08 95       	ret

00003298 <__fp_zero>:
    3298:	e8 94       	clt

0000329a <__fp_szero>:
    329a:	bb 27       	eor	r27, r27
    329c:	66 27       	eor	r22, r22
    329e:	77 27       	eor	r23, r23
    32a0:	cb 01       	movw	r24, r22
    32a2:	97 f9       	bld	r25, 7
    32a4:	08 95       	ret

000032a6 <__mulsf3>:
    32a6:	0b d0       	rcall	.+22     	; 0x32be <__mulsf3x>
    32a8:	c4 cf       	rjmp	.-120    	; 0x3232 <__fp_round>
    32aa:	b5 df       	rcall	.-150    	; 0x3216 <__fp_pscA>
    32ac:	28 f0       	brcs	.+10     	; 0x32b8 <__mulsf3+0x12>
    32ae:	ba df       	rcall	.-140    	; 0x3224 <__fp_pscB>
    32b0:	18 f0       	brcs	.+6      	; 0x32b8 <__mulsf3+0x12>
    32b2:	95 23       	and	r25, r21
    32b4:	09 f0       	breq	.+2      	; 0x32b8 <__mulsf3+0x12>
    32b6:	a6 cf       	rjmp	.-180    	; 0x3204 <__fp_inf>
    32b8:	ab cf       	rjmp	.-170    	; 0x3210 <__fp_nan>
    32ba:	11 24       	eor	r1, r1
    32bc:	ee cf       	rjmp	.-36     	; 0x329a <__fp_szero>

000032be <__mulsf3x>:
    32be:	ca df       	rcall	.-108    	; 0x3254 <__fp_split3>
    32c0:	a0 f3       	brcs	.-24     	; 0x32aa <__mulsf3+0x4>

000032c2 <__mulsf3_pse>:
    32c2:	95 9f       	mul	r25, r21
    32c4:	d1 f3       	breq	.-12     	; 0x32ba <__mulsf3+0x14>
    32c6:	95 0f       	add	r25, r21
    32c8:	50 e0       	ldi	r21, 0x00	; 0
    32ca:	55 1f       	adc	r21, r21
    32cc:	62 9f       	mul	r22, r18
    32ce:	f0 01       	movw	r30, r0
    32d0:	72 9f       	mul	r23, r18
    32d2:	bb 27       	eor	r27, r27
    32d4:	f0 0d       	add	r31, r0
    32d6:	b1 1d       	adc	r27, r1
    32d8:	63 9f       	mul	r22, r19
    32da:	aa 27       	eor	r26, r26
    32dc:	f0 0d       	add	r31, r0
    32de:	b1 1d       	adc	r27, r1
    32e0:	aa 1f       	adc	r26, r26
    32e2:	64 9f       	mul	r22, r20
    32e4:	66 27       	eor	r22, r22
    32e6:	b0 0d       	add	r27, r0
    32e8:	a1 1d       	adc	r26, r1
    32ea:	66 1f       	adc	r22, r22
    32ec:	82 9f       	mul	r24, r18
    32ee:	22 27       	eor	r18, r18
    32f0:	b0 0d       	add	r27, r0
    32f2:	a1 1d       	adc	r26, r1
    32f4:	62 1f       	adc	r22, r18
    32f6:	73 9f       	mul	r23, r19
    32f8:	b0 0d       	add	r27, r0
    32fa:	a1 1d       	adc	r26, r1
    32fc:	62 1f       	adc	r22, r18
    32fe:	83 9f       	mul	r24, r19
    3300:	a0 0d       	add	r26, r0
    3302:	61 1d       	adc	r22, r1
    3304:	22 1f       	adc	r18, r18
    3306:	74 9f       	mul	r23, r20
    3308:	33 27       	eor	r19, r19
    330a:	a0 0d       	add	r26, r0
    330c:	61 1d       	adc	r22, r1
    330e:	23 1f       	adc	r18, r19
    3310:	84 9f       	mul	r24, r20
    3312:	60 0d       	add	r22, r0
    3314:	21 1d       	adc	r18, r1
    3316:	82 2f       	mov	r24, r18
    3318:	76 2f       	mov	r23, r22
    331a:	6a 2f       	mov	r22, r26
    331c:	11 24       	eor	r1, r1
    331e:	9f 57       	subi	r25, 0x7F	; 127
    3320:	50 40       	sbci	r21, 0x00	; 0
    3322:	8a f0       	brmi	.+34     	; 0x3346 <__mulsf3_pse+0x84>
    3324:	e1 f0       	breq	.+56     	; 0x335e <__mulsf3_pse+0x9c>
    3326:	88 23       	and	r24, r24
    3328:	4a f0       	brmi	.+18     	; 0x333c <__mulsf3_pse+0x7a>
    332a:	ee 0f       	add	r30, r30
    332c:	ff 1f       	adc	r31, r31
    332e:	bb 1f       	adc	r27, r27
    3330:	66 1f       	adc	r22, r22
    3332:	77 1f       	adc	r23, r23
    3334:	88 1f       	adc	r24, r24
    3336:	91 50       	subi	r25, 0x01	; 1
    3338:	50 40       	sbci	r21, 0x00	; 0
    333a:	a9 f7       	brne	.-22     	; 0x3326 <__mulsf3_pse+0x64>
    333c:	9e 3f       	cpi	r25, 0xFE	; 254
    333e:	51 05       	cpc	r21, r1
    3340:	70 f0       	brcs	.+28     	; 0x335e <__mulsf3_pse+0x9c>
    3342:	60 cf       	rjmp	.-320    	; 0x3204 <__fp_inf>
    3344:	aa cf       	rjmp	.-172    	; 0x329a <__fp_szero>
    3346:	5f 3f       	cpi	r21, 0xFF	; 255
    3348:	ec f3       	brlt	.-6      	; 0x3344 <__mulsf3_pse+0x82>
    334a:	98 3e       	cpi	r25, 0xE8	; 232
    334c:	dc f3       	brlt	.-10     	; 0x3344 <__mulsf3_pse+0x82>
    334e:	86 95       	lsr	r24
    3350:	77 95       	ror	r23
    3352:	67 95       	ror	r22
    3354:	b7 95       	ror	r27
    3356:	f7 95       	ror	r31
    3358:	e7 95       	ror	r30
    335a:	9f 5f       	subi	r25, 0xFF	; 255
    335c:	c1 f7       	brne	.-16     	; 0x334e <__mulsf3_pse+0x8c>
    335e:	fe 2b       	or	r31, r30
    3360:	88 0f       	add	r24, r24
    3362:	91 1d       	adc	r25, r1
    3364:	96 95       	lsr	r25
    3366:	87 95       	ror	r24
    3368:	97 f9       	bld	r25, 7
    336a:	08 95       	ret

0000336c <__tablejump2__>:
    336c:	ee 0f       	add	r30, r30
    336e:	ff 1f       	adc	r31, r31

00003370 <__tablejump__>:
    3370:	05 90       	lpm	r0, Z+
    3372:	f4 91       	lpm	r31, Z
    3374:	e0 2d       	mov	r30, r0
    3376:	09 94       	ijmp

00003378 <strcpy>:
    3378:	fb 01       	movw	r30, r22
    337a:	dc 01       	movw	r26, r24
    337c:	01 90       	ld	r0, Z+
    337e:	0d 92       	st	X+, r0
    3380:	00 20       	and	r0, r0
    3382:	e1 f7       	brne	.-8      	; 0x337c <strcpy+0x4>
    3384:	08 95       	ret

00003386 <itoa>:
    3386:	fb 01       	movw	r30, r22
    3388:	9f 01       	movw	r18, r30
    338a:	e8 94       	clt
    338c:	42 30       	cpi	r20, 0x02	; 2
    338e:	c4 f0       	brlt	.+48     	; 0x33c0 <itoa+0x3a>
    3390:	45 32       	cpi	r20, 0x25	; 37
    3392:	b4 f4       	brge	.+44     	; 0x33c0 <itoa+0x3a>
    3394:	4a 30       	cpi	r20, 0x0A	; 10
    3396:	29 f4       	brne	.+10     	; 0x33a2 <itoa+0x1c>
    3398:	97 fb       	bst	r25, 7
    339a:	1e f4       	brtc	.+6      	; 0x33a2 <itoa+0x1c>
    339c:	90 95       	com	r25
    339e:	81 95       	neg	r24
    33a0:	9f 4f       	sbci	r25, 0xFF	; 255
    33a2:	64 2f       	mov	r22, r20
    33a4:	77 27       	eor	r23, r23
    33a6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__udivmodhi4>
    33aa:	80 5d       	subi	r24, 0xD0	; 208
    33ac:	8a 33       	cpi	r24, 0x3A	; 58
    33ae:	0c f0       	brlt	.+2      	; 0x33b2 <itoa+0x2c>
    33b0:	89 5d       	subi	r24, 0xD9	; 217
    33b2:	81 93       	st	Z+, r24
    33b4:	cb 01       	movw	r24, r22
    33b6:	00 97       	sbiw	r24, 0x00	; 0
    33b8:	a1 f7       	brne	.-24     	; 0x33a2 <itoa+0x1c>
    33ba:	16 f4       	brtc	.+4      	; 0x33c0 <itoa+0x3a>
    33bc:	5d e2       	ldi	r21, 0x2D	; 45
    33be:	51 93       	st	Z+, r21
    33c0:	10 82       	st	Z, r1
    33c2:	c9 01       	movw	r24, r18
    33c4:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <strrev>

000033c8 <strrev>:
    33c8:	dc 01       	movw	r26, r24
    33ca:	fc 01       	movw	r30, r24
    33cc:	67 2f       	mov	r22, r23
    33ce:	71 91       	ld	r23, Z+
    33d0:	77 23       	and	r23, r23
    33d2:	e1 f7       	brne	.-8      	; 0x33cc <strrev+0x4>
    33d4:	32 97       	sbiw	r30, 0x02	; 2
    33d6:	04 c0       	rjmp	.+8      	; 0x33e0 <strrev+0x18>
    33d8:	7c 91       	ld	r23, X
    33da:	6d 93       	st	X+, r22
    33dc:	70 83       	st	Z, r23
    33de:	62 91       	ld	r22, -Z
    33e0:	ae 17       	cp	r26, r30
    33e2:	bf 07       	cpc	r27, r31
    33e4:	c8 f3       	brcs	.-14     	; 0x33d8 <strrev+0x10>
    33e6:	08 95       	ret

000033e8 <__udivmodhi4>:
    33e8:	aa 1b       	sub	r26, r26
    33ea:	bb 1b       	sub	r27, r27
    33ec:	51 e1       	ldi	r21, 0x11	; 17
    33ee:	07 c0       	rjmp	.+14     	; 0x33fe <__udivmodhi4_ep>

000033f0 <__udivmodhi4_loop>:
    33f0:	aa 1f       	adc	r26, r26
    33f2:	bb 1f       	adc	r27, r27
    33f4:	a6 17       	cp	r26, r22
    33f6:	b7 07       	cpc	r27, r23
    33f8:	10 f0       	brcs	.+4      	; 0x33fe <__udivmodhi4_ep>
    33fa:	a6 1b       	sub	r26, r22
    33fc:	b7 0b       	sbc	r27, r23

000033fe <__udivmodhi4_ep>:
    33fe:	88 1f       	adc	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	5a 95       	dec	r21
    3404:	a9 f7       	brne	.-22     	; 0x33f0 <__udivmodhi4_loop>
    3406:	80 95       	com	r24
    3408:	90 95       	com	r25
    340a:	bc 01       	movw	r22, r24
    340c:	cd 01       	movw	r24, r26
    340e:	08 95       	ret

00003410 <_exit>:
    3410:	f8 94       	cli

00003412 <__stop_program>:
    3412:	ff cf       	rjmp	.-2      	; 0x3412 <__stop_program>
